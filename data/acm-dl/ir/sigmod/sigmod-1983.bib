@inproceedings{10.1145/3245971,
author = {Williams, Robin},
title = {Session Details: Invited Speakers},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245971},
doi = {10.1145/3245971},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582194,
author = {Date, C. J.},
title = {Database Usability},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582194},
doi = {10.1145/971695.582194},
abstract = {There is a clear shift of emphasis in the way in which computer systems in general, and database management systems in particular, are perceived in the marketplace today. Questions of usability are beginning to outweigh the more traditional concerns with raw performance. The reason for this state of affairs is obvious; People costs are rising and machine costs are falling. This presentation consists of a critical examination of database management systems, or more specifically the externals of such systems, from a usability standpoint.The talk is divided into three parts. The first part, "What Does Usability Mean?", is an attempt to capture the notion of usability, or at least to characterize certain aspects of the notion in a variety of helpful ways. It is argued that usability is fundamentally concerned with raising the level of abstraction of the user interface in an appropriate and coherent manner --- with the emphasis on "appropriate" and "coherent".The second part of the talk, "Where We Are Today", contrasts the usability of modern (relational) systems with the comparative lack of usability found in older (nonrelational) systems. The usability advantages of the relational model and of relational systems are summarized and briefly analyzed.The third (and longest) part is called "How We Might Improve". Improvements are needed in at least four somewhat overlapping areas:1. Quality of current interfacesEven though they represent a major advance over earlier systems, most relational systems today still suffer from a number of usability problems, specifically with regard to missing function and what might be termed "ad hoc"-ness. Both of these aspects are illustrated with examples. Some principles of interface design (for example, uniformity and orthogonality) are briefly discussed.2. More semantics over current dataRaising the intelligence of the system (via semantic modeling) can also help to make the system more usable, especially with regard to database design and definition.3. New kinds of dataIncorporating new kinds of data (e.g., text, arrays, noncoded information) can also help to raise the level of the user interface, especially if the database management function is properly integrated with appropriate statistics, word-processing, graphics, and similar packages.4. New kinds of interfaceConventional, written-word-oriented query languages are very clumsy in many applications. The Field is wide open for improvements: text-editor-like interfaces, voice input and output, 3D terminals, pictorial interfaces, etc., etc.},
journal = {SIGMOD Rec.},
month = may,
pages = {1},
numpages = {1}
}

@inproceedings{10.1145/582192.582194,
author = {Date, C. J.},
title = {Database Usability},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582194},
doi = {10.1145/582192.582194},
abstract = {There is a clear shift of emphasis in the way in which computer systems in general, and database management systems in particular, are perceived in the marketplace today. Questions of usability are beginning to outweigh the more traditional concerns with raw performance. The reason for this state of affairs is obvious; People costs are rising and machine costs are falling. This presentation consists of a critical examination of database management systems, or more specifically the externals of such systems, from a usability standpoint.The talk is divided into three parts. The first part, "What Does Usability Mean?", is an attempt to capture the notion of usability, or at least to characterize certain aspects of the notion in a variety of helpful ways. It is argued that usability is fundamentally concerned with raising the level of abstraction of the user interface in an appropriate and coherent manner --- with the emphasis on "appropriate" and "coherent".The second part of the talk, "Where We Are Today", contrasts the usability of modern (relational) systems with the comparative lack of usability found in older (nonrelational) systems. The usability advantages of the relational model and of relational systems are summarized and briefly analyzed.The third (and longest) part is called "How We Might Improve". Improvements are needed in at least four somewhat overlapping areas:1. Quality of current interfacesEven though they represent a major advance over earlier systems, most relational systems today still suffer from a number of usability problems, specifically with regard to missing function and what might be termed "ad hoc"-ness. Both of these aspects are illustrated with examples. Some principles of interface design (for example, uniformity and orthogonality) are briefly discussed.2. More semantics over current dataRaising the intelligence of the system (via semantic modeling) can also help to make the system more usable, especially with regard to database design and definition.3. New kinds of dataIncorporating new kinds of data (e.g., text, arrays, noncoded information) can also help to raise the level of the user interface, especially if the database management function is properly integrated with appropriate statistics, word-processing, graphics, and similar packages.4. New kinds of interfaceConventional, written-word-oriented query languages are very clumsy in many applications. The Field is wide open for improvements: text-editor-like interfaces, voice input and output, 3D terminals, pictorial interfaces, etc., etc.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {1},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582195,
author = {Bernstein, Philip A.},
title = {Database Theory: Where Has It Been? Where is It Going?},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582195},
doi = {10.1145/971695.582195},
journal = {SIGMOD Rec.},
month = may,
pages = {2},
numpages = {1}
}

@inproceedings{10.1145/582192.582195,
author = {Bernstein, Philip A.},
title = {Database Theory: Where Has It Been? Where is It Going?},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582195},
doi = {10.1145/582192.582195},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {2},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582196,
author = {Gray, Jim},
title = {Practical Problems in Data Management: A Position Paper},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582196},
doi = {10.1145/971695.582196},
journal = {SIGMOD Rec.},
month = may,
pages = {3},
numpages = {1}
}

@inproceedings{10.1145/582192.582196,
author = {Gray, Jim},
title = {Practical Problems in Data Management: A Position Paper},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582196},
doi = {10.1145/582192.582196},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {3},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582197,
author = {Neuhold, Erich J.},
title = {Views on Data Management},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582197},
doi = {10.1145/971695.582197},
journal = {SIGMOD Rec.},
month = may,
pages = {4–5},
numpages = {2}
}

@inproceedings{10.1145/582192.582197,
author = {Neuhold, Erich J.},
title = {Views on Data Management},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582197},
doi = {10.1145/582192.582197},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {4–5},
numpages = {2},
location = {San Jose, California},
series = {SIGMOD '83}
}

@inproceedings{10.1145/3245972,
author = {Ries, D.},
title = {Session Details: Distributed System I},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245972},
doi = {10.1145/3245972},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582199,
author = {Wright, David D.},
title = {On Merging Partitioned Databases},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582199},
doi = {10.1145/971695.582199},
abstract = {Partitioning of a distributed data base requires either that update activity be restricted or that a strategy for conflict resolution and partition merging be used once communication is restored. The graph-theoretic approach used by Davidson follows the latter approach and can be used to show that finding an optimum solution to the general problem is NP-complete. We give several methods of reducing the size of the graphs involved. Two open subproblems are shown to be NP-complete, while an extension of a known polynomial-time subproblem is given. Simulation results are used to study both the amount of compression achieved by the graph reduction techniques and their effects on heuristics for the problem. In addition, some modifications are made to existing heuristics to improve their performance. A simple probabilistic model is developed and compared to the simulation results.},
journal = {SIGMOD Rec.},
month = may,
pages = {6–14},
numpages = {9}
}

@inproceedings{10.1145/582192.582199,
author = {Wright, David D.},
title = {On Merging Partitioned Databases},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582199},
doi = {10.1145/582192.582199},
abstract = {Partitioning of a distributed data base requires either that update activity be restricted or that a strategy for conflict resolution and partition merging be used once communication is restored. The graph-theoretic approach used by Davidson follows the latter approach and can be used to show that finding an optimum solution to the general problem is NP-complete. We give several methods of reducing the size of the graphs involved. Two open subproblems are shown to be NP-complete, while an extension of a known polynomial-time subproblem is given. Simulation results are used to study both the amount of compression achieved by the graph reduction techniques and their effects on heuristics for the problem. In addition, some modifications are made to existing heuristics to improve their performance. A simple probabilistic model is developed and compared to the simulation results.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {6–14},
numpages = {9},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582200,
author = {Maier, David and Ullman, Jeffrey D.},
title = {Fragments of Relations},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582200},
doi = {10.1145/971695.582200},
abstract = {We develop a theory of relations that are constructed by the union and selection operations from fragment relations. Algorithms for inserting and deleting from relations that are composed of physical fragments are discussed, and we show when such insertions and deletions are meaningful. We also show how to find an access set for a relation, that is, a set of fragments sufficient to produce the relation, and we apply the test to the question of how the fragmentation of relations interacts with a query on the relation, showing that a selection on the relation can be implemented by retrieving a set of physical fragments that forms an access set for another particular relation.},
journal = {SIGMOD Rec.},
month = may,
pages = {15–22},
numpages = {8}
}

@inproceedings{10.1145/582192.582200,
author = {Maier, David and Ullman, Jeffrey D.},
title = {Fragments of Relations},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582200},
doi = {10.1145/582192.582200},
abstract = {We develop a theory of relations that are constructed by the union and selection operations from fragment relations. Algorithms for inserting and deleting from relations that are composed of physical fragments are discussed, and we show when such insertions and deletions are meaningful. We also show how to find an access set for a relation, that is, a set of fragments sufficient to produce the relation, and we apply the test to the question of how the fragmentation of relations interacts with a query on the relation, showing that a selection on the relation can be implemented by retrieving a set of physical fragments that forms an access set for another particular relation.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {15–22},
numpages = {8},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582201,
author = {Wong, E. and Katz, R. H.},
title = {Distributing a Database for Parallelism},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582201},
doi = {10.1145/971695.582201},
abstract = {In this paper we treat the problem of subdividing a database and allocating the fragments to the sites in a distributed database system in order to maximize non-duplicative parallelism. Our goal is to establish a conceptual framework for distributing data without being committed to specific cost models.We introduce the concept of "local sufficiency" as a measure of parallelism, and show how certain classes of queries lead naturally to irredundant partitions of a database that are locally sufficient. For classes of queries for which no irredundant distribution is locally sufficient, we offer ways to introduce redundancy in achieving local sufficiency},
journal = {SIGMOD Rec.},
month = may,
pages = {23–29},
numpages = {7}
}

@inproceedings{10.1145/582192.582201,
author = {Wong, E. and Katz, R. H.},
title = {Distributing a Database for Parallelism},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582201},
doi = {10.1145/582192.582201},
abstract = {In this paper we treat the problem of subdividing a database and allocating the fragments to the sites in a distributed database system in order to maximize non-duplicative parallelism. Our goal is to establish a conceptual framework for distributing data without being committed to specific cost models.We introduce the concept of "local sufficiency" as a measure of parallelism, and show how certain classes of queries lead naturally to irredundant partitions of a database that are locally sufficient. For classes of queries for which no irredundant distribution is locally sufficient, we offer ways to introduce redundancy in achieving local sufficiency},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {23–29},
numpages = {7},
location = {San Jose, California},
series = {SIGMOD '83}
}

@inproceedings{10.1145/3245973,
author = {Kim, W.},
title = {Session Details: Query Optimization},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245973},
doi = {10.1145/3245973},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582203,
author = {Yu, C. T. and Chang, C. C.},
title = {On the Design of a Query Processing Strategy in a Distributed Database Environment},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582203},
doi = {10.1145/971695.582203},
abstract = {An algorithm is given to process a given query in a fragmented distributed data base environment. Unlike previous algorithms, it has the following desired features.(1) It makes use of redundant relations to reduce communication cost;(2) a copy of each relation referenced by the query is selected so that the set of relations are contained in the minimum number of sites;(3) an efficient algorithm to process fragments is provided;(4) all relations that need not be sent to the assembly site to produce the answer are identified. Thus, unnecessary sending of these relations across sites and processing on these relations, which are common in earlier algorithms, are avoided;(5) useless semi-joins are discarded and "worse" semi-joins are replaced by better ones;(6) a process to estimate the cost and the benefit of a semi-join, based on dynamic execution of semi-joins is introduced. It is expected that the new process is more accurate than earlier estimation process.The algorithm is easy to implement and is operational.},
journal = {SIGMOD Rec.},
month = may,
pages = {30–39},
numpages = {10}
}

@inproceedings{10.1145/582192.582203,
author = {Yu, C. T. and Chang, C. C.},
title = {On the Design of a Query Processing Strategy in a Distributed Database Environment},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582203},
doi = {10.1145/582192.582203},
abstract = {An algorithm is given to process a given query in a fragmented distributed data base environment. Unlike previous algorithms, it has the following desired features.(1) It makes use of redundant relations to reduce communication cost;(2) a copy of each relation referenced by the query is selected so that the set of relations are contained in the minimum number of sites;(3) an efficient algorithm to process fragments is provided;(4) all relations that need not be sent to the assembly site to produce the answer are identified. Thus, unnecessary sending of these relations across sites and processing on these relations, which are common in earlier algorithms, are avoided;(5) useless semi-joins are discarded and "worse" semi-joins are replaced by better ones;(6) a process to estimate the cost and the benefit of a semi-join, based on dynamic execution of semi-joins is introduced. It is expected that the new process is more accurate than earlier estimation process.The algorithm is easy to implement and is operational.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {30–39},
numpages = {10},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582204,
author = {Christodoulakis, Stavros},
title = {Estimating Block Transfers and Join Sizes},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582204},
doi = {10.1145/971695.582204},
abstract = {In this paper we provide estimates of the number of sequential and random block accesses required for retrieving a number of records of a file when the distribution of records in blocks of secondary storage is not uniform. We show how these results apply to estimating sizes of joins and semi-joins. We prove that when the uniformity of placement assumption is not satisfied it often leads to pessimistic estimates of performance. Finally we show a recursive estimation of the probability distribution of the number of blocks containing a given number of records.},
journal = {SIGMOD Rec.},
month = may,
pages = {40–54},
numpages = {15}
}

@inproceedings{10.1145/582192.582204,
author = {Christodoulakis, Stavros},
title = {Estimating Block Transfers and Join Sizes},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582204},
doi = {10.1145/582192.582204},
abstract = {In this paper we provide estimates of the number of sequential and random block accesses required for retrieving a number of records of a file when the distribution of records in blocks of secondary storage is not uniform. We show how these results apply to estimating sizes of joins and semi-joins. We prove that when the uniformity of placement assumption is not satisfied it often leads to pessimistic estimates of performance. Finally we show a recursive estimation of the probability distribution of the number of blocks containing a given number of records.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {40–54},
numpages = {15},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582205,
author = {Kambayashi, Yahiko and Yoshikawa, Masatoshi},
title = {Query Processing Utilizing Dependencies and Horizontal Decomposition},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582205},
doi = {10.1145/971695.582205},
abstract = {Since join operations are expensive, usually join scheduling is very important for query processing. In this paper we will discuss new procedures to handle cyclic queries utilizing dependencies and horizontal decompositions. There are three known procedures for cyclic query processing: (1) Relation merging, (2) Tuple-wise processing, (3) Attribute addition. As join operations are applied to relations which are processed by selection operations, the number of tuples is usually less than the original relation and thus there are situations in which temporary FDs are satisfied. Such FDs can be used to simplify the given query. To convert a given cyclic query into a tree, some relations must satisfy a set of FDs. This can be attained by horizontal decomposition. Tuple-wise processing and attribute addition are shown to be special cases of the FD-based procedure. We have also developed MVD-based procedures which are generalized from the FD-based procedure.},
journal = {SIGMOD Rec.},
month = may,
pages = {55–67},
numpages = {13}
}

@inproceedings{10.1145/582192.582205,
author = {Kambayashi, Yahiko and Yoshikawa, Masatoshi},
title = {Query Processing Utilizing Dependencies and Horizontal Decomposition},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582205},
doi = {10.1145/582192.582205},
abstract = {Since join operations are expensive, usually join scheduling is very important for query processing. In this paper we will discuss new procedures to handle cyclic queries utilizing dependencies and horizontal decompositions. There are three known procedures for cyclic query processing: (1) Relation merging, (2) Tuple-wise processing, (3) Attribute addition. As join operations are applied to relations which are processed by selection operations, the number of tuples is usually less than the original relation and thus there are situations in which temporary FDs are satisfied. Such FDs can be used to simplify the given query. To convert a given cyclic query into a tree, some relations must satisfy a set of FDs. This can be attained by horizontal decomposition. Tuple-wise processing and attribute addition are shown to be special cases of the FD-based procedure. We have also developed MVD-based procedures which are generalized from the FD-based procedure.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {55–67},
numpages = {13},
location = {San Jose, California},
series = {SIGMOD '83}
}

@inproceedings{10.1145/3245974,
author = {Aho, A.},
title = {Session Details: Universal Relation Systems},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245974},
doi = {10.1145/3245974},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582207,
author = {Maier, David and Rozenshtein, David and Warren, David S.},
title = {Windows on the World},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582207},
doi = {10.1145/971695.582207},
abstract = {We discuss the philosophy, history and theory of window functions. Window functions (sometimes called connections) are a means to treat a relational database as a semantic whole, rather than as an arbitrary collection of relations. Simply stated, a window function maps a database state and a relation scheme to a relation over the scheme. Window functions are the basis for all existing universal scheme interfaces. We present an assumption inherent in universal scheme interfaces, the unique role assumption.Window functions have evolved along two paths, giving rise to computational definitions and weak instance definitions. We examine several examples of each type of window function, with special attention to the association-object window function of PIQUE. We then look at properties we feel a reasonable window function should satisfy, notably the containment condition and faithfulness. We also define implicit objects, which are relation schemes that a window function treats in a special manner, and which are useful for describing the behavior of window functions.},
journal = {SIGMOD Rec.},
month = may,
pages = {68–78},
numpages = {11}
}

@inproceedings{10.1145/582192.582207,
author = {Maier, David and Rozenshtein, David and Warren, David S.},
title = {Windows on the World},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582207},
doi = {10.1145/582192.582207},
abstract = {We discuss the philosophy, history and theory of window functions. Window functions (sometimes called connections) are a means to treat a relational database as a semantic whole, rather than as an arbitrary collection of relations. Simply stated, a window function maps a database state and a relation scheme to a relation over the scheme. Window functions are the basis for all existing universal scheme interfaces. We present an assumption inherent in universal scheme interfaces, the unique role assumption.Window functions have evolved along two paths, giving rise to computational definitions and weak instance definitions. We examine several examples of each type of window function, with special attention to the association-object window function of PIQUE. We then look at properties we feel a reasonable window function should satisfy, notably the containment condition and faithfulness. We also define implicit objects, which are relation schemes that a window function treats in a special manner, and which are useful for describing the behavior of window functions.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {68–78},
numpages = {11},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582208,
author = {Laver, Kent and Mendelzon, Alberto O. and Graham, Marc H.},
title = {Functional Dependencies on Cyclic Database Schemes},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582208},
doi = {10.1145/971695.582208},
abstract = {We study how functional dependencies affect the cyclicity of a database scheme; in particular, when does a set of functional dependencies make a cyclic database scheme behave like an acyclic one.A database scheme is fd-acyclic if every pairwise-consistent database state that satisfies the fd's is join-consistent. We give a simple characterization of fd-acyclicity over a restricted class of database schemes. We then give a tableau-based characterization for the general case that leads to an algorithm for testing fd-acyclicity. This algorithm actually solves the more general problem of query equivalence under functional dependencies and typed inclusion dependencies.},
journal = {SIGMOD Rec.},
month = may,
pages = {79–91},
numpages = {13}
}

@inproceedings{10.1145/582192.582208,
author = {Laver, Kent and Mendelzon, Alberto O. and Graham, Marc H.},
title = {Functional Dependencies on Cyclic Database Schemes},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582208},
doi = {10.1145/582192.582208},
abstract = {We study how functional dependencies affect the cyclicity of a database scheme; in particular, when does a set of functional dependencies make a cyclic database scheme behave like an acyclic one.A database scheme is fd-acyclic if every pairwise-consistent database state that satisfies the fd's is join-consistent. We give a simple characterization of fd-acyclicity over a restricted class of database schemes. We then give a tableau-based characterization for the general case that leads to an algorithm for testing fd-acyclicity. This algorithm actually solves the more general problem of query equivalence under functional dependencies and typed inclusion dependencies.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {79–91},
numpages = {13},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582209,
author = {Honeyman, Peter and Sciore, Edward},
title = {A New Characterization of Independence},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582209},
doi = {10.1145/971695.582209},
abstract = {We introduce a restriction on the structure of a database scheme, called the primary key condition, and show that this condition characterizes independent database schemes when constraints are presented as keys. The primary key condition provides added insight into the structure of independent schemes, and leads to a general design methodology. We describe a linear-time algorithm for recognizing independent schemes.},
journal = {SIGMOD Rec.},
month = may,
pages = {92–96},
numpages = {5}
}

@inproceedings{10.1145/582192.582209,
author = {Honeyman, Peter and Sciore, Edward},
title = {A New Characterization of Independence},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582209},
doi = {10.1145/582192.582209},
abstract = {We introduce a restriction on the structure of a database scheme, called the primary key condition, and show that this condition characterizes independent database schemes when constraints are presented as keys. The primary key condition provides added insight into the structure of independent schemes, and leads to a general design methodology. We describe a linear-time algorithm for recognizing independent schemes.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {92–96},
numpages = {5},
location = {San Jose, California},
series = {SIGMOD '83}
}

@inproceedings{10.1145/3245975,
author = {Gray, J.},
title = {Session Details: Implementation Issues},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245975},
doi = {10.1145/3245975},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582211,
author = {Carey, Michael J.},
title = {An Abstract Model of Database Concurrency Control Algorithms},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582211},
doi = {10.1145/971695.582211},
abstract = {An abstract model of concurrency control algorithms is presented. The model facilitates implementation-independent descriptions of various algorithms, allowing them to be specified in terms of the information that they require, the conditions under which blocking or restarts are called for, and the manner in which requests are processed. The model also facilitates comparisons of the relative storage and CPU overheads of various algorithms based on their descriptions. Results are given for single-site versions of two-phase locking, basic timestamp ordering, and serial validation. Extensions which will allow comparisons of multiple version and distributed algorithms are discussed as well.},
journal = {SIGMOD Rec.},
month = may,
pages = {97–107},
numpages = {11}
}

@inproceedings{10.1145/582192.582211,
author = {Carey, Michael J.},
title = {An Abstract Model of Database Concurrency Control Algorithms},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582211},
doi = {10.1145/582192.582211},
abstract = {An abstract model of concurrency control algorithms is presented. The model facilitates implementation-independent descriptions of various algorithms, allowing them to be specified in terms of the information that they require, the conditions under which blocking or restarts are called for, and the manner in which requests are processed. The model also facilitates comparisons of the relative storage and CPU overheads of various algorithms based on their descriptions. Results are given for single-site versions of two-phase locking, basic timestamp ordering, and serial validation. Extensions which will allow comparisons of multiple version and distributed algorithms are discussed as well.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {97–107},
numpages = {11},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582212,
author = {Kohler, Walter H. and Wilner, Kenneth C. and Stankovic, John A.},
title = {An Experimental Comparison of Locking Policies in a Testbed Database System},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582212},
doi = {10.1145/971695.582212},
abstract = {Multiuser transaction processing and database systems commonly use well-formed, two-phase locking to maintain data consistency. The preliminary results presented here represent the first step of an experimental investigation of the impact of different locking schemes on transaction performance. Tests were performed using a simplified but functionally complete "testbed" system. The transaction throughput rates for three different locking policies (file level locking, page level locking, and mixed level locking) are compared as a function of the lock mode (exclusive or share) and the file size for a small centralized database application. The experimental results for this environment show that the choice of locking policy and lock mode can have a significant impact on transaction throughput performance. The tests also demonstrate the sensitivity of the conclusions to the choice of workload and system characteristics.},
journal = {SIGMOD Rec.},
month = may,
pages = {108–119},
numpages = {12}
}

@inproceedings{10.1145/582192.582212,
author = {Kohler, Walter H. and Wilner, Kenneth C. and Stankovic, John A.},
title = {An Experimental Comparison of Locking Policies in a Testbed Database System},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582212},
doi = {10.1145/582192.582212},
abstract = {Multiuser transaction processing and database systems commonly use well-formed, two-phase locking to maintain data consistency. The preliminary results presented here represent the first step of an experimental investigation of the impact of different locking schemes on transaction performance. Tests were performed using a simplified but functionally complete "testbed" system. The transaction throughput rates for three different locking policies (file level locking, page level locking, and mixed level locking) are compared as a function of the lock mode (exclusive or share) and the file size for a small centralized database application. The experimental results for this environment show that the choice of locking policy and lock mode can have a significant impact on transaction throughput performance. The tests also demonstrate the sensitivity of the conclusions to the choice of workload and system characteristics.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {108–119},
numpages = {12},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582213,
author = {Lomet, David B.},
title = {A High Performance, Universal, Key Associative Access Method},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582213},
doi = {10.1145/971695.582213},
abstract = {A new file organization is proposed that combines the advantages of digital B-trees and extendible hashing methods into one organization that can be used universally. The method, like these predecessors, relies on digital searching. The key notions are: (i) that multipage nodes are addressed by the root and can have both data and index entries, the mix of entries changing over time; and (ii) that these nodes can be doubled with file growth and, when this occurs, data nodes at the next level of the tree are absorbed into the pages of these nodes, frequently keeping data closer to the root and simultaneously improving utilization. The result is an unbalanced tree that we call a digital lopsided tree or DL-tree. The paper describes DL-trees and their operations, and examines their properties. The most important engineering issues involve the doubling process and the methods used to optimize the tree properties. Ways of dealing with these issues are suggested.},
journal = {SIGMOD Rec.},
month = may,
pages = {120–133},
numpages = {14}
}

@inbook{10.1145/582192.582213,
author = {Lomet, David B.},
title = {A High Performance, Universal, Key Associative Access Method},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582213},
abstract = {A new file organization is proposed that combines the advantages of digital B-trees and extendible hashing methods into one organization that can be used universally. The method, like these predecessors, relies on digital searching. The key notions are: (i) that multipage nodes are addressed by the root and can have both data and index entries, the mix of entries changing over time; and (ii) that these nodes can be doubled with file growth and, when this occurs, data nodes at the next level of the tree are absorbed into the pages of these nodes, frequently keeping data closer to the root and simultaneously improving utilization. The result is an unbalanced tree that we call a digital lopsided tree or DL-tree. The paper describes DL-trees and their operations, and examines their properties. The most important engineering issues involve the doubling process and the methods used to optimize the tree properties. Ways of dealing with these issues are suggested.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {120–133},
numpages = {14}
}

@inproceedings{10.1145/3245976,
author = {Stonebraker, M.},
title = {Session Details: Panel on Dbms and Ai: Is There Any Common Point of View?},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245976},
doi = {10.1145/3245976},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582215,
author = {Stonebraker, Michael and Sagalowicz, Daniel and Wilensky, Robert},
title = {DBMS and AI: Is There Any Common Point of View?},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582215},
doi = {10.1145/971695.582215},
journal = {SIGMOD Rec.},
month = may,
pages = {134},
numpages = {1}
}

@inproceedings{10.1145/582192.582215,
author = {Stonebraker, Michael and Sagalowicz, Daniel and Wilensky, Robert},
title = {DBMS and AI: Is There Any Common Point of View?},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582215},
doi = {10.1145/582192.582215},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {134},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@inproceedings{10.1145/3245977,
author = {Cattell, R.},
title = {Session Details: Application Systems},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245977},
doi = {10.1145/3245977},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582217,
author = {Rowe, Neil C.},
title = {Top-down Statistical Estimation on a Database},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582217},
doi = {10.1145/971695.582217},
abstract = {The size of data sets subjected to statistical analysis is increasing as computer technology develops. Quick estimates of statistics rather than exact values are becoming increasingly important to analysts. We propose a new technique for estimating statistics on a database, a "top-down" alternative to the "bottom-up" method of sampling. This approach precomputes a set of general-purpose statistics on the database, a "database abstract", and then uses a large set of inference rules to make bounded estimates of other, arbitrary statistics requested by users. The inference rules form a new example of an artificial-intelligence "expert system". There are several important advantages of this approach over sampling methods.},
journal = {SIGMOD Rec.},
month = may,
pages = {135–145},
numpages = {11}
}

@inproceedings{10.1145/582192.582217,
author = {Rowe, Neil C.},
title = {Top-down Statistical Estimation on a Database},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582217},
doi = {10.1145/582192.582217},
abstract = {The size of data sets subjected to statistical analysis is increasing as computer technology develops. Quick estimates of statistics rather than exact values are becoming increasingly important to analysts. We propose a new technique for estimating statistics on a database, a "top-down" alternative to the "bottom-up" method of sampling. This approach precomputes a set of general-purpose statistics on the database, a "database abstract", and then uses a large set of inference rules to make bounded estimates of other, arbitrary statistics requested by users. The inference rules form a new example of an artificial-intelligence "expert system". There are several important advantages of this approach over sampling methods.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {135–145},
numpages = {11},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582218,
author = {Lohman, Guy M. and Stoltzfus, Joseph C. and Benson, Anita N. and Martin, Michael D. and Cardenas, Alfonso F.},
title = {Remotely-Sensed Geophysical Databases: Experience and Implications for Generalized DBMS},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582218},
doi = {10.1145/971695.582218},
abstract = {This paper presents the characteristics of scientific remotely-sensed databases that are relevant to --- and pose unique challenges for --- general-purpose database management systems (DBMSs). We describe a prototype system that integrates geophysical data and its metadata from both satellite and in situ sources, using a relational general-purpose DBMS to manage the catalog and observational data, and a video optical disk to archive images. Based upon our experience with this application, we suggest augmentations to DBMSs that would facilitate their use not only for scientific databases, but also for engineering, document, and even commercial database applications.},
journal = {SIGMOD Rec.},
month = may,
pages = {146–160},
numpages = {15}
}

@inproceedings{10.1145/582192.582218,
author = {Lohman, Guy M. and Stoltzfus, Joseph C. and Benson, Anita N. and Martin, Michael D. and Cardenas, Alfonso F.},
title = {Remotely-Sensed Geophysical Databases: Experience and Implications for Generalized DBMS},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582218},
doi = {10.1145/582192.582218},
abstract = {This paper presents the characteristics of scientific remotely-sensed databases that are relevant to --- and pose unique challenges for --- general-purpose database management systems (DBMSs). We describe a prototype system that integrates geophysical data and its metadata from both satellite and in situ sources, using a relational general-purpose DBMS to manage the catalog and observational data, and a video optical disk to archive images. Based upon our experience with this application, we suggest augmentations to DBMSs that would facilitate their use not only for scientific databases, but also for engineering, document, and even commercial database applications.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {146–160},
numpages = {15},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582219,
author = {Shu, Nan C. and Wong, Harry K. T. and Lum, Vincent Y.},
title = {Forms Approach to Requirements Specification for Database Design},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582219},
doi = {10.1145/971695.582219},
abstract = {One of the most difficult tasks in database design is the collection of relevant information needed for database design. This information can be separated into two categories: information about the processes which use, modify or produce the data, and information about the data which is used, modified, or produced by the processes. This paper describes a "forms" oriented requirements specification facility as a formal means for capturing the information crucial for database design. Both kinds of information are expressible by the proposed structured forms specification. Furthermore, not only the application usage, but also the integrity constraints that must be maintained in the database can be captured in a concise, unambiguous and machine manipulable manner. The concepts underlying the forms approach are few and simple, hence it is easy to use for the database designer and can be understood by non-computer specialists. This facilitates the cooperation from users to participate in the specification of database application requirements.},
journal = {SIGMOD Rec.},
month = may,
pages = {161–172},
numpages = {12}
}

@inproceedings{10.1145/582192.582219,
author = {Shu, Nan C. and Wong, Harry K. T. and Lum, Vincent Y.},
title = {Forms Approach to Requirements Specification for Database Design},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582219},
doi = {10.1145/582192.582219},
abstract = {One of the most difficult tasks in database design is the collection of relevant information needed for database design. This information can be separated into two categories: information about the processes which use, modify or produce the data, and information about the data which is used, modified, or produced by the processes. This paper describes a "forms" oriented requirements specification facility as a formal means for capturing the information crucial for database design. Both kinds of information are expressible by the proposed structured forms specification. Furthermore, not only the application usage, but also the integrity constraints that must be maintained in the database can be captured in a concise, unambiguous and machine manipulable manner. The concepts underlying the forms approach are few and simple, hence it is easy to use for the database designer and can be understood by non-computer specialists. This facilitates the cooperation from users to participate in the specification of database application requirements.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {161–172},
numpages = {12},
location = {San Jose, California},
series = {SIGMOD '83}
}

@inproceedings{10.1145/3245978,
author = {Bancilhon, F.},
title = {Session Details: Database Theory},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245978},
doi = {10.1145/3245978},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582221,
author = {D'Atri, Alessandro and Moscarini, Marina and Spyratos, Nicolas},
title = {Answering Queries in Relational Databases},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582221},
doi = {10.1145/971695.582221},
abstract = {This paper concerns query answering in relational databases. We assume a universe U of attributes and a set of values associated with each attribute. A database scheme is a given collection R = {1, 2, ..., n} of subsets of U, called relation schemes. A query in R is any subset of U. We call "context" any joinable subset of R. An unambiguous context is one in which a query receives the same answer independently of the subcontext used for the computation. A formal treatment of unambiguous contexts is presented and it is shown that they provide a suitable basis for discussing the universal relation assumption, the relationship uniqueness assumption, maximal objects, and other related concepts.},
journal = {SIGMOD Rec.},
month = may,
pages = {173–177},
numpages = {5}
}

@inproceedings{10.1145/582192.582221,
author = {D'Atri, Alessandro and Moscarini, Marina and Spyratos, Nicolas},
title = {Answering Queries in Relational Databases},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582221},
doi = {10.1145/582192.582221},
abstract = {This paper concerns query answering in relational databases. We assume a universe U of attributes and a set of values associated with each attribute. A database scheme is a given collection R = {1, 2, ..., n} of subsets of U, called relation schemes. A query in R is any subset of U. We call "context" any joinable subset of R. An unambiguous context is one in which a query receives the same answer independently of the subcontext used for the computation. A formal treatment of unambiguous contexts is presented and it is shown that they provide a suitable basis for discussing the universal relation assumption, the relationship uniqueness assumption, maximal objects, and other related concepts.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {173–177},
numpages = {5},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582222,
author = {Imielinski, Tomasz and Lipski, Witold},
title = {Incomplete Information and Dependencies in Relational Databases},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582222},
doi = {10.1145/971695.582222},
abstract = {An incomplete information relational database combines two types of information about the real world modeled by the database: (a) the information represented by tables with null values ("value not known") allowed as entries, and (b) the data dependencies, which are known to be satisfied in the real world. We view the well known chase procedure as a process which transforms type (b) information into an "equivalent" type (a) form. Assuming that the data dependencies are arbitrary implicational dependencies, we show that this transformation is not quite equivalent, but the corruption of information introduced cannot be discovered if the query language uses the operations of projection, positive selection (i.e. no negation in selection condition), union, natural join and renaming of attributes. This result can be interpreted also as the new important property of chase.The influence of so-called view dependencies on the table with null values is also examined.},
journal = {SIGMOD Rec.},
month = may,
pages = {178–184},
numpages = {7}
}

@inproceedings{10.1145/582192.582222,
author = {Imielinski, Tomasz and Lipski, Witold},
title = {Incomplete Information and Dependencies in Relational Databases},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582222},
doi = {10.1145/582192.582222},
abstract = {An incomplete information relational database combines two types of information about the real world modeled by the database: (a) the information represented by tables with null values ("value not known") allowed as entries, and (b) the data dependencies, which are known to be satisfied in the real world. We view the well known chase procedure as a process which transforms type (b) information into an "equivalent" type (a) form. Assuming that the data dependencies are arbitrary implicational dependencies, we show that this transformation is not quite equivalent, but the corruption of information introduced cannot be discovered if the query language uses the operations of projection, positive selection (i.e. no negation in selection condition), union, natural join and renaming of attributes. This result can be interpreted also as the new important property of chase.The influence of so-called view dependencies on the table with null values is also examined.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {178–184},
numpages = {7},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582223,
author = {Kuck, Sharon M. and Sagiv, Yehoshua},
title = {Designing Globally Consistent Network Schemas},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582223},
doi = {10.1145/971695.582223},
abstract = {In this paper we address several problems relating to functional dependencies and network schemas. We investigate properties of the functional dependencies that are implicitly defined in a network schema. A definition for the satisfaction of functional dependencies by a network database is proposed, and then we give a sufficient condition for the global consistency of a network schema. A network schema is globally consistent if all its databases satisfy the functional dependencies that are implicitly defined in the schema. Finally, we describe a design methodology for producing a network schema whose set of implicitly defined functional dependencies implies a set of functional dependencies specified by the user.},
journal = {SIGMOD Rec.},
month = may,
pages = {185–195},
numpages = {11}
}

@inproceedings{10.1145/582192.582223,
author = {Kuck, Sharon M. and Sagiv, Yehoshua},
title = {Designing Globally Consistent Network Schemas},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582223},
doi = {10.1145/582192.582223},
abstract = {In this paper we address several problems relating to functional dependencies and network schemas. We investigate properties of the functional dependencies that are implicitly defined in a network schema. A definition for the satisfaction of functional dependencies by a network database is proposed, and then we give a sufficient condition for the global consistency of a network schema. A network schema is globally consistent if all its databases satisfy the functional dependencies that are implicitly defined in the schema. Finally, we describe a design methodology for producing a network schema whose set of implicitly defined functional dependencies implies a set of functional dependencies specified by the user.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {185–195},
numpages = {11},
location = {San Jose, California},
series = {SIGMOD '83}
}

@inproceedings{10.1145/3245979,
author = {Pirotte, A.},
title = {Session Details: Query Languages},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245979},
doi = {10.1145/3245979},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582225,
author = {Jarke, Matthias and Koch, J\"{u}rgen},
title = {Range Nesting: A Fast Method to Evaluate Quantified Queries},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582225},
doi = {10.1145/971695.582225},
abstract = {Database queries explicitly containing existential and universal quantification become increasingly important in a number of areas such as integrity checking, interaction of databases and AI systems, heterogeneous databases, and statistical databases. Using a concept of range nesting in relational calculus expressions, the paper describes evaluation algorithms and transformation methods for an important class of quantified relational calculus queries called perfect expressions. This class includes well-known classes of "easy" queries such as tree queries (with free and existentially quantified variables only), and complacent (disconnected) queries.},
journal = {SIGMOD Rec.},
month = may,
pages = {196–206},
numpages = {11}
}

@inproceedings{10.1145/582192.582225,
author = {Jarke, Matthias and Koch, J\"{u}rgen},
title = {Range Nesting: A Fast Method to Evaluate Quantified Queries},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582225},
doi = {10.1145/582192.582225},
abstract = {Database queries explicitly containing existential and universal quantification become increasingly important in a number of areas such as integrity checking, interaction of databases and AI systems, heterogeneous databases, and statistical databases. Using a concept of range nesting in relational calculus expressions, the paper describes evaluation algorithms and transformation methods for an important class of quantified relational calculus queries called perfect expressions. This class includes well-known classes of "easy" queries such as tree queries (with free and existentially quantified variables only), and complacent (disconnected) queries.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {196–206},
numpages = {11},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582226,
author = {Zaniolo, Carlo},
title = {The Database Language GEM},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582226},
doi = {10.1145/971695.582226},
abstract = {GEM (an acronym for General Entity Manipulator) is a general-purpose query and update language for the DSIS data model, which is a semantic data model of the Entity-Relationship type. GEM is designed as an easy-to-use extension of the relational language QUEL, providing support for the notions of entities with surrogates, aggregation, generalization, null values, and set-valued attributes.},
journal = {SIGMOD Rec.},
month = may,
pages = {207–218},
numpages = {12}
}

@inproceedings{10.1145/582192.582226,
author = {Zaniolo, Carlo},
title = {The Database Language GEM},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582226},
doi = {10.1145/582192.582226},
abstract = {GEM (an acronym for General Entity Manipulator) is a general-purpose query and update language for the DSIS data model, which is a semantic data model of the Entity-Relationship type. GEM is designed as an easy-to-use extension of the relational language QUEL, providing support for the notions of entities with surrogates, aggregation, generalization, null values, and set-valued attributes.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {207–218},
numpages = {12},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582227,
author = {Missikoff, M. and Scholl, M.},
title = {Relational Queries in a Domain Based DBMS},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582227},
doi = {10.1145/971695.582227},
abstract = {This paper addresses the problem of relational queries processing in the domain based database machine DBMAC. A brief description of the storage organisation of the domain based DBMS is first given. Then the operating principles of the domain based data-model, called D-model, is described through some examples. The central part of the paper deals with the translation of relational queries into operations on objects of the D-model. Objects of the D-model and a set of operations on these objects are first defined : this set S of operations is shown to be complete in that any relational query can be translated into D-model operations belonging to S.Finally we give a method for processing relation queries using D-model operations.The basic advantages to be expected from a domain based physical organization of data are :1. fast equi-join execution,2. a compact representation of intermediate results.The latter should lead to efficient processing of complex queries, provided a powerful parallel physical architecture is chosen for implementation.},
journal = {SIGMOD Rec.},
month = may,
pages = {219–227},
numpages = {9}
}

@inproceedings{10.1145/582192.582227,
author = {Missikoff, M. and Scholl, M.},
title = {Relational Queries in a Domain Based DBMS},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582227},
doi = {10.1145/582192.582227},
abstract = {This paper addresses the problem of relational queries processing in the domain based database machine DBMAC. A brief description of the storage organisation of the domain based DBMS is first given. Then the operating principles of the domain based data-model, called D-model, is described through some examples. The central part of the paper deals with the translation of relational queries into operations on objects of the D-model. Objects of the D-model and a set of operations on these objects are first defined : this set S of operations is shown to be complete in that any relational query can be translated into D-model operations belonging to S.Finally we give a method for processing relation queries using D-model operations.The basic advantages to be expected from a domain based physical organization of data are :1. fast equi-join execution,2. a compact representation of intermediate results.The latter should lead to efficient processing of complex queries, provided a powerful parallel physical architecture is chosen for implementation.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {219–227},
numpages = {9},
location = {San Jose, California},
series = {SIGMOD '83}
}

@inproceedings{10.1145/3245980,
author = {Munz, R.},
title = {Session Details: Distributed Systems II},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245980},
doi = {10.1145/3245980},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582229,
author = {Chan, Arvola and Dayal, Umeshwar and Fox, Stephen and Goodman, Nathan and Ries, Daniel R. and Skeen, Dale},
title = {Overview of an Ada Compatible Distributed Database Manager},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582229},
doi = {10.1145/971695.582229},
abstract = {Adaplex is an integrated language for programming database applications. It results from the embedding of the database sublanguage DAPLEX in the general purpose programming language Ada. This paper provides an overview of the DDM: a distributed database manager (DDM) that supports the use of Adaplex as an interface language. The important technical innovations we have incorporated in the design of this system include:1. An advanced data model that captures more application semantics than conventional data models.2. Support for flexible data distribution options that improve locality of reference and efficiency of query processing.3. Extensive query optimization that combines compile time access path optimization with run time site selection.4. Efficient transaction management that reduces transaction conflicts and improves the resiliency of replicated data.5. Robust, incremental recovery management that provides for automatic recovery from certain "catastrophic" failure conditions.},
journal = {SIGMOD Rec.},
month = may,
pages = {228–237},
numpages = {10}
}

@inproceedings{10.1145/582192.582229,
author = {Chan, Arvola and Dayal, Umeshwar and Fox, Stephen and Goodman, Nathan and Ries, Daniel R. and Skeen, Dale},
title = {Overview of an Ada Compatible Distributed Database Manager},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582229},
doi = {10.1145/582192.582229},
abstract = {Adaplex is an integrated language for programming database applications. It results from the embedding of the database sublanguage DAPLEX in the general purpose programming language Ada. This paper provides an overview of the DDM: a distributed database manager (DDM) that supports the use of Adaplex as an interface language. The important technical innovations we have incorporated in the design of this system include:1. An advanced data model that captures more application semantics than conventional data models.2. Support for flexible data distribution options that improve locality of reference and efficiency of query processing.3. Extensive query optimization that combines compile time access path optimization with run time site selection.4. Efficient transaction management that reduces transaction conflicts and improves the resiliency of replicated data.5. Robust, incremental recovery management that provides for automatic recovery from certain "catastrophic" failure conditions.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {228–237},
numpages = {10},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582230,
author = {Wilms, Paul F. and Lindsay, Bruce G. and Selinger, Patricia G.},
title = {"I Wish I Were over There": Distributed Execution Protocols for Data Definition in R},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582230},
doi = {10.1145/971695.582230},
abstract = {The design and implementation of R*, an experimental prototype of a distributed system for the management of interrelated, voluntarily cooperating, but also autonomous databases is based on several major objectives: site autonomy, transparency, ease of use and performance. This paper discusses the way data definition and control statements are executed in a distributed environment and shows how the general objectives are fulfilled. Specialized distributed execution facilities have been developed to facilitate the implementation of complex multi-site functions. This paper describes the facilities and methodology used to implement the distributed processing needed to perform multi-site data definition operations in R*.},
journal = {SIGMOD Rec.},
month = may,
pages = {238–242},
numpages = {5}
}

@inproceedings{10.1145/582192.582230,
author = {Wilms, Paul F. and Lindsay, Bruce G. and Selinger, Patricia G.},
title = {"I Wish I Were over There": Distributed Execution Protocols for Data Definition in R},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582230},
doi = {10.1145/582192.582230},
abstract = {The design and implementation of R*, an experimental prototype of a distributed system for the management of interrelated, voluntarily cooperating, but also autonomous databases is based on several major objectives: site autonomy, transparency, ease of use and performance. This paper discusses the way data definition and control statements are executed in a distributed environment and shows how the general objectives are fulfilled. Specialized distributed execution facilities have been developed to facilitate the implementation of complex multi-site functions. This paper describes the facilities and methodology used to implement the distributed processing needed to perform multi-site data definition operations in R*.},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {238–242},
numpages = {5},
location = {San Jose, California},
series = {SIGMOD '83}
}

@inproceedings{10.1145/3245981,
author = {Ariav, G.},
title = {Session Details: Panel on Time and Databases},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245981},
doi = {10.1145/3245981},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '83}
}

@article{10.1145/971695.582232,
author = {Ariav, Gad and Clifford, Jim and Jarke, Matthias},
title = {Panel on Time and Databases},
year = {1983},
issue_date = {May 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/971695.582232},
doi = {10.1145/971695.582232},
journal = {SIGMOD Rec.},
month = may,
pages = {243–245},
numpages = {3}
}

@inproceedings{10.1145/582192.582232,
author = {Ariav, Gad and Clifford, Jim and Jarke, Matthias},
title = {Panel on Time and Databases},
year = {1983},
isbn = {0897911040},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582192.582232},
doi = {10.1145/582192.582232},
booktitle = {Proceedings of the 1983 ACM SIGMOD International Conference on Management of Data},
pages = {243–245},
numpages = {3},
location = {San Jose, California},
series = {SIGMOD '83}
}

