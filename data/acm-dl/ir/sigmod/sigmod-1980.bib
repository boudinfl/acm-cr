@inproceedings{10.1145/3253378,
author = {Scheuermann, Peter and Cardenas, Alfonso},
title = {Session Details: Database Design},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253378},
doi = {10.1145/3253378},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582252,
author = {Sakai, Hirotaka},
title = {Entity-Relationship Approach to the Conceptual Schema Design},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582252},
doi = {10.1145/582250.582252},
abstract = {The purpose of this paper is to present a systematic approach to the conceptual schema design. The entity-relationship model is used as the conceptual schema model. The entity-relationship schema, a formal description of the model, is defined to explicitly state the dependency structures such as the functional dependencies, the transitive dependencies, and the hierarchical decompositions. Based upon the analysis of these structural properties, the schema is iteratively transformed into the refined form. The notion of the access weight matrix is also introduced as a measure to evaluate the schemas.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {1–8},
numpages = {8},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582253,
author = {Lusk, Ewing L. and Overbeek, Ross A. and Parrello, Bruce},
title = {A Practical Design Methodology for the Implementation of IMS Databases, Using the Entity-Relationship Model},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582253},
doi = {10.1145/582250.582253},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {9–21},
numpages = {13},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582254,
author = {Katz, R. H. and Wong, E.},
title = {An Access Path Model for Physical Database Design},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582254},
doi = {10.1145/582250.582254},
abstract = {Design and Access Path Data Models are presented to form an integrated framework for logical and physical database design in a heterogeneous database environment. This paper focuses on the physical design process. First, a physical design is specified in terms of general properties of access paths, independent of implementation details. Then, a design is realized by mapping the specification into the storage structures of a particular database system. Algorithms for assigning the properties to logical access paths and for realizing a CODASYL 78 DBTG schema are given.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {22–29},
numpages = {8},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/3253379,
author = {Shoshani, Arie},
title = {Session Details: Data and Conceptual Models},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253379},
doi = {10.1145/3253379},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582256,
author = {Loomis, Mary E. S.},
title = {The 78 CODASYL Database Model: A Comparison with Preceding Specifications},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582256},
doi = {10.1145/582250.582256},
abstract = {This paper compares the database model specified by the CODAYSL Data Definition Language Committee in its 1978 Journal of Development and the prior model, known familiarly as the CODASYL DBTG model, as specified in 1973 and 1971. The primary achievement of the 78 model appears to be increased potential for data independence by separation of external model and internal model considerations. The external model is described by a DDL; the internal model is described by a DSDL. Additionally, there is enhanced potential for data integrity via more explicit expression of data integrity constraints in the DDL. Conversion of a database from 73 model CODASYL DBMS support to 78 model support is discussed with emphasis on DSDL capabilities. The range of options in the DSDL open to the database designer for specifications of internal storage structures is surveyed. Several conclusions are drawn regarding implementation of support for the 78 model.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {30–44},
numpages = {15},
keywords = {database model, data independence, data storage description language, DBTG, data definition language, database management system, CODASYL},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/3253380,
author = {Lien, Edmund},
title = {Session Details: Data Dependency Theories},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253380},
doi = {10.1145/3253380},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582258,
author = {Sadri, Fereidoon and Ullman, Jeffrey D.},
title = {The Interaction between Functional Dependencies and Template Dependencies},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582258},
doi = {10.1145/582250.582258},
abstract = {A large class of dependencies, called template dependencies, was introduced in Sadri and Ullman [1979], and a complete set of inference rules (axioms) was given for it. In this paper, we investigate the interaction between template dependencies and functional dependencies. We develop techniques for partially deciding which template and functional dependencies are logically implied by a set of template and functional dependencies. Since template dependencies include all dependencies, besides functional dependencies, known to us (such as multivalued, join, mutual, generalized mutual, and subset dependencies, and their embedded versions), the results of this paper enable us to apply the techniques from Sadri and Ullman [1979] to any set of data dependencies.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {45–51},
numpages = {7},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582259,
author = {Parker, D. Stott and Parsaye-Ghomi, Kamran},
title = {Inferences Involving Embedded Multivalued Dependencies and Transitive Dependencies},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582259},
doi = {10.1145/582250.582259},
abstract = {Much work has been done recently on finding a complete set of dependency rules for Embedded Multivalued Dependencies (EMVDs), the generalization of the Multivalued Dependencies developed by Fagin and Zaniolo. We show that no finite such set of rules can exist by explicitly constructing a class containing, for all n, irreducible n-ary EMVD inference rules. These n-ary rules may be understood clearly when described in terms of the more "expressive" Transitive Dependencies (TDs) of Paredaens. However, we show in addition that no finite set of rules can exist for TDs either.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {52–57},
numpages = {6},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/3253381,
author = {Merten, Alan},
title = {Session Details: User Interfaces},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253381},
doi = {10.1145/3253381},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582261,
author = {Stonebraker, Michael and Keller, Kenneth},
title = {Embedding Expert Knowledge and Hypothetical Data Bases into a Data Base System},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582261},
doi = {10.1145/582250.582261},
abstract = {This paper is concerned with adding knowledge to a data base management system and suggests two appropriate mechanisms, namely hypothetical data bases (HDB's) and experts. Herein we indicate the need for HDB's and define the extensions that are needed to a data base system to support HDB's.In addition, we suggest that the notion of "experts" is an appropriate way to add semantic knowledge to a data base system. Unlike most other proposals which extend an underlying data model to capture more meaning, our proposal does not require extensions to the schema. Moreover, the DBMS does not even have to know how an expert functions. In this paper we define an expert and indicate how it would be added to one existing data base system.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {58–66},
numpages = {9},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582262,
author = {Burger, John F.},
title = {Semantic Database Mapping in EUFID},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582262},
doi = {10.1145/582250.582262},
abstract = {The End-User Friendly Interface to Data Management (EUFID) is a processing system of programs which permits users to query a database in a natural English-like way. The EUFID system translates the user's question into a query expressed in the query language of the target DataBase Management System (DBMS). EUFID makes use of two very different views of the applications data: that of the users, and that of the DBMS. This paper describes the mapping of query statements from one view to the other. Mapping is discussed in general terms as well as in terms of the specific algorithms of EUFID. Examples are given.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {67–74},
numpages = {8},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582263,
author = {Hammer, Michael and Berkowitz, Brian},
title = {DIAL: A Programming Language for Data Intensive Applications},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582263},
doi = {10.1145/582250.582263},
abstract = {DIAL is a problem-oriented and high-level programming language oriented towards database applications. It integrates into a unified framework database primitives and computational facilities, so that an application programmer will deal with a single coherent language. The design of DIAL is based on the premise that in order to have a meaningful impact on the construction of application software, a database programming language should eschew generality and focus on what is unique about the application domain in question. To that end, DIAL seeks to embody features that naturally express the most common and frequently recurring patterns encountered in database applications programs.A number of its features distinguish DIAL from other contemporary related efforts. Data description plays a primary role in DIAL, in that a substantial amount of application semantics is expressed in the database schema rather than in procedure definitions; to achieve this end, DIAL employs a higher-level data model (the SDM) as its data description mechanism. Facilities for conducting user-system dialogues are also embedded in the language. Specialized control structures are provided to allow for succinct and direct expression of the algorithmic structure of procedures that utilize the database. High-level mechanisms (called controllers) are used to specify an application system's required behavior in the face of multiple concurrent users and aborted transactions.DIAL has been applied to two realistic and substantial systems, a purchasing application and a job-shop scheduler. Continued validation studies of the language are underway, as are an implementation effort and the design of an allied program development system.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {75–92},
numpages = {18},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/3253382,
author = {Hsiao, David},
title = {Session Details: Database Machines},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253382},
doi = {10.1145/3253382},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582265,
author = {Bancilhon, Fran\c{c}ois and Scholl, Miche\l{}},
title = {Design of a Backend Processor for a Data Base Machine},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582265},
doi = {10.1145/582250.582265},
abstract = {Most data base machines use some type of "filter" to perform unary operations on files. This filter processes information "on the fly" during its transfer from mass storage (Disk) to main storage (main memory or buffer). This paper is devoted to the design study of such a filter for relational-type data bases. It is therefore assumed that data are structured as a set of n-ary relations.Using a top-down approach we classify the requirements under two catagories:1) Functional specification of the filter: the filter should perform the unary relational operations i.e. projection and restriction; it should also permit insertion deletion and updates of tuples.2) Performance requirements: in a filtering system access time is a linear function of the space used to the store relations, it becomes therefore of the utmost importance to minimize this space.In order to meet the second requirement, we suggest to structure the n-ary relations into hierarchical free format files. Clearly, such a data structure minimizes space: the remaining problems being the ability to read and update such files. It is then shown that an automaton-like device is sufficient to perform projections and restrictions of relations and insertions, deletions and updates of tuples. That device is described and an algorithm that automatically generates the microprogram realizing that device from the description of the relation and that of the operations to be performed is given.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {93–93g},
numpages = {8},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582266,
author = {Boral, Haran and DeWitt, David J.},
title = {Design Considerations for Data-Flow Database Machines},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582266},
doi = {10.1145/582250.582266},
abstract = {This paper presents a discussion of the application of data-flow machine concepts to the design and implementation of database machines which execute relational algebra queries. We analyze the performance of multiprocessor nested-loops and sort-merge join algorithms and show that the nested-loops algorithm is generally superior. Three levels of operand granularity for data-flow database machines are introduced and compared using the nested-loops join algorithm. We demonstrate, that relation-level granularity is too coarse and that tuple-level granularity is too fine. The third level of granularity, a page of a relation, is shown to be the best choice from both hardware and software viewpoints. Finally, a preliminary design for a data-flow database machine which utilizes page-level granularity and supports distributed control of instruction execution is presented.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {94–104},
numpages = {11},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582267,
author = {Kung, H. T. and Lehman, Philip L.},
title = {Systolic (VLSI) Arrays for Relational Database Operations},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582267},
doi = {10.1145/582250.582267},
abstract = {This paper proposes the use of VLSI technology to perform relational database operations directly in hardware. It is shown that relational compulations, such as intersection, remove-duplicates, union, join, and division, can all be pipelined elegantly and efficiently on networks of processors having an array structure. These (systolic) processor arrays are readily and cost-effectively implementable with present technology, due to the extreme simplicity of their processors, and the high regularity of their interconnection structures.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {105–116},
numpages = {12},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/3253383,
author = {Carlson, William},
title = {Session Details: Distributed Databases},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253383},
doi = {10.1145/3253383},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582269,
author = {Matsushita, Yutaka and Yamazaki, Haruaki and Hikita, Sadayuki and Yoshida, Isamu},
title = {Cost Evaluation of Directory Management Schemes for Distributed Database Systems},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582269},
doi = {10.1145/582250.582269},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {117–124},
numpages = {8},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582270,
author = {Lam, K. and Yu, C. T.},
title = {An Approximation Algorithm for a File-Allocation Problem in a Hierarchical Distributed System},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582270},
doi = {10.1145/582250.582270},
abstract = {A file allocation problem in a hierarchical distributed computer network is examined. It is shown that the problem is NP-hard. An approximation algorithm is suggested. It is estimated that the approximation algorithm has a high chance of obtaining the optimal solution. Experimental results show that the difference between the optimal solution and the solution generated by the approximation algorithm is no more than 4% away from the optimal solution.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {125–132},
numpages = {8},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/3253384,
author = {Madnick, Stuart},
title = {Session Details: DBMS Implementation Experience},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253384},
doi = {10.1145/3253384},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582272,
author = {Dogac, Asuman and Ozkarahan, Esen A.},
title = {A Generalized DBMS Implementation on a Database Machine},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582272},
doi = {10.1145/582250.582272},
abstract = {The design and implementation of a generalized database management system based on the RAP database machine is described. The GDBMS architecture, while is similar to the ANSI/SPARC view, has differences in the interpretation of its physical levels. The E/R model is chosen as the Meta Data Model (Conceptual Schema) which generates external model interfaces consisting of the relational, network, and hierarchical models. The SEQUEL, LSL, MRI --- like languages are supported at these interfaces. Structural and operational transformations from the external interfaces into the corresponding constructs of the RAP database machine have been implemented. The RAP DBMS assembler is found to be an efficient facility for language translation and in realizing common operational transformations. It performs these transformations in a way that preserves database consistency.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {133–143},
numpages = {11},
keywords = {DDL, database machines, DML, schemas, structural transformations, operational transformations, E/R model query languages, GDBMS, RAP database machine, data models, associative processors},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582273,
author = {Cattell, R. G. G.},
title = {An Entity-Based Database User Interface},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582273},
doi = {10.1145/582250.582273},
abstract = {A user interface to a database designed for casual, interactive use is presented. The interface is entity-based: the data display to the user is based upon entities (e.g., persons, documents, organizations) that participate in relationships, rather than upon relations alone as in the relational data model. Examples from an implementation of the system are shown, for a prototype personal database (PDB), developed in connection with the ZOG system at Carnegie-Mellon University (Robertson et al[1977]). Some details of the interface and associated issues concerning data display, data models, views, and knowledge-based assistance are presented. Experience with the prototype system suggests that the entity-based presentation is appropriate for types of casual interactive use that existing database interfaces do not address, such as browsing. It is proposed that such an interface could be used to supplement a query language or other interface to allow users both kinds of views of the data.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {144–150},
numpages = {7},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582274,
author = {Allchin, James E. and Keller, Arthur M. and Wiederhold, Gio},
title = {FLASH: A Language-Independent, Portable File Access System},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582274},
doi = {10.1145/582250.582274},
abstract = {A file access system, flash, for use in building database systems is described. It supports access from several languages, including pascal, fortran, and interlisp. Flash provides record level access to a file with multiple indexes using symbolic keys. It is portable and written in Pascal with support routines in dec System 20 macro. The file access system is designed to run on computers of various sizes and capabilities, including micros. Concurrent and simultaneous access by several users is supported given that the operating systems provides multiprogramming. Flash is designed to be highly reliable. It assumes the existence of underlying operating system file services that read or write named files directly. Transfer to files occurs in units which are efficient, typically a block.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {151–156},
numpages = {6},
keywords = {Indexed sequential, ISAM, files, microprocessors, databases, portable, concurrent update, VSAM, multiple language, multiple indexes},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/3253385,
author = {Dayal, U.},
title = {Session Details: Query Processing},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253385},
doi = {10.1145/3253385},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582276,
author = {Chang, C. C. and Lee, R. C. T. and Du, H. C.},
title = {Some Properties of Cartesian Product Files},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582276},
doi = {10.1145/582250.582276},
abstract = {In this paper, we first introduced the concept of Cartesian product files. We then derived a formula for random files. A computer simulation experiment was performed to compare these two files. So far as shown by the experimental results, the Cartesian product file concept was indeed a good one. We also showed that the problem of designing an optimal Cartesian product file was partially related to the problem of finding a minimal N-tuple. A method to find minimal N-tuples was presented and its properties were discussed.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {157–168},
numpages = {12},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582277,
author = {Chiu, D. M. and Ho, Y. C.},
title = {A Methodology for Interpreting Tree Queries into Optimal Semi-Join Expressions},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582277},
doi = {10.1145/582250.582277},
abstract = {In this paper we outline a general methodology illustrated by specific examples for the optimal interpretation of a class of semi-join queries in distributed database systems.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {169–178},
numpages = {10},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582278,
author = {Kim, Won},
title = {A New Way to Compute the Product and Join of Relations},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582278},
doi = {10.1145/582250.582278},
abstract = {This paper presents a new method of computing the product or join of n relations in a paged-memory environment. The method, termed the nested-block method, is an attempt to take maximum advantage of available main-memory buffer space. The problem of finding an optimal allocation of main-memory buffer space for the nested-block method of scanning n relations poses a nonlinear integer-programming problem. This paper first describes the operation of the nested-block method, and derives corresponding cost formula. It then presents an efficient heuristic algorithm for determining a near-optimal allocation of main-memory buffer space. The need to compute the product of relations arises naturally in processing n-relation queries. Conventional techniques for computing the join of relations can be complemented by the nested-block method. This paper examines these two important applications of the nested-block method.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {179–187},
numpages = {9},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/3253386,
author = {Lohman, Guy},
title = {Session Details: Physical Storage Structures},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253386},
doi = {10.1145/3253386},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582280,
author = {Chang, J. M. and Fu, K. S.},
title = {A Dynamic Clustering Technique for Physical Database Design},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582280},
doi = {10.1145/582250.582280},
abstract = {In this study, a technique of performing multiple attribute clustering in dynamic databases has been investigated. We have transformed the problem of performing multiple attribute clustering into a problem of dynamically partitioning the attribute space. The optimal number of partitioning of the attribute space in a dynamic database environment has been analyzed, the partitioning direction is controlled by a discriminator sequence. The design of the discriminator sequence to obtain the optimal partitioning is presented. The selection of the directory attributes has also been discussed. Using the extended K-d tree to direct the partitioning, we have presented the extended K-d tree method. Empirical results have justified the improvement of the performance using the extended K-d tree method, when compared with that using the single attribute clustering or using inverted file method without any clustering index.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {188–199},
numpages = {12},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582281,
author = {Gudes, Ehud and Tsur, Shalom},
title = {Experiments with B-Tree Reorganization},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582281},
doi = {10.1145/582250.582281},
abstract = {B-trees are a commonly used data structure for indexed access to files and databases. Among the desirable properties of B-trees is the fact that they are dynamically rebalanced after each insertion and deletion operation and therefore need not be reorganized as other static access structures e.g., ISAM. Despite the fact that B-trees are dynamically balanced we demonstrate that operational conditions exist under which it pays off to explicitly reorganize B-trees. The rationale being that by explicit reorganization we defer the event of root splitting and hence reduce the cost of subsequent retrieval requests which are the dominant operations. We present a reorganization algorithm that allows control over storage utilization and discuss the circumstances under which it should be applied. We present simulation results that support our contention that reorganization is indeed economically feasible and we conclude with some suggestions for further work in this area.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {200–206},
numpages = {7},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

@inproceedings{10.1145/582250.582282,
author = {Kwong, Y. S. and Wood, D.},
title = {On B-Trees: Routing Schemes and Concurrency},
year = {1980},
isbn = {0897910184},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582250.582282},
doi = {10.1145/582250.582282},
abstract = {In recent years B-trees have become a common data structure for representing large data dictionaries. In this paper we investigate the often ignored relationship between routing schemes and the permissible operations in leaf-search B-trees. We show that among the many commonly used routing schemes in the literature, some are cleaner than others, making them more attractive for leaf-search B-trees supporting concurrency.},
booktitle = {Proceedings of the 1980 ACM SIGMOD International Conference on Management of Data},
pages = {207–211},
numpages = {5},
location = {Santa Monica, California},
series = {SIGMOD '80}
}

