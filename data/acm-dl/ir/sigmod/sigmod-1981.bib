@inproceedings{10.1145/3245982,
author = {Schkolnick, Mario},
title = {Session Details: Physical Storage Structures},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245982},
doi = {10.1145/3245982},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582320,
author = {Swartwout, Don and Lagarias, J. C.},
title = {On the Space Requirements of Navigational Relationship Representations},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582320},
doi = {10.1145/582318.582320},
abstract = {One of the problems which confront designers, implementers, and users of database management systems is the very large amounts of space often required to store a database in a computer system. In general, that space is used for two purposes: to represent certain atomio units of data and to represent certain relationships among those atomic units. This paper investigates the second aspect of the problem, the storage requirements of relationship representations. The class of navigational representations is defined, and several relationship representation techniques commonly used in database management systems are shown to be navigational. Two additional techniques for constructing relationship representations are presented. The first produces more compact representations than the standard techniques by taking advantage of a property of relationships called companionship. The second technique, called the powerset representation, always achieves a worst-case lower bound on the size of navigational relationship representations.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {1–9},
numpages = {9},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582321,
author = {Robinson, John T.},
title = {The K-D-B-Tree: A Search Structure for Large Multidimensional Dynamic Indexes},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582321},
doi = {10.1145/582318.582321},
abstract = {The problem of retrieving multikey records via range queries from a large, dynamic index is considered. By large it is meant that most of the index must be stored on secondary memory. By dynamic it is meant that insertions and deletions are intermixed with queries, so that the index cannot be built beforehand. A new data structure, the K-D-B-tree, is presented as a solution to this problem. K-D-B-trees combine properties of K-D-trees and B-trees. It is expected that the multidimensional search effieciency of balanced K-D-trees and the I/O efficiency of B-trees should both be approximated in the K-D-B-tree. Preliminary experimental results that tend to support this are reported.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {10–18},
numpages = {9},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582322,
author = {Litwin, Witold},
title = {Trie Hashing},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582322},
doi = {10.1145/582318.582322},
abstract = {We propose a new algorithm for hashing. Contrary to the usual hashing, ours stores the records in order. Furthermore, the file may be highly dynamic, even may be constituted entirely with insertions. The load factor is typically about 70 %. The search for a record is performed in only one disk access, for files attaining millions of records. No other algorithms providing such a fast search in an ordered file are known.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {19–29},
numpages = {11},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582323,
author = {Batory, D. S.},
title = {B+ Trees and Indexed Sequential Files: A Performance Comparison},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582323},
doi = {10.1145/582318.582323},
abstract = {An analytic method for comparing the performance of B+ trees and indexed sequential files is proposed. Preliminary results indicate that indexed sequential files may be more efficient than B+ trees in certain applications.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {30–39},
numpages = {10},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/3245983,
author = {Dayal, Umeshwar},
title = {Session Details: Data Modeling},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245983},
doi = {10.1145/3245983},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582325,
author = {Levin, Michael},
title = {Introduction to the DIAM Theory of Algebraic Access Graphs},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582325},
doi = {10.1145/582318.582325},
abstract = {Algebraic access graphs model the logical connectivity of database implementations. They supercede the string model of DIAM, eliminating the typed string concept and replacing it with digraphs disciplined by relational algebra. Navigations over algebraic access graphs are well defined, and it is possible to compute the information resolved by a navigation in the form of a relational algebraic expression.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {40–48},
numpages = {9},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582326,
author = {Curtice, Robert M. and Jones, Paul E.},
title = {Fundamentals of Data Element Definition},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582326},
doi = {10.1145/582318.582326},
abstract = {The expanding use of data management techniques and, especially, an increase in data dictionary usage reflects the growing importance placed on data as a resource. While most organizations now recognize the need to provide good definitions for their data, few achieve a high quality data definition program. One of the possible reasons is that guidelines for data element definition are scarce. This paper explores the nature of data elements and provides guidelines for their definition.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {49–55},
numpages = {7},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582327,
author = {Motro, Amihai and Buneman, Peter},
title = {Constructing Superviews},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582327},
doi = {10.1145/582318.582327},
abstract = {A method is described for integrating two or more databases into a conceptual "superview", through a set of schema transformations. Such integration may be useful when it is required to produce a unified view of two databases while preserving their physical independence. Each transformation defines a mapping of queries against the superview into the appropriate set of queries against the underlying databases and imposes a constraint that is checked when the query is evaluated. A program that interactively aids the user in constructing the superview and that performs this query transformation is being developed.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {56–64},
numpages = {9},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/3245984,
author = {Shopiro, Jonathan E.},
title = {Session Details: Transaction Management I},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245984},
doi = {10.1145/3245984},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582329,
author = {Fussell, Donald and Kedem, Zvi M. and Silberschatz, Abraham},
title = {Deadlock Removal Using Partial Rollback in Database Systems},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582329},
doi = {10.1145/582318.582329},
abstract = {The problem of removing deadlocks from concurrent database systems using the two-phase locking protocol is considered. In particular, for systems which use no a priori information about transaction behavior in order to avoid deadlocks, it has generally been assumed necessary to totally remove and restart some transaction involved in a deadlock in order to relieve the situation. In this paper, a new approach to deadlock removal in such systems based on partial rollbacks is introduced. This approach does not in general require the total removal of a transaction to eliminate a deadlock. The task of optimizing deadlock removal using this method is discussed for systems allowing both exclusive and shared locking. A method is given for implementing this approach with no more storage overhead than that required for total removal and restart.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {65–73},
numpages = {9},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582330,
author = {Stearns, Richard E. and Rosenkrantz, Daniel J.},
title = {Distributed Database Concurrency Controls Using Before-Values},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582330},
doi = {10.1145/582318.582330},
abstract = {Associated with the write of a database entity is both the "before" or old value, and the "after" or new value. Concurrency can be increased by allowing other transactions to read the before values of a given transaction. The ramifications of allowing this, particularly on a distributed system in which limited communications is desirable, are investigated. A careful distinction is made between design decisions concerning communications and design decisions concerning the responses to read/write requests. Two schemes for producing such controls are given, one scheme for systems where processes are committed on termination, and the other for systems where committment is made later.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {74–83},
numpages = {10},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582331,
author = {Lin, Wen-Te K.},
title = {Performance Evaluation of Two Concurrency Control Mechanisms in a Distributed Database System},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582331},
doi = {10.1145/582318.582331},
abstract = {Two concurrency control mechanisms, the SDD-1 system and Dynamic Timestamping Method, are evaluated in terms of protocol synchronization delays and average transaction response time by using simulation. Relationship among average protocol synchronization delay, average transaction response time, average 10 service delay, communication delay, and other system parameters is analyzed by using regression analysis. The statistical distribution functions of transaction response times and synchronization delays are then examined to see if they fit exponential, erlangian, or some other distribution functions.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {84–92},
numpages = {9},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/3245985,
author = {Smith, John M.},
title = {Session Details: Summary Data},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245985},
doi = {10.1145/3245985},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582333,
author = {Johnson, Rowland R.},
title = {Modelling Summary Data},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582333},
doi = {10.1145/582318.582333},
abstract = {Several problems in specifying aggregate functions in relational systems are investigated. We propose a solution to these problems in the form of an extension of the relational data model. In particular we introduce the concept of summary data. The query language STRAND is presented in order to describe retrieval operations on the extended model. STRAND allows a user to formulate queries involving aggregate functions without conceptualizing the query in terms of aggregation. Two example applications, proposal tracking and socio-demographic data bases, are used to illustrate the concepts of the extended model.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {93–97},
numpages = {5},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582334,
author = {Sato, Hideto},
title = {Handling Summary Information in a Database: Derivability},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582334},
doi = {10.1145/582318.582334},
abstract = {"Summary data" is a representation of "groups of facts." Statistics are a typical example of summary data, which is often a major component of databases that deal with huge domains, such as objects in a whole country or events that occurred over a long time range. Although any summary can be reproduced from the corresponding originals, these are often unavailable and the required data may or may not be derivable from the given summary data. A schema of summary data is defined as a relationship between classifications of object types and domains for attributes. Reclassification rules are introduced as semantic relations among classifications. Set theoretical lemmata provide an inference mechanism that judges derivability of required summary data from collected summary data, and derives the former, if it is derivable, from the latter. It is also shown how this inference mechanism improves a summary database in usability and logical data independence. Discussions are made with examples in the statistical field.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {98–107},
numpages = {10},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/3245986,
author = {Vassiliou, Y.},
title = {Session Details: Data Dependency Theory},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245986},
doi = {10.1145/3245986},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582336,
author = {Sagiv, Yehoshua},
title = {Can We Use the Universal Instance Assumption without Using Nulls?},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582336},
doi = {10.1145/582318.582336},
abstract = {We claim that the representative instance of [Ho1, Va3] is a correct representation of the data stored in a database even when the relations of the database are not the projections of a single universal instance. If no constraint (other than functional and join dependencies) is imposed on the data, then projections of the representative instance cannot always be computed by lossless joins. We show that if the database satisfies a modified foreign-key constraint, then projections of the representative instance can be computed by performing the union of several lossless joins. A class of relation schemes for which no constraint is necessary is characterized, and we show how to compute projections of the representative instance for databases that belong to this class.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {108–120},
numpages = {13},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582337,
author = {Sciore, Edward},
title = {Real-World MVD's},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582337},
doi = {10.1145/582318.582337},
abstract = {According to database theory, a database designer can specify any set of data dependencies, no matter how complex, to constrain a database scheme. This paper investigates how much complexity is actually needed in real-world situations. It is shown that every "natural" set of mvd's must belong to a class of mvd's called conflict-free. Conflict-free sets of mvd's have the desirable property that they allow a unique 4NF dependency preserving database scheme; moreover, non conflict-free sets have no such normalization. If a set of mvd's is not conflict-free, then the dependencies are inadequately specified; there are semantic concepts that are unrepresented in the scheme. These concepts are isolated, and it is shown that adding these concepts amounts to making the set of mvd's conflict-free.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {121–132},
numpages = {12},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/3245987,
author = {Yannakakis, Mihalis},
title = {Session Details: Transaction Management II},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245987},
doi = {10.1145/3245987},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582339,
author = {Skeen, Dale},
title = {Nonblocking Commit Protocols},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582339},
doi = {10.1145/582318.582339},
abstract = {Protocols that allow operational sites to continue transaction processing even though site failures have occurred are called nonblocking. Many applications require nonblocking protocols. This paper investigates the properties of nonblocking protocols. Necessary and sufficient conditions for a protocol to be nonblocking are presented and from these conditions a method for designing them is derived. Both a central site nonblocking protocol and a decentralized nonblocking protocol are presented.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {133–142},
numpages = {10},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582340,
author = {Jordan, J. R. and Banerjee, J. and Batman, R. B.},
title = {Precision Locks},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582340},
doi = {10.1145/582318.582340},
abstract = {This paper describes a new method for controlling data base concurrency, called precision locks (PL). The name is derived from the fact that they lock precisely the set of tuples required to guarantee data base consistency, phantoms included. This results in maximum concurrency among all tuple-level locking methods, including predicate locks. A framework for comparing locking systems which indicates the errors committed by them is introduced. It is shown that existing systems commit these errors while PL does not. While other logical locking systems are limited in the complexity of permissible predicates, PL allows them to be arbitrary. It is shown that transactions under PL are well formed and two phased which is sufficient to maintain consistency. The execution cost of PL is compared to a conventional tuple-level locking method. It is found that PL usually is cheaper to execute.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {143–147},
numpages = {5},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582341,
author = {Papadimitriou, Christos H.},
title = {On the Power of Locking},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582341},
doi = {10.1145/582318.582341},
abstract = {We study the expressive power of locking primitives, as measured by ther ability to implement different concurrency control principles. We give a necessary and sufficient condition for a concurrency control principle (abstractly, a set of histories) to be implementable by binary semaphores. Also, we characterize exactly those sets of locking primitives that are no more powerful than binary semaphores.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {148–154},
numpages = {7},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/3245988,
author = {Yao, S. Bing},
title = {Session Details: Query Processing},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245988},
doi = {10.1145/3245988},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582343,
author = {Richard, Philippe},
title = {Evaluation of the Size of a Query Expressed in Relational Algebra},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582343},
doi = {10.1145/582318.582343},
abstract = {We present a probabilistic model for evaluating the size of relations derived from given relations through relational algebra operators. We define tools to estimate the derived relations size and we state the assumptions underwhich we perform such an evaluation.The particular class of data base schemata in which we evaluate the derived relation size is characterized by properties such as independence between two relations having union-compatible domains or independence between distinct tuples in a relation. We show that, knowing the expected size of all projections of each relation in the database, we can compute the size of each query expressed in relational algebra and we give the results for each operator of this language (selection, projection, union, intersection, e-join).},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {155–163},
numpages = {9},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582344,
author = {Gouda, Mohamed G. and Dayal, Umeshwar},
title = {Optimal Semijoin Schedules for Query Processing in Local Distributed Database Systems},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582344},
doi = {10.1145/582318.582344},
abstract = {Semijoin strategies are a technique for query processing in distributed database systems. In the past, methodologies for constructing minimum communication-cost strategies for solving tree queries have been developed. These assume point-to-point communication and ignore local processing costs and the limited communication capacity of the system. In this paper, query processing in bus or loop systems is considered. The definition of strategy is extended to allow for broadcast mode of communication. We then address the problem of finding the minimum response-time schedule for executing a given strategy in an m-bus system taking into account local processing and system capacity. It is shown that the problem is computationally intractable for general tree queries, even in a 1-bus system, and for special classes of tree queries in an m-bus system. However, there is a polynomial-time algorithm for simple queries in a 1-bus system.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {164–175},
numpages = {12},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582345,
author = {Maier, David and Warren, David S.},
title = {Incorporating Computed Relations in Relational Databases},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582345},
doi = {10.1145/582318.582345},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {176–187},
numpages = {12},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/3245989,
author = {DeWitt, David J.},
title = {Session Details: Database Machines},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245989},
doi = {10.1145/3245989},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582347,
author = {Hawthorn, Paula},
title = {The Effect of Target Applications on the Design of Database Machines},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582347},
doi = {10.1145/582318.582347},
abstract = {Specialized, single function processors can be built to be faster and cheaper than general purpose processors. Most database machines use such special purpose processors to manipulate data, with a general purpose managing processor to control the special purpose processors and perform utility functions. In this paper, the organization and use of these data manipulation processors is explored. Database machines are classified into single data manipulation processor systems, multiple disk-associated data manipulation processor systems, and multiple cache-associated processor systems. Examples of actual database machines are given for each category.Application types are classified into business, bibliographic search, and statistical analysis systems. A metric is developed to compare the performance of the categories of database machines with respect to the application types. The metric is the effective instruction rate, which is comparable to the instruction rate (millions of instructions per second) for conventional computers. It is shown that the effective instruction rate is highly sensitive to the proportion of work performed in the database machine's data manipulation processors. Therefore, determining the work that must be performed in the machine's managing processor is found to be important to determining the performance of the machine.Database machine performance for each category of database machines is compared for each type of application. It is shown that single processor systems are best for business applications; that disk-based multiple processor systems are best for bibliographic search applications; and that hybrid systems are best for statistical analysis applications. Therefore, the design of the organization of data manipulation processors is shown to be application-dependent.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {188–197},
numpages = {10},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582348,
author = {McCord, Rob},
title = {Sizing and Data Distribution for a Distributed Database Machine},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582348},
doi = {10.1145/582318.582348},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {198–204},
numpages = {7},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/3245990,
author = {Brown, Allen},
title = {Session Details: Database Systems and User Interfaces},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3245990},
doi = {10.1145/3245990},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582350,
author = {Brown, Mark R. and Cattell, Roderic G. G. and Suzuki, Norihisa},
title = {The Cedar DBMS: A Preliminary Report},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582350},
doi = {10.1145/582318.582350},
abstract = {The Cedar DBMS is a database management system developed as part of the Cedar programming environment. The system has several unusual aspects, including its interface for applications programming in a strongly-typed procedural language and its distribution of computation and data over a network. This paper describes the design goals, architecture, and implementation of the Cedar DBMS.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {205–211},
numpages = {7},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582351,
author = {Luo, Dawei and Yao, S. Bing},
title = {Form Operation by Example: A Language for Office Information Processing},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582351},
doi = {10.1145/582318.582351},
abstract = {In this paper we introduce a high level nonprocedural language Form Operation by Example (FOBE) to manipulate forms in office systems. The form data model is selected as the basis for the user interface. The idea of query-by-example is applied to forms. A precise semantics definition of the language is given. FOBE has a predetermined structure. It combines the advantages of procedural and nonprocedural languages. We believe that it is user-friendly and sufficiently powerful for office environments.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {212–223},
numpages = {12},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

@inproceedings{10.1145/582318.582352,
author = {Stonebraker, Michael},
title = {Hypothetical Data Bases as Views},
year = {1981},
isbn = {0897910400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582318.582352},
doi = {10.1145/582318.582352},
abstract = {In this paper we show that hypothetical data bases can be effectively supported by slight extensions to conventional view support mechanisms. Moreover, we argue that the resulting structure may well be quite efficient and that there are advantages to making hypothetical data bases central to the operation of a DBMS.},
booktitle = {Proceedings of the 1981 ACM SIGMOD International Conference on Management of Data},
pages = {224–229},
numpages = {6},
location = {Ann Arbor, Michigan},
series = {SIGMOD '81}
}

