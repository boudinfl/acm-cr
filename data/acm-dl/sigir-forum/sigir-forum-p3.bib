@article{10.1145/54347.54349,
author = {Wood, M. and Sommerville, I.},
title = {An Information Retrieval System for Software Components},
year = {1988},
issue_date = {Spring/Summer 1988},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {22},
number = {3–4},
issn = {0163-5840},
url = {https://doi.org/10.1145/54347.54349},
doi = {10.1145/54347.54349},
abstract = {This paper describes an information retrieval system which is specifically designed to be used for storing and retrieving information about software components. Rather than use a retrieval mechanism which is simply based on keyword descriptions, we have made use of developments in natural language research to represent component information in a form which encodes semantics as well as syntax. We call this the component descriptor frame. The paper describes the basic ideas which underlie our system and describes how it can be used for component information retrieval. An example of the system in use is presented. The version of the system described here has been fully implemented and is now being developed as part of a more general reuse support system.},
journal = {SIGIR Forum},
month = may,
pages = {11–28},
numpages = {18}
}

@article{10.1145/24634.24637,
author = {Marcus, R},
title = {Some Observations on Retrieval from a Large Technical Document Database},
year = {1986},
issue_date = {Sept.-March 1986-1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {1–2},
issn = {0163-5840},
url = {https://doi.org/10.1145/24634.24637},
doi = {10.1145/24634.24637},
abstract = {The problem of retrieving documents from a large document database is an important problem that has been the subject of some controversy in the recent literature. See [1] and [2]. The basic question has been whether manual indexing is necessary to overcome the weaknesses of full-text retrieval. The problem with full-text retrieval is that in order to narrow down the number of documents selected to a reasonable size, it is necessary to choose a specialized set of keywords. This restrictive search means that relevant documents will often be missed due to misspellings, alternate terms, typing errors, etc.Manual indexing would seem to provide a solution to this problem by allowing a document to be retrieved using a human assigned index term or terms describing its content. Unfortunately, experiments have shown that manual indexing is often subject to the same problems as full-text retrieval due to the variation in index terms chosen by different people for the same document. An even more serious problem for a very large technical domain with many documents is the difficulty in creating and maintaining coherent indexes that can describe the whole domain.This paper will summarize the experience that has been gained from studying document retrieval in the domain of computer software support. The database is accessed by engineers searching to see if a current problem has occurred and been solved in the past. An extensive study of how documents are submitted and retrieved has brought to light some general principles that can improve the performance of the system. These principles which combine manual indexing and full-text retrieval will be discussed in the remainder of this paper.},
journal = {SIGIR Forum},
month = sep,
pages = {37–38},
numpages = {2}
}

@article{10.1145/16287.16290,
author = {Rada, Roy},
title = {Which Way for a Classification Scheme for Computers and Medicine},
year = {1986},
issue_date = {Winter 1986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {19},
number = {1–4},
issn = {0163-5840},
url = {https://doi.org/10.1145/16287.16290},
doi = {10.1145/16287.16290},
journal = {SIGIR Forum},
month = jan,
pages = {21–22},
numpages = {2}
}

@article{10.1145/16287.1096837,
author = {Salton, Gerard},
title = {Selected Abstracts from the Proceedings of the Third Joint BCS and ACM Symposium, Kings' College, Cambridge~ 2-6 July 84 by G. Salton},
year = {1986},
issue_date = {Winter 1986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {19},
number = {1–4},
issn = {0163-5840},
url = {https://doi.org/10.1145/16287.1096837},
doi = {10.1145/16287.1096837},
abstract = {This paper compares two different approaches for indexing archived text documents. The first approach is based on inversion of words in the text, the second on the content. A system reflecting the word inversion approach is compared against two systems reflecting the signature scanning approach and using, alternatively, superimposed coding and the concatenation of word signatures. Performances are estimated using analytical models of these systems. Characteristics are evaluated in function of office environment requirements. The evaluations derive from a model for estimating the statistical parameters of text archives.},
journal = {SIGIR Forum},
month = jan,
pages = {32–35},
numpages = {4}
}

@article{10.1145/3263605,
author = {Williamson, Robert},
title = {Session Details: Session 7: User Interface 2},
year = {1983},
issue_date = {Summer 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {4},
issn = {0163-5840},
url = {https://doi.org/10.1145/3263605},
doi = {10.1145/3263605},
journal = {SIGIR Forum},
month = jun,
numpages = {1}
}

@article{10.1145/1095403.1095404,
author = {Fox, Edward A.},
title = {Lexical Relations: Enhancing Effectiveness of Information Retrieval Systems},
year = {1980},
issue_date = {Winter 1980},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {3},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095403.1095404},
doi = {10.1145/1095403.1095404},
abstract = {One of the essential features of the "Meaning &lt;=&gt; Text" model (MTM) developed by I. A. Mel'chuk et. al. is the special lexicon or ECD ('explanatory and combinatory' dictionary). This component can be thought of as a collection independent thesaurus, and can be applied to improve the effectiveness of an information retrieval system.After outlining the MTM and related work, this paper briefly describes the SMART type of information retrieval system. Applicability of the above-mentioned lexicon to such a system is discussed. In particular, the list of lexical relations included in the ECD is expanded and organized to be more effective for retrieval, partially along the lines suggested by Evens and Smith.Finally, an experimental analysis of the utility of lexical relations in an information retrieval system is discussed. It is shown that lexical relations generally enhance system performance. When all lexical relations are considered in the comparison, the resulting performance is shown, by statistical methods, to make a significant improvement (up to 16.5% at a single recall level); when all lexical relations except for antonyms are considered, the improvement is even greater (up to 20.2% at a single recall level).},
journal = {SIGIR Forum},
month = dec,
pages = {5–36},
numpages = {32}
}

@article{10.1145/1095387.1095391,
author = {Groman, Robert C.},
title = {NTIS Newsletter: Reader Survey},
year = {1980},
issue_date = {Spring 1980},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {14},
number = {4},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095387.1095391},
doi = {10.1145/1095387.1095391},
abstract = {The Winter 1980 issue of the FORUM (Volume XIV, No. 3) requested that readers let me know of their experiences with the National Technical Information Service (NTIS) newsletter service. If you subscribe to any one or more of their 26 subject area newsletters please let me know1. The newsletter name2. The length of time received (months)3. Whether you have found it useful (on a scale from 1 - very useful to 4 - not useful)4. Any other commentsThese responses will be summarized and reported in this column.},
journal = {SIGIR Forum},
month = apr,
pages = {10},
numpages = {1}
}

@article{10.1145/1095377.1095381,
author = {Croft, W. Bruce},
title = {Information Retrieval Specialist Group Research Colloquium},
year = {1979},
issue_date = {Summer 1979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {14},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095377.1095381},
doi = {10.1145/1095377.1095381},
abstract = {The second research colloquium organized for the informal presentation of research ideas in Information Retrieval was held at the University of Aston, Birmingham on 2-3 April 1979. Many of the talks were on aspects of bibliographic information retrieval systems but a large proportion were about data base management systems. Considering that the last colloquium contained virtually no mention of this topic, it was not surprising that this provoked quite a lively discussion about the relationship between the two types of systems. The main conclusions of this discussion were thata) A data base management system (DBMS) was a convenient tool with which a bibliographic information retrieval system could be implemented, butb) By considering the problems inherent with bibliographic data (large term vocabulary, non-exact matching), facilities may be provided on a DBMS to make this implementation more efficient.},
journal = {SIGIR Forum},
month = jul,
pages = {18–19},
numpages = {2}
}

@article{10.1145/3263595,
author = {Hollaar, Lee A.},
title = {Session Details: Session 4},
year = {1978},
issue_date = {August 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2},
issn = {0163-5840},
url = {https://doi.org/10.1145/3263595},
doi = {10.1145/3263595},
journal = {SIGIR Forum},
month = aug,
numpages = {1}
}

@article{10.1145/1095317.1095321,
author = {Ghosh, Sakto P.},
title = {Review of "Data Base Organization for Data Management by Sakto P. Ghosh", 1976, in Preparation.},
year = {1977},
issue_date = {Winter 1977},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {3},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095317.1095321},
doi = {10.1145/1095317.1095321},
journal = {SIGIR Forum},
month = dec,
pages = {2},
numpages = {1}
}

@article{10.1145/1095286.1095291,
author = {Hurley, B. J. and Lawrie, D. H.},
title = {A Study of Machine Architectures for Specialized Information Retrieval Computers},
year = {1976},
issue_date = {Spring 1976},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {10},
number = {4},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095286.1095291},
doi = {10.1145/1095286.1095291},
abstract = {This paper is the result of an effort to support and supplement the development of a specialized information retrieval computer, EUREKA, presently being built at the University of Illinois, Urbana. We begin by defining a basic machine architecture from which many text retrieval systems can be configured. This architecture includes two features that are designed to increase the efficiency and performance of these systems. First, a special processor is used to merge and coordinate postings lists obtained from an inverted file. Second, there are facilities for parallel data transfer which will allow the postings lists to be moved rapidly through the memory hierarchy. Our next step is to identify the design variables that exist within this basic architecture. These are the parameters that can be varied to configure specific retrieval machines. Finally, simulation results are, studied to evaluate the effect the design variables have on each other as well as on the architecture as a whole. From these results we will develop an understanding of how to construct a retrieval machine using information on the various speeds and capacities of its components.},
journal = {SIGIR Forum},
month = apr,
pages = {10–11},
numpages = {2}
}

@article{10.1145/1095286.1095289,
author = {Smith, David R.},
title = {Heirarchical Microprocessor Organization},
year = {1976},
issue_date = {Spring 1976},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {10},
number = {4},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095286.1095289},
doi = {10.1145/1095286.1095289},
abstract = {With the widespread application of microprocessors and the consequent decrease in prices with volume, the possibility has arisen that it may be cost effective to replace large computers with networks of microcomputers in many applications. That this is an obvious idea whose time has come may be adjudged from the quantity of scientific papers read on the subject during 1975. A small apology for adding to their number should be prefaced with the assurance that this is written after a reading of many of them and that it is at least not the same. So saying, we choose to start with a discussion of alternative multiprocessor organizations as they compare for the stated purpose, that is, a potentially large number of microprocessors co-coperating on a single high performance application.},
journal = {SIGIR Forum},
month = apr,
pages = {8},
numpages = {1}
}

@article{10.1145/1095286.1095288,
author = {Chu, Yaohan},
title = {Architecture of a Nonnumerical Accumulator},
year = {1976},
issue_date = {Spring 1976},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {10},
number = {4},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095286.1095288},
doi = {10.1145/1095286.1095288},
abstract = {This paper presents the architecture of a nonnumerical accumulator which makes use of a specially organized associative memory. In contrast to a numerical accumulator, this nonnumerical accumulator is capable of matching, moving, inserting, deleting, altering, counting, and marking bits, characters, words, and sentences stored in the nonnumerical accumulator. In this paper, the configuration and instructions of the nonnumerical accumulator together with programming techniques for some applications are presented.},
journal = {SIGIR Forum},
month = apr,
pages = {7},
numpages = {1}
}

@article{10.1145/1095277.1095281,
author = {Mahmoud, Samy and Riordon, J. S.},
title = {Optimal Allocation of Resources in Distributed Information Networks},
year = {1975},
issue_date = {Winter 1975},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {10},
number = {3},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095277.1095281},
doi = {10.1145/1095277.1095281},
abstract = {The problems of file allocation and capacity assignment in a fixed topology distributed computer network are examined. These two aspects of the design are tightly coupled through an average message delay constraint. The objective is to allocate copies of information files to network nodes and capacities to network links so that a minimum cost is achieved subject to network delay and file availability constraints. A model for solving the problem is formulated and the resulting optimization problem is shown to fall into a class of non-linear integer programming problems. Deterministic techniques for solving this class of problems are computationally cumbersome even for small sized problems. A new heuristic algorithm is developed, based on a decomposition technique which greatly reduces the computational complexity of the problem. Numerical results for a variety of network configurations indicate that the heuristic algorithm, while not theoretically convergent, yields practicable low cost solutions with substantial savings in computer processing time and storage requirements. Moreover, it is shown that this algorithm is capable of solving realistic network problems whose solution using deterministic techniques is computationally intractable.},
journal = {SIGIR Forum},
month = dec,
pages = {11},
numpages = {1}
}

@article{10.1145/1095505.1095508,
title = {A Method for the Construction of Isomorphisms of the First "n" Natural Numbers onto a Set of Non-Abelian Words},
year = {1973},
issue_date = {Spring 1973},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095505.1095508},
doi = {10.1145/1095505.1095508},
abstract = {In dealing with random-organized files, the solution of several problems is generally involved, and the efficiency of the use of the pattern depends on the qualification of the solution.},
journal = {SIGIR Forum},
month = apr,
pages = {20–25},
numpages = {6}
}

@article{10.1145/1095495.1095499,
title = {A Graph Theoretic Model of Data Structures},
year = {1972},
issue_date = {Winter 1972},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {4},
issn = {0163-5840},
url = {https://doi.org/10.1145/1095495.1095499},
doi = {10.1145/1095495.1095499},
abstract = {The widespread development of large shared data bases has proceeded mainly on empirical notions. Only in the past few years have there been attempts at formalizing the underlying concepts into a theory of data structures. The present models have been founded on the well-established mathematical theories of sets, relations and graphs, but few descriptions have been sufficiently developed to meet the needs of a complete theory of data structures. The set theoretic formalism offered by Childs(1) or Schwartz(2) or the relational model by Codd(3) are useful but fail to give a complete description of the complex structures found in modern data bases. The graph theoretic concepts found in papers by Harary and Hsiao(4) and Earley(5) are more appealing but need further elaboration. This paper is an attempt to develop a graph theoretic model into a useful formalism for describing and manipulating data structures.},
journal = {SIGIR Forum},
month = dec,
pages = {36–44},
numpages = {9}
}

@article{10.1145/75335.75358,
author = {Timpka, T. and Padgham, L. and Hedblom, P. and Wallin, S. and Tibblin, T.},
title = {A Hypertext Knowledge Based for Primary Care - LIMEDS in LINCKS},
year = {1989},
issue_date = {June 1989},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {23},
number = {SI},
issn = {0163-5840},
url = {https://doi.org/10.1145/75335.75358},
doi = {10.1145/75335.75358},
abstract = {In organized health care, primary care is the first level. It is characterized by the wide span of health problems managed as well as remote location from traditional medical information and knowledge sources. The LIMEDS project has formulated the special requirements for integrated knowledge and data base management in primary care. This paper presents G\"{o}sta's book, a hypertext knowledge base implemented in LINCKS, an object oriented, networked database system. Firstly, aspects which make integrated hypermedia systems particularly suitable for application in primary health care are explored. We then describe the hypertext knowledge base, consisting of 500 basic text objects and 3000 links, and current implementations using the NODE data model. NODE is implemented on a SUN III fileserver, and the user interface for the hypertext context on Apple Macintosh (TM). Combination of design methods towards a parallel means-ends strategy was found to be necessary to achieve G\"{o}sta's book. Design groups need to be composed of computer science, medical, psychological and organizational competences.},
journal = {SIGIR Forum},
month = may,
pages = {221–228},
numpages = {8}
}

@inproceedings{10.1145/75334.75358,
author = {Timpka, T. and Padgham, L. and Hedblom, P. and Wallin, S. and Tibblin, T.},
title = {A Hypertext Knowledge Based for Primary Care - LIMEDS in LINCKS},
year = {1989},
isbn = {0897913213},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/75334.75358},
doi = {10.1145/75334.75358},
abstract = {In organized health care, primary care is the first level. It is characterized by the wide span of health problems managed as well as remote location from traditional medical information and knowledge sources. The LIMEDS project has formulated the special requirements for integrated knowledge and data base management in primary care. This paper presents G\"{o}sta's book, a hypertext knowledge base implemented in LINCKS, an object oriented, networked database system. Firstly, aspects which make integrated hypermedia systems particularly suitable for application in primary health care are explored. We then describe the hypertext knowledge base, consisting of 500 basic text objects and 3000 links, and current implementations using the NODE data model. NODE is implemented on a SUN III fileserver, and the user interface for the hypertext context on Apple Macintosh (TM). Combination of design methods towards a parallel means-ends strategy was found to be necessary to achieve G\"{o}sta's book. Design groups need to be composed of computer science, medical, psychological and organizational competences.},
booktitle = {Proceedings of the 12th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval},
pages = {221–228},
numpages = {8},
location = {Cambridge, Massachusetts, USA},
series = {SIGIR '89}
}

@article{10.1145/75335.75352,
author = {Baeza-Yates, R. A. and Gonnet, G. H.},
title = {A New Approach to Text Searching},
year = {1989},
issue_date = {June 1989},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {23},
number = {SI},
issn = {0163-5840},
url = {https://doi.org/10.1145/75335.75352},
doi = {10.1145/75335.75352},
abstract = {We introduce a family of simple and fast algorithms for solving the classical string matching problem, string matching with don't care symbols and complement symbols, and multiple patterns. In addition we solve the same problems allowing up to k mismatches. Among the features of these algorithms are that they are real time algorithms, they don't need to buffer the input, and they are suitable to be implemented in hardware.},
journal = {SIGIR Forum},
month = may,
pages = {168–175},
numpages = {8}
}

@inproceedings{10.1145/75334.75352,
author = {Baeza-Yates, R. A. and Gonnet, G. H.},
title = {A New Approach to Text Searching},
year = {1989},
isbn = {0897913213},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/75334.75352},
doi = {10.1145/75334.75352},
abstract = {We introduce a family of simple and fast algorithms for solving the classical string matching problem, string matching with don't care symbols and complement symbols, and multiple patterns. In addition we solve the same problems allowing up to k mismatches. Among the features of these algorithms are that they are real time algorithms, they don't need to buffer the input, and they are suitable to be implemented in hardware.},
booktitle = {Proceedings of the 12th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval},
pages = {168–175},
numpages = {8},
location = {Cambridge, Massachusetts, USA},
series = {SIGIR '89}
}

@article{10.1145/75335.75338,
author = {Kwok, K. L.},
title = {A Neural Network for Probabilistic Information Retrieval},
year = {1989},
issue_date = {June 1989},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {23},
number = {SI},
issn = {0163-5840},
url = {https://doi.org/10.1145/75335.75338},
doi = {10.1145/75335.75338},
abstract = {This paper demonstrates how a neural network may be constructed, together with learning algorithms and modes of operation, that will provide retrieval effectiveness similar to that of the probabilistic indexing and retrieval model based on single terms as document components.},
journal = {SIGIR Forum},
month = may,
pages = {21–30},
numpages = {10}
}

@inproceedings{10.1145/75334.75338,
author = {Kwok, K. L.},
title = {A Neural Network for Probabilistic Information Retrieval},
year = {1989},
isbn = {0897913213},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/75334.75338},
doi = {10.1145/75334.75338},
abstract = {This paper demonstrates how a neural network may be constructed, together with learning algorithms and modes of operation, that will provide retrieval effectiveness similar to that of the probabilistic indexing and retrieval model based on single terms as document components.},
booktitle = {Proceedings of the 12th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval},
pages = {21–30},
numpages = {10},
location = {Cambridge, Massachusetts, USA},
series = {SIGIR '89}
}

@article{10.1145/1013230.511813,
author = {Geller, V. J. and Lesk, M. E.},
title = {User Interfaces to Information Systems: Choices vs. Commands},
year = {1983},
issue_date = {Summer 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {4},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013230.511813},
doi = {10.1145/1013230.511813},
abstract = {Do users prefer selection from a menu or specification of keywords to retrieve documents? We tried two experiments, one using an on-line library catalog and the other an on-line news wire. In the first, library users could either issue keyword commands to see book catalog entries, or choose categories from a menu following the Dewey Decimal classification of the books. In the second, news wire users could read Associated Press news stories either by posting a keyword profile against which all stories were matched, or by selecting them from a menu of current news items. For the library users, keyword searches were clearly preferred, by votes of 3 and 4 to 1; for the news stories, retrieval by keyword search is 50% less common than menu choice.We suggest that the difference is based on the degree of user foreknowledge of the data base and its organization. Menu-type interfaces tell the user what is available. If the user already knows, as in the library where a majority of the users have a particular book in mind, then the menu is merely time-consuming. But when the user does not know what is available (almost the definition of "news" is that it is new, and unpredictable), the menu is valuable because it displays the choice.},
journal = {SIGIR Forum},
month = jun,
pages = {130–135},
numpages = {6}
}

@inproceedings{10.1145/511793.511813,
author = {Geller, V. J. and Lesk, M. E.},
title = {User Interfaces to Information Systems: Choices vs. Commands},
year = {1983},
isbn = {0897911075},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/511793.511813},
doi = {10.1145/511793.511813},
abstract = {Do users prefer selection from a menu or specification of keywords to retrieve documents? We tried two experiments, one using an on-line library catalog and the other an on-line news wire. In the first, library users could either issue keyword commands to see book catalog entries, or choose categories from a menu following the Dewey Decimal classification of the books. In the second, news wire users could read Associated Press news stories either by posting a keyword profile against which all stories were matched, or by selecting them from a menu of current news items. For the library users, keyword searches were clearly preferred, by votes of 3 and 4 to 1; for the news stories, retrieval by keyword search is 50% less common than menu choice.We suggest that the difference is based on the degree of user foreknowledge of the data base and its organization. Menu-type interfaces tell the user what is available. If the user already knows, as in the library where a majority of the users have a particular book in mind, then the menu is merely time-consuming. But when the user does not know what is available (almost the definition of "news" is that it is new, and unpredictable), the menu is valuable because it displays the choice.},
booktitle = {Proceedings of the 6th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval},
pages = {130–135},
numpages = {6},
location = {Bethesda, Maryland},
series = {SIGIR '83}
}

@article{10.1145/1013230.511807,
author = {van Rijsbergen, C. J.},
title = {A Discrimination Gain Hypothesis},
year = {1983},
issue_date = {Summer 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {4},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013230.511807},
doi = {10.1145/1013230.511807},
abstract = {Underlying many of the probabilistic models for information retrieval are assumptions of stochastic dependence or independence of varying degrees of severity for the index terms describing the documents. These models generally specify a matching function, that is a function which compares a query with each document. The form of that function is to a large extent determined by the particular dependence/independence assumption. For example, if the index terms are assumed to be independently distributed over both the set of relevant and non-relevant documents then the matching function will in general be linear, whereas an assumption of dependence will lead to a non-linear function.Irrespective of the form that the matching function may take it is always assumed that the search terms in the query are known. In this paper I wish to address the problem of the choice of search terms and how this choice may be affected by an independence assumption.},
journal = {SIGIR Forum},
month = jun,
pages = {101–104},
numpages = {4}
}

@inproceedings{10.1145/511793.511807,
author = {van Rijsbergen, C. J.},
title = {A Discrimination Gain Hypothesis},
year = {1983},
isbn = {0897911075},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/511793.511807},
doi = {10.1145/511793.511807},
abstract = {Underlying many of the probabilistic models for information retrieval are assumptions of stochastic dependence or independence of varying degrees of severity for the index terms describing the documents. These models generally specify a matching function, that is a function which compares a query with each document. The form of that function is to a large extent determined by the particular dependence/independence assumption. For example, if the index terms are assumed to be independently distributed over both the set of relevant and non-relevant documents then the matching function will in general be linear, whereas an assumption of dependence will lead to a non-linear function.Irrespective of the form that the matching function may take it is always assumed that the search terms in the query are known. In this paper I wish to address the problem of the choice of search terms and how this choice may be affected by an independence assumption.},
booktitle = {Proceedings of the 6th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval},
pages = {101–104},
numpages = {4},
location = {Bethesda, Maryland},
series = {SIGIR '83}
}

@article{10.1145/1013228.511768,
author = {Storer, W. F. and Eastman, C. M.},
title = {Experiments on the Application of Clustering Techniques to Data Validation (Abstract)},
year = {1981},
issue_date = {Summer 1981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {16},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013228.511768},
doi = {10.1145/1013228.511768},
journal = {SIGIR Forum},
month = may,
pages = {88–89},
numpages = {2}
}

@inproceedings{10.1145/511754.511768,
author = {Storer, W. F. and Eastman, C. M.},
title = {Experiments on the Application of Clustering Techniques to Data Validation (Abstract)},
year = {1981},
isbn = {0897910524},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/511754.511768},
doi = {10.1145/511754.511768},
booktitle = {Proceedings of the 4th Annual International ACM SIGIR Conference on Information Storage and Retrieval: Theoretical Issues in Information Retrieval},
pages = {88–89},
numpages = {2},
location = {Oakland, California},
series = {SIGIR '81}
}

@article{10.1145/1013228.511756,
author = {Bookstein, A.},
title = {The Generalized Retrieval Problem},
year = {1981},
issue_date = {Summer 1981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {16},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013228.511756},
doi = {10.1145/1013228.511756},
journal = {SIGIR Forum},
month = may,
pages = {4–14},
numpages = {11}
}

@inproceedings{10.1145/511754.511756,
author = {Bookstein, A.},
title = {The Generalized Retrieval Problem},
year = {1981},
isbn = {0897910524},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/511754.511756},
doi = {10.1145/511754.511756},
booktitle = {Proceedings of the 4th Annual International ACM SIGIR Conference on Information Storage and Retrieval: Theoretical Issues in Information Retrieval},
pages = {4–14},
numpages = {11},
location = {Oakland, California},
series = {SIGIR '81}
}

@article{10.1145/1013228.511755,
author = {Farradane, J.},
title = {The Basis for a Theory of Information Retrieval},
year = {1981},
issue_date = {Summer 1981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {16},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013228.511755},
doi = {10.1145/1013228.511755},
journal = {SIGIR Forum},
month = may,
pages = {1–3},
numpages = {3}
}

@inproceedings{10.1145/511754.511755,
author = {Farradane, J.},
title = {The Basis for a Theory of Information Retrieval},
year = {1981},
isbn = {0897910524},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/511754.511755},
doi = {10.1145/511754.511755},
booktitle = {Proceedings of the 4th Annual International ACM SIGIR Conference on Information Storage and Retrieval: Theoretical Issues in Information Retrieval},
pages = {1–3},
numpages = {3},
location = {Oakland, California},
series = {SIGIR '81}
}

@article{10.1145/1013881.802697,
author = {Bratbergsengen, Kjell and Larsen, Rune and Risnes, Oddvar and Aandalen, Terje},
title = {A Neighbor Connected Processor Network for Performing Relational Algebra Operations},
year = {1980},
issue_date = {March 1980},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {2},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013881.802697},
doi = {10.1145/1013881.802697},
abstract = {In a data base computer consisting of cells with processing capability, the desired goal is to achieve an execution time - for each data base operation - to be inversely proportional to the number of cells. Using rings as a basic building block, we have constructed different intercell communication networks. The capacity of the communication network have been analyzed under the workload of relational algebra operations. A k-dimensional network of intersecting rings, each of 2 or 3 cells have been found to give the highest processing capacity per cell in the network. Here k is log2C, where C is the total number of cells.A simple wiring scheme for k-dimensional network of 2 cells per ring has been presented. For this type of network, we have also described the routing logic, and given an estimate of the queueing delay.},
journal = {SIGIR Forum},
month = mar,
pages = {96–105},
numpages = {10}
}

@inproceedings{10.1145/800083.802697,
author = {Bratbergsengen, Kjell and Larsen, Rune and Risnes, Oddvar and Aandalen, Terje},
title = {A Neighbor Connected Processor Network for Performing Relational Algebra Operations},
year = {1980},
isbn = {9781450373951},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800083.802697},
doi = {10.1145/800083.802697},
abstract = {In a data base computer consisting of cells with processing capability, the desired goal is to achieve an execution time - for each data base operation - to be inversely proportional to the number of cells. Using rings as a basic building block, we have constructed different intercell communication networks. The capacity of the communication network have been analyzed under the workload of relational algebra operations. A k-dimensional network of intersecting rings, each of 2 or 3 cells have been found to give the highest processing capacity per cell in the network. Here k is log2C, where C is the total number of cells.A simple wiring scheme for k-dimensional network of 2 cells per ring has been presented. For this type of network, we have also described the routing logic, and given an estimate of the queueing delay.},
booktitle = {Proceedings of the Fifth Workshop on Computer Architecture for Non-Numeric Processing},
pages = {96–105},
numpages = {10},
location = {Pacific Grove, California, USA},
series = {CAW '80}
}

@article{10.1145/1013881.802692,
author = {Mukhopadhyay, Amar},
title = {A Proposal for a Hardware Text Processor},
year = {1980},
issue_date = {March 1980},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {2},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013881.802692},
doi = {10.1145/1013881.802692},
abstract = {Because of the tremendous growth in the terminal-oriented users community, software text editor is increasingly becoming a significant overhead for the computing systems. The files being manipulated by text editors are usually small but undergo rapid growth and development in its short-lived life-cycle. A look into the basic command structure of these text editors reveal that the operations performed by them fundamentally consist of pattern matching, pattern transformation, pattern deletion and insertion, and management of a set of counters and pointers.It is proposed in this paper that a specialized front-end processor with built-in string processing hardware provide a natural solution to the problem. This paper presents a possible architecture and logical capabilities of such a machine as an embellishment of microprocessors to be used for intelligent terminals. In the process, the structure of a general purpose non-numeric processor is evolved.},
journal = {SIGIR Forum},
month = mar,
pages = {57–61},
numpages = {5}
}

@inproceedings{10.1145/800083.802692,
author = {Mukhopadhyay, Amar},
title = {A Proposal for a Hardware Text Processor},
year = {1980},
isbn = {9781450373951},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800083.802692},
doi = {10.1145/800083.802692},
abstract = {Because of the tremendous growth in the terminal-oriented users community, software text editor is increasingly becoming a significant overhead for the computing systems. The files being manipulated by text editors are usually small but undergo rapid growth and development in its short-lived life-cycle. A look into the basic command structure of these text editors reveal that the operations performed by them fundamentally consist of pattern matching, pattern transformation, pattern deletion and insertion, and management of a set of counters and pointers.It is proposed in this paper that a specialized front-end processor with built-in string processing hardware provide a natural solution to the problem. This paper presents a possible architecture and logical capabilities of such a machine as an embellishment of microprocessors to be used for intelligent terminals. In the process, the structure of a general purpose non-numeric processor is evolved.},
booktitle = {Proceedings of the Fifth Workshop on Computer Architecture for Non-Numeric Processing},
pages = {57–61},
numpages = {5},
location = {Pacific Grove, California, USA},
series = {CAW '80}
}

@article{10.1145/1013232.511720,
author = {Borgman, Christine L.},
title = {Information Implications into the Eighties: Panel Discussion},
year = {1979},
issue_date = {September 1979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {14},
number = {2},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013232.511720},
doi = {10.1145/1013232.511720},
journal = {SIGIR Forum},
month = sep,
pages = {87},
numpages = {1}
}

@inproceedings{10.1145/511706.511720,
author = {Borgman, Christine L.},
title = {Information Implications into the Eighties: Panel Discussion},
year = {1979},
isbn = {9781450373456},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/511706.511720},
doi = {10.1145/511706.511720},
booktitle = {Proceedings of the 2nd Annual International ACM SIGIR Conference on Information Storage and Retrieval: Information Implications into the Eighties},
pages = {87},
numpages = {1},
location = {Dallas, Texas},
series = {SIGIR '79}
}

@article{10.1145/1013234.803134,
author = {Slonim, Jacob and Maryanski, Fred J. and Fisher, Paul S.},
title = {Mediator: An Integrated Approach to Information Retrieval},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803134},
doi = {10.1145/1013234.803134},
abstract = { Mediator: An Integrated Approach to Information Retrieval The Mediator is a pseudo intelligent software controller which accomplishes two ends. First, it “mediates” between an Information Retrieval System and its end-user. On the assumption that the user of such a system will have at best a minimal knowledge of the operations of computers, it hides from him the internal complexities of the system, and presents to him a simplified “abstract” of the operations of the system. The Mediator allows the end-user to communicate with any application program in his own terms and to carry out operations of any degree of complexity which can be defined within those terms. Secondly, the controller enables a single system to extract unified information from data-banks of both data base management and textual environments. The Mediator is driven by a combination of hierarchically structured internal and external tables. The external tables contain a vocabulary selected by the user for his personal communication with the system; the internal tables contain directives which determine the appropriate path to be followed by the retrieval system in accomplishing the user's request.},
journal = {SIGIR Forum},
month = may,
pages = {14–36},
numpages = {23},
keywords = {Mediator, Controller query language, Data base management system textual information retrieval}
}

@inproceedings{10.1145/800096.803134,
author = {Slonim, Jacob and Maryanski, Fred J. and Fisher, Paul S.},
title = {Mediator: An Integrated Approach to Information Retrieval},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803134},
doi = {10.1145/800096.803134},
abstract = { Mediator: An Integrated Approach to Information Retrieval The Mediator is a pseudo intelligent software controller which accomplishes two ends. First, it “mediates” between an Information Retrieval System and its end-user. On the assumption that the user of such a system will have at best a minimal knowledge of the operations of computers, it hides from him the internal complexities of the system, and presents to him a simplified “abstract” of the operations of the system. The Mediator allows the end-user to communicate with any application program in his own terms and to carry out operations of any degree of complexity which can be defined within those terms. Secondly, the controller enables a single system to extract unified information from data-banks of both data base management and textual environments. The Mediator is driven by a combination of hierarchically structured internal and external tables. The external tables contain a vocabulary selected by the user for his personal communication with the system; the internal tables contain directives which determine the appropriate path to be followed by the retrieval system in accomplishing the user's request.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {14–36},
numpages = {23},
keywords = {Data base management system textual information retrieval, Mediator, Controller query language},
series = {SIGIR '78}
}

@article{10.1145/1013234.803133,
author = {Tharp, Alan L.},
title = {Augmented Transition Networks as a Design Tool for Personalized Database Systems},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803133},
doi = {10.1145/1013234.803133},
abstract = {This paper illustrates the use of Augmented Transition Networks (ATNs) as a design tool for constructing document retrieval systems for those personalized applications which are too small or specialized to attract a commercial vendor. ATNs, which are explained in the context of this application, are used not only to improve the human/computer interface with the retrieval system but also to conceptually organize its structure.},
journal = {SIGIR Forum},
month = may,
pages = {2–13},
numpages = {12}
}

@inproceedings{10.1145/800096.803133,
author = {Tharp, Alan L.},
title = {Augmented Transition Networks as a Design Tool for Personalized Database Systems},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803133},
doi = {10.1145/800096.803133},
abstract = {This paper illustrates the use of Augmented Transition Networks (ATNs) as a design tool for constructing document retrieval systems for those personalized applications which are too small or specialized to attract a commercial vendor. ATNs, which are explained in the context of this application, are used not only to improve the human/computer interface with the retrieval system but also to conceptually organize its structure.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {2–13},
numpages = {12},
series = {SIGIR '78}
}

@article{10.1145/1013234.803132,
author = {Koll, Matthew B.},
title = {WEIRD: An Approach to Concept-Based Information Retrieval},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803132},
doi = {10.1145/1013234.803132},
abstract = {WEIRD is an automatic document retrieval system designed and implemented at Syracuse University, which attempts to advance the art of computerized retrieval from word-matching to judging conceptual similarity. WEIRD uses a vector space model to represent the relations among terms and documents. Items in the space are located according to their “meaning”, which is their proximity to all other items in the data base as measured by co-occurrence frequencies. This is done without manipulating large matrices. The dimensions of the space are not used to define relations; items are defined solely by their position relative to the other items. Retrieval is determined by Euclidean distance from the plotted query. In the first section of the paper the basic characteristics of WEIRD are described. Second, the results of a preliminary evaluation are reported. Alternatives for further development of WEIRD are then considered.},
journal = {SIGIR Forum},
month = may,
pages = {1},
numpages = {1}
}

@inproceedings{10.1145/800096.803132,
author = {Koll, Matthew B.},
title = {WEIRD: An Approach to Concept-Based Information Retrieval},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803132},
doi = {10.1145/800096.803132},
abstract = {WEIRD is an automatic document retrieval system designed and implemented at Syracuse University, which attempts to advance the art of computerized retrieval from word-matching to judging conceptual similarity. WEIRD uses a vector space model to represent the relations among terms and documents. Items in the space are located according to their “meaning”, which is their proximity to all other items in the data base as measured by co-occurrence frequencies. This is done without manipulating large matrices. The dimensions of the space are not used to define relations; items are defined solely by their position relative to the other items. Retrieval is determined by Euclidean distance from the plotted query. In the first section of the paper the basic characteristics of WEIRD are described. Second, the results of a preliminary evaluation are reported. Alternatives for further development of WEIRD are then considered.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {1},
numpages = {1},
series = {SIGIR '78}
}

@article{10.1145/965643.810247,
author = {Bird, R. M. and Tu, J. C. and Worthy, R. M.},
title = {Associative/Parallel Processors for Searching Very Large Textual Data Bases},
year = {1977},
issue_date = {May 1977},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/965643.810247},
doi = {10.1145/965643.810247},
abstract = {This paper describes an approach to solving a major problem in the information processing sciences— that of searching very large (5-50 billion characters) data bases of unstructured free-text for random queries within a reasonable time and at an affordable price.The need by information specialists and knowledge workers for large, fast low-cost text and document retrieval systems is growing rapidly. Conventional approaches to the problem have usually depended upon expensive, general purpose computers, upon special pre-preprocessing of the textual data (e.g. file inverting, indexing, abstracting, etc.), and upon elaborate, costly software. The resulting retrieval systems often cost hundreds of dollars per query and the full scanning of an uninverted, unstructured billion byte textual data base could take hours of computer services. However, in spite of these restrictions, such full text search systems have proved useful and even indispensible for many applications.Computer technology of the late 1960's and the 1970's, in both hardware and software (e.g., minicomputers, low-cost, high density disk storage, “chip” electronics, natural language query systems, etc.), have made i t practical to build special purpose, low-cost text retrieval systems. Such a system has been built, tested, and is now in a production stage. The system called the Associative File Processor (AFP), utilizes a conventional minicomputer (DEC's PDP-11/45) for control, off-the-shelf high density disks for storage, a special purpose parallel search module as a text term detector, and query and retrieval software. The AFP is currently being field tested at two sites. Full text, parallel searches on un-preprocessed textual data bases are being performed at the effective matching rates of 4 billion bytes per second (8K byte key memory times 500 Kbyte/second data stream). Estimated costs are 10 to 25 cents per query for a one billion byte data base. The costs per query and the time for searching increase in a linear fashion as data base increases. A basic architecture for the AFP is described and an implemented version is discussed. A more powerful term detector module is also under development. This system is designed around a finite state automaton algorithm.},
journal = {SIGIR Forum},
month = jan,
pages = {8–9},
numpages = {2}
}

@inproceedings{10.1145/800180.810247,
author = {Bird, R. M. and Tu, J. C. and Worthy, R. M.},
title = {Associative/Parallel Processors for Searching Very Large Textual Data Bases},
year = {1977},
isbn = {9781450374804},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800180.810247},
doi = {10.1145/800180.810247},
abstract = {This paper describes an approach to solving a major problem in the information processing sciences— that of searching very large (5-50 billion characters) data bases of unstructured free-text for random queries within a reasonable time and at an affordable price.The need by information specialists and knowledge workers for large, fast low-cost text and document retrieval systems is growing rapidly. Conventional approaches to the problem have usually depended upon expensive, general purpose computers, upon special pre-preprocessing of the textual data (e.g. file inverting, indexing, abstracting, etc.), and upon elaborate, costly software. The resulting retrieval systems often cost hundreds of dollars per query and the full scanning of an uninverted, unstructured billion byte textual data base could take hours of computer services. However, in spite of these restrictions, such full text search systems have proved useful and even indispensible for many applications.Computer technology of the late 1960's and the 1970's, in both hardware and software (e.g., minicomputers, low-cost, high density disk storage, “chip” electronics, natural language query systems, etc.), have made i t practical to build special purpose, low-cost text retrieval systems. Such a system has been built, tested, and is now in a production stage. The system called the Associative File Processor (AFP), utilizes a conventional minicomputer (DEC's PDP-11/45) for control, off-the-shelf high density disks for storage, a special purpose parallel search module as a text term detector, and query and retrieval software. The AFP is currently being field tested at two sites. Full text, parallel searches on un-preprocessed textual data bases are being performed at the effective matching rates of 4 billion bytes per second (8K byte key memory times 500 Kbyte/second data stream). Estimated costs are 10 to 25 cents per query for a one billion byte data base. The costs per query and the time for searching increase in a linear fashion as data base increases. A basic architecture for the AFP is described and an implemented version is discussed. A more powerful term detector module is also under development. This system is designed around a finite state automaton algorithm.},
booktitle = {Proceedings of the 3rd Workshop on Computer Architecture : Non-Numeric Processing},
pages = {8–9},
numpages = {2},
series = {CAW '77}
}

@article{10.1145/965643.810246,
author = {Vineberg, Maniel},
title = {Implementation of Character String Pattern Matching on a Multiprocessor},
year = {1977},
issue_date = {May 1977},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/965643.810246},
doi = {10.1145/965643.810246},
abstract = {An algorithm to do pattern matching, a basic character string operation, is presented. The Programmable Algorithm Machine (PAM), a proposed special-purpose computer which will feature multiple processing elements and operate efficiently over a wide class of applications, is described. It is shown that the multiple processing elements of the PAM allow concurrent execution of independent operations both in a special case of the pattern matching algorithm, where the string sizes (lengths) are known at compile time, and in the general case, where the sizes are not known.},
journal = {SIGIR Forum},
month = jan,
pages = {1–7},
numpages = {7}
}

@inproceedings{10.1145/800180.810246,
author = {Vineberg, Maniel},
title = {Implementation of Character String Pattern Matching on a Multiprocessor},
year = {1977},
isbn = {9781450374804},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800180.810246},
doi = {10.1145/800180.810246},
abstract = {An algorithm to do pattern matching, a basic character string operation, is presented. The Programmable Algorithm Machine (PAM), a proposed special-purpose computer which will feature multiple processing elements and operate efficiently over a wide class of applications, is described. It is shown that the multiple processing elements of the PAM allow concurrent execution of independent operations both in a special case of the pattern matching algorithm, where the string sizes (lengths) are known at compile time, and in the general case, where the sizes are not known.},
booktitle = {Proceedings of the 3rd Workshop on Computer Architecture : Non-Numeric Processing},
pages = {1–7},
numpages = {7},
series = {CAW '77}
}

