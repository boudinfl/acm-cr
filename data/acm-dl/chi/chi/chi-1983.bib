@inproceedings{10.1145/800045.801571,
author = {Norman, Donald A.},
title = {Design Principles for Human-Computer Interfaces},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801571},
doi = {10.1145/800045.801571},
abstract = {If the field of Human Factors in Computer Systems is to be a success it must develop design principles that are useful, principles that apply across a wide range of technologies. In the first part of this paper I discuss some the properties that useful principles should have. While I am at it, I warn of the dangers of the tar pits and the sirens of technology. We cannot avoid these dangers entirely, for were we to do so, we would fail to cope with the real problems and hazards of the field.The second part of the paper is intended to illustrate the first part through the example of tradeoff analysis. Any single design technique is apt to have its virtues along one dimension compensated by deficiencies along another. Tradeoff analysis provides a quantitative method of assessing tradeoff relations for two attributes xi and xj by first determining the User Satisfaction function for each, U(x), then showing how U(xi) trades off against U(xj). In general, the User Satisfaction for a system is given by the weighted sum of the User Satisfaction values for the attributes. The analysis is used to examine two different tradeoffs of information versus time and editor workspace versus menu size. Tradeoffs involving command languages versus menu-based systems, choices of names, and handheld computers versus workstations are examined briefly.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {1–10},
numpages = {10},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801572,
author = {Wright, Patricia},
title = {Manual Dexterity-a User-Oriented Approach to Creating Computer Documentation.},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801572},
doi = {10.1145/800045.801572},
abstract = {This paper will not advocate list of firm recommendations about document design because it is recognised that design decisions will vary with many factors. Instead, the present discussion will emphasize that when making these decisions it is necessary for designers to take account of how readers will use the information provided. In order to help them do this, a simple framework is proposed which outlines the rudiments of how people interact with technical documents.The advantages of this framework will be illustrated by using it to motivate design decisions at two decision levels. At a “macro” level the document designer must make broad decisions about the contents and format of the manual. At a “micro” level the designer must select particular combinations of linguistic, graphic and typographic options which will help readers locate, understand and implement the information given in the manual.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {11–18},
numpages = {8},
keywords = {Writing, Manuals, Usability, Documentation, Design},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801573,
author = {Nakatani, Lloyd H. and Rohrlich, John A.},
title = {Soft Machines: A Philosophy of User-Computer Interface Design},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801573},
doi = {10.1145/800045.801573},
abstract = { Machines and computer systems differ in many characteristics that have important consequences for the user. Machines are special-purpose, have forms suggestive of their functions, are operated with controls in obvious one-to-one correspondence with their actions, and the consequences of the actions on visible objects are immediately and readily apparent. By contrast, computer systems are general-purpose, have inscrutable form, are operated symbolically via a keyboard with no obvious correspondence between keys and actions, and typically operate on invisible objects with consequences that are not immediately or readily apparent. The characteristics possessed by machines, but typically absent in computer systems, aid learning, use and transfer among machines. But “hard,” physical machines have limitations: they are inflexible, and their complexity can overwhelm us. We have built in our laboratory “soft machine” interfaces for computer systems to capitalize on the good characteristics of machines and overcome their limitations. A soft machine is implemented using the synergistic combination of real-time computer graphics to display “soft controls,” and a touch screen to make soft controls operable like conventional hard controls. },
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {19–23},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801574,
author = {Wixon, Dennis and Whiteside, John and Good, Michael and Jones, Sandra},
title = {Building a User-Defined Interface},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801574},
doi = {10.1145/800045.801574},
abstract = {A measurably easy-to-use interface has been built using a novel technique. Novices attempted an electronic mail task using a command-line interface containing no help, no menus, no documentation, and no instruction. A hidden operator intercepted commands when necessary, creating the illusion of a true interactive session. The software was repeatedly revised to recognize users' new commands; in essence, the users defined the interface. This procedure was used on 67 subjects. The first version of the software could recognize only 7% of all the subjects' spontaneously generated commands; the final version could recognize 76% of those commands. This experience contradicts the idea that people are not good at designing their own command languages. Through careful observation and analysis of user behavior, a mail interface unusable by novices evolved into one that let novices do useful work within minutes.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {24–27},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801575,
author = {Jacob, Robert J.K.},
title = {Executable Specifications for a Human-Computer Interface},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801575},
doi = {10.1145/800045.801575},
abstract = {It is useful to be able to specify a proposed human-computer interface formally before building it, particularly if a mockup suitable for testing can be obtained directly from the specification. A specification technique for user interfaces, based on state transition diagrams, is introduced and then demonstrated for a secure message system application. An interpreter that executes the resulting specification is then described. Some problems that arise in specifying a user interface are addressed by particular features of the technique: To reduce the complexity of the developer's task, a user interface is divided into the semantic, syntactic, and lexical levels, and a separate executable specification is provided for each. A process of stepwise refinement of the syntactic specification, leading from an informal specification to an executable one is also presented. Since the state diagram notation is based on a non-deterministic model, constraints necessary to realize the system with a deterministic interpreter are given.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {28–34},
numpages = {7},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801576,
author = {Roach, J. W. and Nickson, M.},
title = {Formal Specifications for Modeling and Developing Human/Computer Interfaces},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801576},
doi = {10.1145/800045.801576},
abstract = {High quality human/computer interfaces have become a major topic of research. This paper describes a new method for modeling, designing, and developing dialogues, a method that has a strong formal basis and allows a uniform syntactic and semantic specification. This formal descriptive technique has the added advantage of being executable, that is, it has widely available translators. The technique chosen here allows a very high level specification of human/computer interaction enabling rapid development and easy modification. This paper describes the nature of the formal specifications written in first order logic using Prolog, and the successful specification and development of a carrier air traffic controller (CATC) dialogue. These experiments demonstrate the utility of Prolog as a high level specification language and point the way to a full dialogue development system that can incorporate a multi-layered concept of human/computer interaction.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {35–39},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801577,
author = {Hammond, N. and J\o{}rgensen, A. and MacLean, A. and Barnard, P. and Long, J.},
title = {Design Practice and Interface Usability: Evidence from Interviews with Designers},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801577},
doi = {10.1145/800045.801577},
abstract = {Research into human-computer interaction (HCI) is mainly conducted by engineering psychologists, cognitive psychologists and computer scientists. The principal consumers of applied HCI research, on the other hand, are human factors practitioners and system designers and developers. The HCI researcher who believes his or her findings to be of practical relevance has therefore to consider the interface between researcher and practitioner as well as that between system and user: the products of HCI research must not only be relevant but also “user-friendly” to the practitioner. This problem is not merely one of communication between different professional communities, as the optimal route for the translation of research findings into terms that will be of practical use in the design process is itself a matter of considerable uncertainty and debate. Thus there are many instances in the research literature where apparently contradictory recommendations can all too easily be drawn from findings based on sound but, by its very nature, limited experimentation (e.g., compare the findings of Landauer et al., in press, Ledgard et al., 1980, and Scapin, 1981, on naming text-editing operations).One of the prerequisites for tackling both the communication problem and the translation problem is an understanding of relevant aspects of decision-making in design which influence the usability of the end-user interface. This is so for three reasons. First, an appreciation of the nature of design practice will at least help identify those areas where research input might have the greatest impact and allow researchers to direct their efforts towards them. Second, it may identify possible modifications to existing design practice which would allow research input to be used more effectively. Finally, it would be somewhat surprising if current design practice were not to furnish researchers with any insights into the underlying processes of users. The experience and skills of the practitioner should be a valuable source of information for the HCI researcher. For these reasons, we have been documenting some of the relationships between design practice and the usability of systems for use by non-experts. While there is considerable literature on programming behaviour (e.g. Mayer, 1981), reports of design behaviour are rare, other than occasional descriptions by practitioners of the interface design of their own products (e.g., Botterill, 1982; Smith et al., 1982). This paper focusses on the influence of the individual designer's decision-making. Evidence is taken from interviews with experienced system designers concerning design issues influencing the nature of the user interface which had arisen with systems they had recently worked on. For two of the systems usability investigations had been performed (see Lewis &amp; Mack, 1982 and Hammond et al., 1983).},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {40–44},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801578,
author = {Moran, Thomas P.},
title = {Getting into a System: External-Internal Task Mapping Analysis},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801578},
doi = {10.1145/800045.801578},
abstract = { A task analysis technique, called ETIT analysis, is introduced. It is based on the idea that tasks in the external world must be reformulated into the internal concepts of a computer system before the system can be used. The analysis is in the form of a mapping between sets of external tasks and internal tasks. An example analysis of several text editing systems is presented, and various properties of the systems are derived from the analysis. Further, it is shown how this analysis can be used to assess the potential transfer of knowledge from one system to another, i.e., how much knowing one system helps with learning another. Several issues are briefly discussed. },
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {45–49},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801579,
author = {Gould, John D. and Lewis, Clayton},
title = {Designing for Usability—Key Principles and What Designers Think},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801579},
doi = {10.1145/800045.801579},
abstract = {Any system designed for people to use should be (a) easy to learn; (b) useful, i.e., contain functions people really need in their work; (c) easy to use; and (d) pleasant to use. In this note we present theoretical considerations and empirical data relevant to attaining these goals. First, we mention four principles for system design which we believe are necessary to attain these goals; Then we present survey results that demonstrate that our principles are not really all that obvious, but just seem obvious once presented. The responses of designers suggest they may sometimes think they are doing what we recommend when in fact they are not. This is consistent with the experience that systems designers do not often recommend or use them themselves. We contrast some of these responses with what we have in mind in order to provide a more useful description of our principles. Lastly, we consider why this might be so. These sections are summaries of those in a longer paper to appear elsewhere (Gould &amp; Lewis, 1983). In that paper we elaborate on our four principles, showing how they form the basis for a general methodology of design, and we describe a successful example of using them in actual system design (IBM's Audio Distribution System).},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {50–53},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801580,
author = {Bannon, Liam and Cypher, Allen and Greenspan, Steven and Monty, Melissa L.},
title = {Evaluation and Analysis of Users' Activity Organization},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801580},
doi = {10.1145/800045.801580},
abstract = {Our analyses of the activities performed by users of computer systems show complex patterns of interleaved activities. Current human - computer interfaces provide little support for the kinds of problems users encounter when attempting to accomplish several different tasks in a single session. In this paper we develop a framework for discussing the characteristics of activities, in terms of activity structures, and provide a number of conceptual guidelines for developing an interface which supports activity coordination. The concept of a workspace is introduced as a unifying construct for reducing the mental workload when switching tasks, and for supporting contextually-driven interpretations of the users' activity structures.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {54–57},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801581,
author = {Butler, T. W.},
title = {Computer Response Time and User Performance.},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801581},
doi = {10.1145/800045.801581},
abstract = {Nearly everyone agrees that computer response time is very important to the users of interactive systems. Many papers have been written describing the bad effects of computer response times that are too long or too short, and many sets of “guidelines” for appropriate human-engineered computer response times in human-machine systems have been published, as well. Nearly all these sets of guidelines are direct descendants of the set published by Robert Miller (1968) about 15 years ago. When Miller wrote his guidelines, he was quite open in describing them as based only on his experience, and he called for experimental data that would allow for the formulation of better, empirically-based rules for setting computer response time for optimal human performance.About fifteen years later, these studies are still missing, for the most part. Aside for the problem-solving studies of Grossberg, et al. (1976), Goodman and Spence (1981), Bergrnan, et al. (1981), and others, the literature is sadly lacking in empirical data to support the simplest assertions about how computer response time affects computer users. Though there is only the sparsest data to support them, several assertions about computer response time and user performance have become accepted as common knowledge.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {58–62},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801582,
author = {Murrel, Sharon},
title = {Computer Communication System Design Affects Group Decision Making},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801582},
doi = {10.1145/800045.801582},
abstract = {The impact of computer-based communication on group performance depends upon the structure enforced by the communication system. While the ability to introduce structures which enhance human communication processes has been applauded, research to evaluate the impact of various design features is lacking. This research has explored the impact of two synchronous systems which vary in the role of immediacy of interaction and feedback on group decision making. One system is message-oriented, requiring a conferee to complete a message before interacting with others. The other displays what each group member is typing in a separate window on the screens of all participants. In this system, comments can be made as ideas are expressed. Groups were asked to solve a problem first individually and then cooperatively using one of the two systems. All groups produced decisions superior to the average initial individual solutions. Window system groups both improved more and produced significantly higher quality decisions. These groups focused on fewer topics at one time while spending less time discussing how to organize both system and task efforts. By influencing the group's ability to organize and focus its attention, the design of the communication system influenced decision quality.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {63–67},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801583,
author = {Isa, Barbara S. and Boyle, James M. and Neal, Alan S. and Simons, Roger M.},
title = {A Methodology for Objectively Evaluating Error Messages},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801583},
doi = {10.1145/800045.801583},
abstract = {Message quality is a critical factor in influencing user acceptance of a program product. Good error messages can reduce the time and cost to create and maintain software, as well as help users learn about the product. We have developed a methodology for conducting controlled usability evaluations of error messages. The Message Test Program is easily modified to adapt to different product situations, and messages can be evaluated even before working code exists. The Message Test Program can be used to test error messages for a batch product, as well as messages for an interactive product. It can also be used for stand-alone messages, for products that offer on-line help, or messages that provide additional information in a reference manual. Message testing enables us to objectively evaluate error messages and provide specific feedback about the difficulties users encounter and how error messages can be improved.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {68–71},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801584,
author = {Bewley, William L. and Roberts, Teresa L. and Schroit, David and Verplank, William L.},
title = {Human Factors Testing in the Design of Xerox's 8010 “Star” Office Workstation},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801584},
doi = {10.1145/800045.801584},
abstract = {Integral to the design process of the Xerox 8010 “Star” workstation was constant concern for the user interface. The design was driven by principles of human cognition. Prototyping of ideas, paper-and-pencil analyses, and human-factors experiments with potential users all aided in making design decisions. Three of the human-factors experiments are described in this paper: A selection schemes test determined the number of buttons on the mouse pointing device and the meanings of these buttons for doing text selection. An icon test showed us the significant parameters in the shapes of objects on the display screen. A graphics test evaluated the user interface for making line drawings, and resulted in a redesign of that interface.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {72–77},
numpages = {6},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801585,
author = {Neal, Alan S. and Simons, Roger M.},
title = {Playback: A Method for Evaluating the Usability of Software and Its Documentation},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801585},
doi = {10.1145/800045.801585},
abstract = {A methodology is described for obtaining objective measures of product usability. The Playback program developed at the IBM Human Factors Center in San Jose collects performance data of the user interface without impact upon the user or the system being evaluated. While a user is working with the system, keyboard activity is timed and recorded by a second computer. This log of stored activity is later played back through the host system for analysis. An observer watching television monitors enters time-stamped codes and comments concerning the users employment of system publications. The advantages of this approach are: (1) data-collection programs are external to the product being evaluated, (2) no modifications of the Playback program are required for testing different software applications, (3) the data-collection process does not intrude on the user's thoughts or activities, (4) problem determination is performed at an accelerated rate during playback analysis, and (5) all data collection is performed on line.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {78–82},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801586,
author = {Root, Robert W. and Draper, Steve},
title = {Questionnaires as a Software Evaluation Tool},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801586},
doi = {10.1145/800045.801586},
abstract = {This paper reports on a study investigating the strengths and weaknesses of questionnaires as software evaluation tools. Two major influences on the usefulness of questionnaire-based evaluation responses are examined: the administration of the questionnaire, and the background and experience of the respondent. Two questionnaires were administered to a large number of students in an introductory programming class. The questionnaires were also given to a group of more experienced users (including course proctors). Respondents were asked to evaluate the text editor used in the class along a number of dimensions; evaluation responses were solicited using a number of different question types. Another group of students received the questionnaire individually, with part of it presented on the computer; a third group also evaluated an enhanced version of the editor in followup sessions.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {83–87},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801587,
author = {Mooers, Charlotte D.},
title = {Changes That Users Demanded in the Human Interface to the Hermes Message System},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801587},
doi = {10.1145/800045.801587},
abstract = {The Hermes Message System has evolved in response to the needs and criticisms of users. This paper gives examples of some less than successful features, many of which have been changed, so that future designers will know what didn't work, as well as what does. Principles derived from this experience are: (a) What you see should be what you can type. (b) Commands and syntax should be uniform. (c) Commands and objects should be organized into groups. (d) Hierarchy is great for organizing things you know about but much less useful for finding things you don't know. Even with careful design, it is impossible to predict what users will dislike so it is important to design programs so they can be easily changed.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {88–92},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801588,
author = {Horton, Martha R.},
title = {Computing on a Shoestring: Initial Data Entry for Service Organizations},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801588},
doi = {10.1145/800045.801588},
abstract = {This paper addresses the feasibility of computerized record-keeping for low-budget volunteer organizations, and presents results of an experiment designed to determine a fast, reliable, and comfortable data entry technique for enabling non-computer-user to enter large amounts of manually recorded data into a computer file.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {93–97},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801589,
author = {Kaczmarek, T. and Mark, W. and Sondheimer, N.},
title = {The Consul/CUE Interface: An Integrated Interactive Environment},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801589},
doi = {10.1145/800045.801589},
abstract = {Consul and CUE are two systems that combine to support an interface to interactive computer services that is integrated across a variety of interface methods. Consul is an experimental natural language interface system designed to be customized to a set of specific interactive computer services: electronic mail, personal calendar, word processing, etc. CUE is a window- and object-based run-time support environment for interactive services with a command language, pointing device and menu interface. Using the Consul/CUE interface, the user sees a single system that is capable of handling a wide variety of input in a completely uniform service environment. The success of the combined system derives from a large knowledge base formalizing facts in the interactive service environment in an artificial intelligence network structure.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {98–102},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801590,
author = {Kieras, David and Polson, Peter G.},
title = {A Generalized Transition Network Representation for Interactive Systems},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801590},
doi = {10.1145/800045.801590},
abstract = {A general method for describing the behavior of an interactive system is presented which is based on transition networks generalized enough to describe even very complex systems easily, as shown by an example description of a word processor. The key feature is the ability to easily describe hierarchies of modes or states of the system. The representation system is especially valuable as a design tool when used in a simulation of a proposed user interface.In order to characterize the interaction between a user and a system, an explicit and formal representation of the behavior of the system itself is needed. To be of value in the design of user interfaces, the representation should be independent of the actual implementation of the system, but also reflect the structural properties of the system's behavior, such as its hierarchical form, the possible modes, and the consistent patterns of interaction. At the same time, the representation must be easy to define and understand. This paper presents a representation notation with these properties.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {103–106},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801591,
author = {Revesman, Mark E. and Greenstein, Joel S.},
title = {Application of a Model of Human Decision Making for Human/Computer Communication},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801591},
doi = {10.1145/800045.801591},
abstract = {When a human and computer perform similar tasks in parallel, it is important that an effective line of communication exist between the two entities. Since overt communication may add to the human's workload, an implicit method of communication is suggested in which the computer has a model of human performance on which to base actions. A two-stage model of human performance is employed in an experimental situation in which both a human and a computer act as decision makers. Results indicate that the implementation of a model significantly improves the human's performance and the overall system performance, without degrading the computer's performance. Research into additional experimental and real-world situations is suggested.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {107–111},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801592,
author = {Dumais, Susan T. and Landauer, Thomas K.},
title = {Using Examples to Describe Categories},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801592},
doi = {10.1145/800045.801592},
abstract = {The successful use of menu-based information retrieval systems depends critically on users understanding the category names and partitions used by system designers. Some of the problems in this endeavor are psychological and have to do with naming large and ill-defined categories so that users can understand their contents, and effectively partitioning large sets of objects. Systems of interest (like home information systems) often consist of new and frequently changing content in large and varied domains, and are particularly prone to these problems. We explored several ways in which one might name categories in one such domain (Yellow Page category headings) - category names, category names plus examples, and examples alone. We found that three examples alone were essentially as good a way to name these categories as either an expertly chosen name or a name plus examples. Examples provide a promising possibility both as a means of flexibly naming menu categories and as a methodological tool to study certain categorization problems.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {112–115},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801593,
author = {Rosenberg, Jarrett},
title = {A Featural Approach to Command Names},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801593},
doi = {10.1145/800045.801593},
abstract = { A variety of aspects of command names have been studied, such as suggestiveness, memorability, and the use of icons. A single framework for these disparate studies is desirable, and it is proposed that the concept of featural analysis prevalent in linguistics and psycholinguistics be adopted as an approach to command name design. Examples of the breadth of application of this approach are given for the naming issues of suggestiveness, learning and memory, congruence and hierarchicalness, universal commands, the relationships of names to the command language syntax, and the use of non-words as names. },
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {116–119},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801594,
author = {Kraut, Robert E. and Hanson, Stephen J. and Farber, James M.},
title = {Command Use and Interface Design},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801594},
doi = {10.1145/800045.801594},
abstract = {Designing a human interface to a computer system is more art than science. Systematic research on the human interface to computer systems, when it is performed, is generally an after-the-fact evaluation of an almost finished product. This sort of evaluation is often too specific to a particular product to provide general prescriptions for future interface design and often occurs too late to have a substantial impact on product development. Rarely do research and evaluation provide guidance throughout the development cycle.We propose that an examination of people's natural use of already existing computer systems, using research methods adopted from studies of social behavior (e.g., Kraut &amp; Johnston, 1982; Hooff, 1982) will provide a richer source of information for guiding development. A multivariate examination of naturally occurring human-computer interaction may provide insights into its complex structure in ways that are denied to more experimentally oriented, human-factors research.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {120–124},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801595,
author = {Leon, Lorenzo De and Harris, William G. and Evens, Martha},
title = {Is There Really Trouble with UNIX?},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801595},
doi = {10.1145/800045.801595},
abstract = {Donald Norman has claimed that UNIX has cryptic and inconsistent command names. As Michael Lesk has remarked, the lack of objective data makes it difficult to evaluate the significance of Norman's criticisms. In an effort to explore this controversy we taught one group of novice users the UNIX command language and another group an English-based command language (NUIX). The number of errors and calls for on-line assistance were compared. The subjects in this study were 22 high school women with no formal exposure to computers. The results reveal that the UNIX group made fewer errors than the NUIX group in two training sessions a week apart. Although calls for on-line assistance for the two groups in the first session were comparable, the UNIX group made over twice as many calls for on-line assistance in the second session as the NUIX group. Our findings suggest that even though the UNIX command language may not be harder for novice users to learn, it is probably more difficult for them to use.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {125–129},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801596,
author = {Lee, Alison and Lochovsky, F. H.},
title = {Enhancing the Usability of an Office Information System through Direct Manipulation},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801596},
doi = {10.1145/800045.801596},
abstract = {In Office Information Systems, the primary focus has been to integrate facilities for the communication and management of information. However, the human factors aspects of the design of office systems are equally important considerations if such office systems are to gain widespread acceptance and use. The application of design techniques from Human Factors can help enhance the usability of an office system. In this paper, we describe the user interface of an office system developed by adapting such design techniques.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {130–134},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801597,
author = {Phillips, Mark D. and Allison, James E. and Dodd, Valor S.},
title = {An Assessment of Computer Generated Space Situation Map Projections},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801597},
doi = {10.1145/800045.801597},
abstract = {C3 environments have increasingly incorporated computer controlled maps as decision aids. The design of map displays in space oriented C3 systems has taken on greater importance due to the complex spatial relationships among orbiting objects. The large number of objects orbiting the globe and their great speeds further complicates efforts to quickly and accurately portray their positions graphically.This paper describes an experimental plan aimed at evaluating a new 2D/3D “hybrid” space situation map display. The Hybrid display is created by opening a globe at the south pole and flattening it into a platter. A third dimension is obtained by tilting the platter. It was hypothesized that the Hybrid display would offer an advantage to C3 system operators and analysts dealing with three dimensional problems. The test plan focuses on perceptual parameters and user preference issues concerning conventional and Hybrid display techniques. The results of this study will be examined to direct future work on dynamic displays, and the impact of display design approach on cognitive performance.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {135–138},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801598,
author = {Lewis, J. W.},
title = {An Effective Graphics User Interface for Rules and Inference Mechanisms},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801598},
doi = {10.1145/800045.801598},
abstract = {As the technology of rule-based inference mechanisms matures, knowledge acquisition—the creation, structuring, and verification of rules—becomes increasingly important. The accuracy and completeness of the rules in the knowledge base determine expert system performance, and the cost of acquiring that knowledge base dominates all other hardware and software costs in practical systems.To reduce knowledge acquisition time and error rate, a new interactive graphics interface for rules is being designed and implemented in GE Corporate Research and Development. In the new system, each set of rules is represented as an AND/OR graph and parts of the rule base are displayed on a CRT screen as an AND/OR tree. A user—even an unsophisticated user—can navigate the AND/OR graph, identify nodes to be modified, analyze the behavior of the graph, verify its correctness graphically, and follow the execution of inference engines.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {139–143},
numpages = {5},
keywords = {Expert systems, User interfaces AND/OR trees},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801599,
author = {Gupta, S. M. and Geyer, L. H. and Maalouf, J. A.},
title = {Effect of Font and Medium on Recognition/Confusion},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801599},
doi = {10.1145/800045.801599},
abstract = {Systematic differences in recognition/confusion due to font variation is estimated by using confusion matrices of the full 26 capital letters of the English alphabet in 5 \texttimes{} 7 dot matrix font and “Keepsake” conventional stroke font. Average correct recognition was controlled to 50% by limiting brightness and duration of tachistoscopic displays for each font to individually determined levels for each of the four subjects. Each stimulus symbol was presented 45 times to each subject, resulting in 180 trials per letter per font.By comparing the obtained data to that reported by Townsend (1971), Craig (1979) and Gilmore et al.(1979), estimates of the differences in recognition/confusion attributable to medium, font and subject differences were isolated. This comparison reveals a substantial difference in recognition/confusion processes when the observer sees the display on a video screen versus seeing it projected on a white screen.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {144–149},
numpages = {6},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801600,
author = {Teitelbaum, Richard C. and Granda, Richard E.},
title = {The Effects of Positional Constancy on Searching Menus for Information},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801600},
doi = {10.1145/800045.801600},
abstract = {One of the more popular methods today for instructing software designers on how to structure man-display interfaces is with guidelines. Numerous design guidelines have been promulgated in the last several years (Engel and Granda, 1975; Ramsey and Atwood, 1980; Smith, 1980; Kennedy, 1974; Pew and Rollins, 1975) and there is still much current activity in collecting and expanding screen guidelines (Smith, 1981; Smith &amp; Aucella, 1982)In the past few years an increased number of empirical investigations quantifying directly the behavioral impacts of individual design guidelines have appeared in the literature. Issues such as the depth of menu hierarchies (Miller, 1981), eye movements during menu viewing (Card, 1982; Kolers, Duchnicky, and Ferguson, 1981), or location of screen entry areas (Granda, Teitelbaum, and Dunlap, 1982) have been experimentally studied.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {150–153},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801601,
author = {Tennant, Harry R. and Ross, Kenneth M. and Thompson, Craig W.},
title = {Usable Natural Language Interfaces through Menu-Based Natural Language Understanding},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801601},
doi = {10.1145/800045.801601},
abstract = {Conventional natural language interfaces suffer from several ease-of-use problems. They require a user to type and to formulate questions in a way that the system can understand. They have high failure rates which often frustrate users, and users often do not use features of the systems because they are unaware of them or don't trust them. In addition, conventional natural language systems are expensive to build and require large amounts of storage to use. This paper describes a new approach to natural language interfaces called menu-based natural language understanding. This new approach solves the problems listed above. The paper compares the menu-based natural language approach to conventional natural language interfaces and to other forms of interface and discusses the advantages and limitations of this new approach.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {154–160},
numpages = {7},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801602,
author = {Ogden, William C. and Brooks, Susan R.},
title = {Query Languages for the Casual User: Exploring the Middle Ground between Formal and Natural Languages},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801602},
doi = {10.1145/800045.801602},
abstract = {In the past the non-programmer who wanted the information contained in a computer database had to employ an expert programmer knowledgeable in the language and structure of the database. Now languages are being developed that are designed to be used by an infrequent or “casual” user who has limited knowledge of how the data is stored or retrieved by the computer. These special purpose query languages which allow these casual users to retrieve information from computer databases are commonly referred to as “nonprocedural” (Leavenworth and Sammet, 1974) because users need only describe the data to be retrieved, not how it is to be retrieved. These languages can be classified into two basic types which are characterized by the level of constraint imposed on the syntax and vocabulary of the language (Ehrenreich, 1981). Formal query languages have a very constrained syntax and vocabulary, while natural query languages have a relatively unconstrained syntax and vocabulary.If we consider the level of constraint that can be imposed on a query language as a continuum, then formal and natural query languages represent the two ends of this continuum. There has been considerable debate over the issue of which end of this continuum best meets the needs of the casual database user (e.g. Hill, 1972; Petrick, 1976; Shneiderman, 1980). Proponents of formal languages contend that these users benefit from learning a constrained language which teaches a concise and unambiguous way of communicating with the computer. Proponents of natural languages, on the other hand, contend that more people would be able to access database information if they could use their own natural languages. Evidence from studies of the use of some of these query languages however, indicate that neither formal, nor natural languages are easy to use. These studies suggest that the casual user will have difficulty operating at either end of the level-of-constraint continuum.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {161–165},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801603,
author = {Poller, Merle F. and Garter, Susan K.},
title = {A Comparative Study of Moded and Modeless Text Editing by Experienced Editor Users},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801603},
doi = {10.1145/800045.801603},
abstract = {As interactive text editing systems become more and more pervasive on the job, at school, and in the home, the necessity for good human engineering in the design of such interactive systems becomes increasingly apparent.The issue we are concerned with in this paper is not that of modes in general, but rather the more specific question of how editors should handle text insertions. In this context, moded editing means that the editor user must enter a special command before text is inserted and another special command to end the text insertion and return to the command mode. Ordinary printing characters typed while in an insertion mode are entered as text. The same characters entered while the editor is in the command mode are treated as commands. Modeless editing is different; ordinary characters are entered directly as text. There are no special commands required to enter or stop entering text.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {166–170},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801604,
author = {Rosson, Mary Beth},
title = {Patterns of Experience in Text Editing},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801604},
doi = {10.1145/800045.801604},
abstract = {What are the effects of experience on text editing behavior? Do users inevitably develop optimal strategies for getting their work done? The answer to such questions are becoming increasingly important, as more and more individuals begin to use word processing equipment routinely. In the best of all possible worlds, experienced users do become experts, able to quickly and accurately choose and execute optimal procedures to accomplish any given goal. Such a state of affairs would make designers of editing systems very happy indeed. But another alternative exists, that at least some proportion of experienced and frequent users stabilize at some nonoptimal level of skill.An initial survey of relevant research is encouraging. So, for example, Card, Moran, and Newell (1980) were able to deduce selection rules from experienced users' editing behavior that predicted 80% of their editing decisions, suggesting that experienced users have fairly well-defined heuristics for carrying out editing tasks. Tyler and Roth (1982) followed up on this work, demonstrating that novices were less likely to demonstrate selection rules than experienced users, preferring instead to rely on a single, sometimes inefficient, strategy. Finally, Folley and Williges (1982) demonstrated that when confronted with the description of a novel editor, users experienced on other systems make use of a greater number of commands in carrying out a paper-and-pencil application of the editor than do complete novices.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {171–175},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801605,
author = {Gomez, Louis M. and Egan, Dennis E. and Wheeler, Evangeline A. and Sharma, Dhiraj K. and Gruchacz, Aleta M.},
title = {How Interface Design Determines Who Has Difficulty Learning to Use a Text Editor},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801605},
doi = {10.1145/800045.801605},
abstract = { In previous studies two background characteristics of computer novices were consistently correlated with their success in learning to use a line-based computer text editor. Older people and those who scored low on a standard test of Spatial Memory had more difficulty than younger people and those with higher Spatial Memory test scores. In the present study, we observed computer novices as they learned to use a screen-based editor, which presumably reduced spatial memory load. Contrary to expectations, performance using a screen-based editor was again strongly correlated with Spatial Memory test scores. However, the correlation between performance and subjects' age was significantly reduced. Overall, subjects were able to perform the same text editing exercises almost twice as fast using the screen editor compared to subjects in previous experiments using the line editor. These results are discussed in terms of the different cognitive demands placed on users by line and screen text editors. },
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {176–181},
numpages = {6},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801606,
author = {Galambos, James A. and Wikler, Eloise S. and Black, John B. and Sebrechts, Marc M.},
title = {How You Tell Your Computer What You Mean: Ostension in Interactive Systems},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801606},
doi = {10.1145/800045.801606},
abstract = {An important part of communication is being able to point to an object without referring to its components or to the area surrounding it. How to do this is the problem of ostension. We observed many ostension errors in novices learning to use a full-screen text editor. Specifically, the novices erroneously tried to use keys that are appropriate for pointing when using a typewriter but incorrect in screen editors (e.g., space bar, backspace key, etc.), they frequently missed the location they intended by one character, they inadvertently pointed to the wrong occurrcnce of a string using a FIND command, they incorrectly specified boundaries by forgetting about “invisible” characters (e.g., formatting characters), and they mistakenly attempted to point to non-typing areas of the screen that were off-limits.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {182–185},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801607,
author = {Cross, Stephen E.},
title = {A Qualitative Reasoning Approach to Mathematical and Heuristic Knowledge Integration},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801607},
doi = {10.1145/800045.801607},
abstract = {Human problems solvers use heuristic knowledge. Heuristics can be justified in a given problem solving context by reasoning about 'deeper' domain theories. A working computer program, an air traffic control expert system, uses a qualitative reasoning approach to justify heuristically generated plans. The justification is based on mathematical knowledge of aircraft performance which is computationally too complex for use in the normal planning process.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {186–189},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801608,
author = {Hendler, James A. and Michaelis, Paul Roller},
title = {The Effects of Limited Grammar on Interactive Natural Language},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801608},
doi = {10.1145/800045.801608},
abstract = {What is the best way for novice users to interact with computers? Three alternatives that are generally offered are: menu selection, query languages, and natural language. In menu selection, the user chooses from a set of preprogrammed options by entering an associated key. This technique has the advantage of placing a minimal parsing burden on the computer. However, for certain applications, such as conversational interaction, menu systems are inadequate because they severely limit the strategies available to the user.Query languages are special sets of designed specifically for interaction with the computer. They place a greater parsing burden on the computer, and are somewhat less limiting to the user. However, they suffer from human factors problems in that they are often very difficult for the user to learn (Reisner, 1981).},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {190–192},
numpages = {3},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801609,
author = {Kelley, J. F.},
title = {An Empirical Methodology for Writing User-Friendly Natural Language Computer Applications},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801609},
doi = {10.1145/800045.801609},
abstract = {A six-step, iterative, empirical, human factors design methodology was used to develop CAL,a natural language computer application to help computer-naive business professionals manage their personal calendars. Language is processed by a simple, non-parsing algorithm having limited storage requirements and a quick response time. CAL allows unconstrained English inputs from users with no training (except for a 5 minute introduction to the keyboard and display) and no manual (except for a two-page overview of the system). In a controlled test of performance, CAL correctly responded to between 86% and 97% of the inputs it received, according to various criteria. This research demonstrates that the methodological tools of the engineering psychologist can help build user-friendly software that accommodates the unruly language of computer-naive, first-time users by eliciting the cooperation of such users as partners in an iterative, empirical development process.The principal purpose of the research reported here was to design and test a systematic, empirical methodology for developing natural language computer applications. This paper describes that methodology and its successful use in the development of a natural language computer application: CAL,Calendar Access Language. The limited context or domain in which the application operates is the management of a personal calendar, or appointment book, data base by computer-naive business professionals.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {193–196},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801610,
author = {McCoy, Kathleen F.},
title = {Correcting Misconceptions: What to Say When the User is Mistaken},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801610},
doi = {10.1145/800045.801610},
abstract = {Because people's knowledge is often partial and/or faulty, it is inevitable that misconceptions will be revealed in the course of a conversation. If recognized, the other person may say something to correct the misconception, and the conversation continues. Just as this is the case when people interact with each other, so must it be when users interact with a computer system. For example, in interacting with an expert system, a user may reveal misconceptions about objects modelled by the system. By failing to correct such misconceptions, the system may not only confirm the original misconception, but may cause the user to develop further misconceptions. It must therefore be up to the system to recognize and respond to misconceptions in an effective way. In this paper the space of possible object misconceptions is characterized according to the kind of incorrect information involved. It has been found that this characterization is often useful in determining how the user arrived at the misconception, and therefore the kind of information to include in the response. Using such a characterization, a system will be able to effectively correct object misconceptions in a domain independent way. Factors which affect the amount of information included in a correction (such as discourse and situational context) are also examined.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {197–201},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801611,
author = {Payne, S. J. and Green, T. R.G.},
title = {The User's Perception of the Interaction Language: A Two-Level Model},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801611},
doi = {10.1145/800045.801611},
abstract = {Users perceive consistency and inconsistency in syntax, and family resemblances among syntactic constructions. These factors are not captured in conventional BNF-like grammars. We argue that a generalised form of a two-level grammar is a better model of the user's perceptions, and show how the model relates to current psychological notions of organisation in recall and language learning. The model provides a unified interpretation of many previous results in HCI: we analyse here findings by Reisner (1981) and Barnard et al. (1981). Two preliminary experimental tests supporting the model are described.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {202–206},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801612,
author = {Douglas, Sarah A. and Moran, Thomas P.},
title = {Learning Text Editor Semantics by Analogy},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801612},
doi = {10.1145/800045.801612},
abstract = { This paper presents a cognitive model for one aspect of how novices learn text editors—the acquisition of procedural skill by problem solving in problem spaces and the use of analogy for building a representation of the semantics of text-editor commands (which we call operators). Protocol data of computer-naive subjects learning the EMACS text editor suggests that they use their knowledge of typewriting to decide which commands to use in performing editing tasks. We propose a formal method of analysis that compares operators in two problem spaces and generates misconceptions. The comparison of these predicted misconceptions with verbal comments, error data, and task difficulty lends support to this analysis. },
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {207–211},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801613,
author = {Halasz, Frank G. and Moran, Thomas P.},
title = {Mental Models and Problem Solving in Using a Calculator},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801613},
doi = {10.1145/800045.801613},
abstract = {It has often been suggested that users understand and reason about complex systems on the basis of a mental model of the system's internal mechanics. This paper describes an empirical study of how mental model knowledge is used in operating a stack calculator. One group of naive users were taught step-by-step procedures for solving typical problems on the calculator. A second group of naive users were taught the same procedures in conjunction with an explicit model of the calculator's stack mechanism. The users then solved problems on the calculator while thinking aloud. Analysis of the performance of these two groups indicates that the model had little effect in routine problem solving situations, but significantly improved performance for novel problems. Analyses of the think-aloud protocols indicate that the users employed five distinct modes of problem solving: skilled methods, problem reduction strategies, a conversion algorithm, model-based problem space search, and methods-based problem space search. Skilled methods, problem reduction strategies and the conversion algorithm were used for solving more routine problems and did not necessarily depend on mental model knowledge. Problem space search was used in the novel problems. For the model users, the states and operations of the stack mechanism served as the problem space to be searched for a problem solution. In contrast, the no-model users employed a less effective search strategy based on the recombination of pieces of known procedures. These results indicate that explicitly teaching naive users an appropriate mental model of a system can provide a psychologically effective and robust basis for operating the machine.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {212–216},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801614,
author = {Robertson, Scott P. and Black, John B.},
title = {Planning Units in Text Editing Behavior},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801614},
doi = {10.1145/800045.801614},
abstract = { The organization of text editing behavior can be characterized by graph structures containing goals, subgoals, goal outcomes, and actions. Here we propose a model to represent the goals and plans of text editor users based on goal-fate analysis (Schank &amp; Abelson, 1977). The representation captures relationships between a user's multiple goals and shows how errors can result from badly formed plans. We discuss some data from a psychological experiment which supports the hypothesis that text editing behavior is chunked into distinct plan units. The cognitive components of pause times between keystrokes were revealed by statistically removing the physical time required between keystrokes. Finally, we suggest how a system which builds goal-fate graphs from keystroke input might be useful in providing specific help information that is keyed to a user's intentions. },
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {217–221},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801615,
author = {Ross, Brian H. and Moran, Thomas P.},
title = {Remindings and Their Effects in Learning a Text Editor},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801615},
doi = {10.1145/800045.801615},
abstract = {How can learning in text-editing be characterized? Much recent work has focused on the use of analogies from prior experience. In this paper, we investigate the retrievals of earlier experiences within the editor and how they might be used by analogy to accomplish the task and learn the editor. An experiment is presented that demonstrates the effects of these “remindings” on performance. In addition, some possible determinants of these remindings are investigated. This experiment points out the need to consider not only the general form of instruction, but also the specifics of the instructional sequence as well. Irrelevant aspects of the task may have strong effects on performance. We consider three teaching techniques, designed to take advantage of these effects in different ways.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {222–225},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801616,
author = {Shrager, Jeff and Klahr, David},
title = {Learning in an Instructionless Environment: Observation and Analysis},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801616},
doi = {10.1145/800045.801616},
abstract = {In an instructionless environment, there are neither teachers nor books. The only feedback comes from interaction with the target. All information appears from within the subject or from observation of the environment. In this setting, subjects rely upon experimentation to develop an understanding of the target. They form hypotheses by analogy or inference and test these hypotheses via experiments of calibration, replication, confirmation, exploration, and discrimination.This paper describes subjects' performance in a particular instructionless environment. The target object is a programmable toy robot tank. We use the hypotheses formed by subjects and form of the experiments performed, to assess subjects' knowledge of the system. This knowledge falls into distinguishable categories: syntactic knowledge of the programming language, semantic knowledge of the actions of the device, and model knowledge which addresses the structure of the device. Exemplary selections of our protocols are used to support the various aspects of the learning model.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {226–229},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801617,
author = {Woolf, Beverly and McDonald, David D.},
title = {Human-Computer Discourse in the Design of a PASCAL Tutor},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801617},
doi = {10.1145/800045.801617},
abstract = {An effective human-computer discourse system requires more than a clever grammar or a rich knowledge base. It needs knowledge about the user and his understanding of the domain in order to produce a relevant and coherent discourse. We describe MENO, a prototype tutor for elementary PASCAL, which uses a set of speech patterns modelled after complex human discourse and a richly annotated knowledge base to produce a flexible interactive system for the user.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {230–234},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801618,
author = {Kahney, Hank},
title = {What Do Novice Programmers Know about Recursion},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801618},
doi = {10.1145/800045.801618},
abstract = {Recent research into differences between novice and expert computer programmers has provided evidence that experts know more than novices, and what they know is better organized. The conclusion is only as interesting as it is intuitive. This paper reports an experiment which was designed to determine precisely what novice programmers understand about the behaviour of recursive procedures, and exactly how their understanding differs from an expert's understanding of the process. The results show that different novices understand, or misunderstand, different things. Implications of the findings are discussed with respect to other research into novice and expert programming performance.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {235–239},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801619,
author = {Soloway, Elliot and Ehrlich, Kate and Black, John B.},
title = {Beyond Numbers: Don't Ask “How Many” ... Ask “Why”},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801619},
doi = {10.1145/800045.801619},
abstract = {While programmers may differ in their assessment of the comprehensibility of a program, there are nonetheless some clear cut cases of programs that are truly difficult to understand. In this paper, we analyze three programs—two of which are relatively incomprehensible—using Halstead's Volume Metric, Propositional Analysis and Plan Analysis. We argue that only Plan Analysis provides a satisfactory explanation for why the programs in question differ with respect to understandability. Moreover, we suggest that a qualitative analysis, such as provided by Plan Analysis, is the desired type of evaluation: rather than simply providing a numerical ranking for programs, the qualitative analysis can pinpoint the troublesome area in the code and provide prescriptive information for correcting the difficulty.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {240–246},
numpages = {7},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801620,
author = {Molzberger, Peter},
title = {Aesthetics and Programming},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801620},
doi = {10.1145/800045.801620},
abstract = {The paper at hand is based on interviews with a total of eight so-called "superprogrammers", software people, who show exceptional performance quantitatively as well as qualitatively. It becomes apparent that these people do not experience programming as a purely rational activity, but that for them it possesses strong intuitive components.Programs are visualized wholistically as three-dimensional structures. In this, aesthetics plays a special part: the structure must please optically, be elegant—then it is functionally acceptable. Logical mistakes manifest themselves as interfering with this aesthetics.The author suggests that in the area of software as well there is something like the absolute beautiful: perfect solutions with a maximum of transparence beyond all rivaling design parameters. He has a feeling that the faculties described in this paper are widespread and may open up a totally new dimension in programming.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {247–250},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801621,
author = {Baecker, Ronald and Marcus, Aaron},
title = {On Enhancing the Interface to the Source Code of Computer Programs},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801621},
doi = {10.1145/800045.801621},
abstract = { This paper addresses issues in the human factors of computer program documentation. We develop a framework for research on enhancing the interface to the source code of computer programs through designing and automating the production of effective typeset representations of the source text. Principles underlying the design research and examples of sample production are presented.  This work was supported by the U.S. Defense Advanced Research Projects Agency under DARPA Order 4469. We are grateful for valued assistance to the other members of the research team, Michael Arent, Design Director, Aaron Marcus and Associates, and Paul Breslin, John Jackson, Allen McIntosh, and Christopher Sturgess, Human Computing Resources Corporation, and to Trigraph Typesetters, Toronto. },
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {251–255},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801622,
author = {Boehm-Davis, Deborah A. and Fregly, Andrew M.},
title = {Documentation of Concurrent Programs},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801622},
doi = {10.1145/800045.801622},
abstract = {A complete software package always includes documentation. Although its importance is often overlooked, documentation may be the only source of program design information. Major tasks in the software life cycle, such as design, coding, testing and maintenance, are often performed by different individuals. Lientz and Swanson (1979) found that, typically, only about half of a software system's maintenance personnel had been involved in its development. Poor documentation techniques can, therefore, dramatically increase labor costs throughout the labor intensive software life cycle by making both development and maintenance tasks more difficult.Recent research in this area (Boehm-Davis, Sheppard, &amp; Bailey, 1982; Sheppard, Kruesi, &amp; Bailey, in press; Sheppard, Kruesi, &amp; Curtis, 1981) has been directed toward determining performance on a set of software tasks as a function of the type of documentation. In these studies, programmer performance was examined on comprehension, coding, debugging, and modification tasks as a function of the type of documentation provided. The documentation formats were constructed from the factorial combination of three types of symbology with three types of spatial arrangement. These formats were chosen because they represent the primary dimensions for categorizing the way in which available documentation aids configure the information they present to programmers (Jones, 1979). The three types of symbology in which information was presented consisted of normal English, abbreviated English (such as program design language), and ideograms. The spatial arrangements of the information used in these experiments were sequential, branching, and hierarchical. While each of the four tasks pursued in this research produced slightly different results, there was a general trend towards the superiority of succinct symbology and a branching spatial arrangement in each.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {256–261},
numpages = {6},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801623,
author = {Price, Lynne A. and Cordova, Carlos A.},
title = {Use of Mouse Buttons},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801623},
doi = {10.1145/800045.801623},
abstract = { Two experimental tasks were designed to test use of multiple-button mice. In the first, number of errors made and time to complete subtasks were measured as subjects attempted to depress one, two, or three buttons under three sets of conditions. In the second, subjects were asked to indicate true or false either by pressing one of two different buttons or by clicking a single button one or two times. People tended to be faster and more accurate using different buttons than different numbers of clicks. },
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {262–266},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801624,
author = {Rollins, A. and Constantine, B. and Baker, S.},
title = {Speech Recognition at Two Field Sites},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801624},
doi = {10.1145/800045.801624},
abstract = {The performance of two speech recognition systems installed at two field sites was analyzed. The speech systems were part of larger computer systems that were performing real functions in industrial environments. The two sites appeared to be polarized in terms of expected suitability for speech recognition. The variables looked at included task complexity, memory load, requirements for verification and error correction, vocabulary and syntax, microphone, operator experience and complexity of host computer software. Accuracy and throughput were measured for the speech recognition system at each site. The same measurements were made for keyboard entry. Operator differences account for most of the variance in results. Accuracy with voice input was higher than with keyboard for most operators. The most accurate operators with keyboard also tended to be the most accurate with voice. Throughput data appears more sensitive to individual differences in dealing with voice input, although the throughput data was clouded by slow host system response times overall. The discussion suggests that one to one replacement of keyboard with voice overlooks some possible advantages of voice. It is also possible to find operators who work well with voice. For those who do not work well with voice, the problems appear to be related to general work habits and attitude, rather than to specific difficulties with speech.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {267–273},
numpages = {7},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801625,
author = {Br\"{a}uninger, U. and Grandjean, E.},
title = {Lighting Characteristics of Visual Display Terminals from an Ergonomic Point of View},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801625},
doi = {10.1145/800045.801625},
abstract = {Measuring procedures were developed to assess those lighting characteristics of VDTs which are of importance for visual comfort and for legibility: Luminance oscillation, sharpness, contrasts, stability and dimensions of characters as well as reflections on the display surfaces. 30 different VDT models of various European and US manufacturers disclosed great differences, indicating a big potential for improving the ergonomic qualities of VDTs.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {274–276},
numpages = {3},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801626,
author = {Magers, Celeste S.},
title = {An Experimental Evaluation of On-Line HELP for Non-Programmers},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801626},
doi = {10.1145/800045.801626},
abstract = {An interactive computer system was made easier to learn for non-programmers by modifying the on-line HELP and error messages of a system designed primarily for programmers. The modifications included supplementing the existing HELP command with a HELP key, making the content of HELP and error messages more concrete, responding to command synonyms, and more. The systems were evaluated in a between-groups experiment in which office workers with no programming experience were asked to perform a typical office task using one of the unfamiliar interactive computer systems. The results of the experiment supported the inclusion of the modifications. Non-programmers using the modified system completed the computer task in less time, with greater accuracy, and with better resulting attitudes than those who used the system designed primarily for programmers.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {277–281},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801627,
author = {O'Malley, C. and Smolensky, P. and Bannon, L. and Conway, E. and Graham, J. and Sokolov, J. and Monty, M. L.},
title = {A Proposal for User Centered System Documentation},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801627},
doi = {10.1145/800045.801627},
abstract = {This paper outlines a set of proposals for the development of system documentation based on an analysis of user needs. It is suggested that existing documentation is not sensitive enough to the variety of levels of user expertise, nor to the variety of contexts in which on-line help is required. We outline three specific proposals for fulfilling these needs: a quick reference facility, a command-line database, and a facility for full explanation and instruction, and suggest a number of ways in which users might access these facilities. Finally, we suggest a way of combining these facilities into an integrated structured manual, offering more effective user support than is currently provided.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {282–285},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801628,
author = {Mantei, Marilyn and Haskell, Nancy},
title = {Autobiography of a First-Time Discretionary Microcomputer User},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801628},
doi = {10.1145/800045.801628},
abstract = {Research in the area of human-computer interaction has typically concentrated on hardware and software design characteristics which increase the usability of the system, or the effectiveness of the relationship between the user and the system in the accomplishment of a task (Bennett, 1979).Few of these studies have concentrated on documentation. This is striking since the documentation of a computer system is a major portion of the user's learning experience with the system and also the primary interface when difficulties with the system occur. There is a growing market of users who are expected to learn how to use a computer system solely by reading the documentation, namely, the personal computer users. The number of privately authored books on “how to survive the personal computer experience” bespeak both the growing number of such users and the inadequacy of the documentation provided by the vendors.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {286–290},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801629,
title = {Keyword Index to Titles},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801629},
doi = {10.1145/800045.801629},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {291–294},
numpages = {4},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/800045.801630,
title = {Author Index},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801630},
doi = {10.1145/800045.801630},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {295},
numpages = {1},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

