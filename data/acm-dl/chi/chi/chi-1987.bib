@inproceedings{10.1145/29933.30852,
author = {Kitakaze, Seiji and Kasahara, Yutaka},
title = {Designing Optimum CRT Text Blinking Video Image Presentation},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30852},
doi = {10.1145/29933.30852},
abstract = {A reference scale has been established to assist in the determination of optimum text blinking times for portions of video image texts being presented on CRT display systems. Optimum text blinking time herein is considered to be that time which most effectively catches and holds viewer attention and quickens his understanding of message import. Three experiments involving questions of the psychology of blinking time were conducted. The first experiment examined subjects' preconceived notions of optimum blinking time, i.e. what they imagined, within their own minds, such times would be for specific text portions. The second experiment determined the gap between those preconceived notions and the subjects' changed concepts of optimum blinking times, based on their experience of visual  trials. The third experiment applied a scale of blinking times, based on the experience gained in the second experiment, to a new set of subjects in order to further refine our understanding of optimum intervals. For the portions of text used here, optimum blinking times centered about 1.0 second.Moreover, through an adaptation to the video image presentation system, the effectiveness of the optimum text blinking times and the psychological scale was confirmed.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {1–6},
numpages = {6},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30852,
author = {Kitakaze, Seiji and Kasahara, Yutaka},
title = {Designing Optimum CRT Text Blinking Video Image Presentation},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30852},
doi = {10.1145/30851.30852},
abstract = {A reference scale has been established to assist in the determination of optimum text blinking times for portions of video image texts being presented on CRT display systems. Optimum text blinking time herein is considered to be that time which most effectively catches and holds viewer attention and quickens his understanding of message import. Three experiments involving questions of the psychology of blinking time were conducted. The first experiment examined subjects' preconceived notions of optimum blinking time, i.e. what they imagined, within their own minds, such times would be for specific text portions. The second experiment determined the gap between those preconceived notions and the subjects' changed concepts of optimum blinking times, based on their experience of visual  trials. The third experiment applied a scale of blinking times, based on the experience gained in the second experiment, to a new set of subjects in order to further refine our understanding of optimum intervals. For the portions of text used here, optimum blinking times centered about 1.0 second.Moreover, through an adaptation to the video image presentation system, the effectiveness of the optimum text blinking times and the psychological scale was confirmed.},
journal = {SIGCHI Bull.},
month = may,
pages = {1–6},
numpages = {6}
}

@article{10.1145/1165387.30852,
author = {Kitakaze, Seiji and Kasahara, Yutaka},
title = {Designing Optimum CRT Text Blinking Video Image Presentation},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30852},
doi = {10.1145/1165387.30852},
abstract = {A reference scale has been established to assist in the determination of optimum text blinking times for portions of video image texts being presented on CRT display systems. Optimum text blinking time herein is considered to be that time which most effectively catches and holds viewer attention and quickens his understanding of message import. Three experiments involving questions of the psychology of blinking time were conducted. The first experiment examined subjects' preconceived notions of optimum blinking time, i.e. what they imagined, within their own minds, such times would be for specific text portions. The second experiment determined the gap between those preconceived notions and the subjects' changed concepts of optimum blinking times, based on their experience of visual  trials. The third experiment applied a scale of blinking times, based on the experience gained in the second experiment, to a new set of subjects in order to further refine our understanding of optimum intervals. For the portions of text used here, optimum blinking times centered about 1.0 second.Moreover, through an adaptation to the video image presentation system, the effectiveness of the optimum text blinking times and the psychological scale was confirmed.},
journal = {SIGCHI Bull.},
month = may,
pages = {1–6},
numpages = {6}
}

@inproceedings{10.1145/29933.30853,
author = {Gould, John D. and Alfaro, Lizette and Finn, Rich and Haupt, Brian and Minuto, Angela},
title = {Why Reading Was Slower from CRT Displays than from Paper},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30853},
doi = {10.1145/29933.30853},
abstract = {Experiments, including our own (Gould et al., 1982; 1984; 1986), have shown that people read more slowly from CRT displays than from paper. Here we summarize results from a few of our fifteen experiments that have led us to conclude that the explanation centers on the image quality of the CRT characters. Reading speeds equivalent to those on paper were found when the CRT displays contained character fonts that resembled those on paper (rather than dot matrix fonts, for example), had a polarity of dark characters on a light background, were anti-aliased (e.g., contained grey level), and were shown on displays with relatively high resolution (e.g., 1000 x 800). Each of these variables probably contributes something to the improvement, but the trade-offs have not been determined. Other general explanations for the reading speed difference that can be excluded include some inherent defect in CRT technology itself or personal variables such as age, experience, or familiarity at reading from CRT displays.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {7–11},
numpages = {5},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30853,
author = {Gould, John D. and Alfaro, Lizette and Finn, Rich and Haupt, Brian and Minuto, Angela},
title = {Why Reading Was Slower from CRT Displays than from Paper},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30853},
doi = {10.1145/30851.30853},
abstract = {Experiments, including our own (Gould et al., 1982; 1984; 1986), have shown that people read more slowly from CRT displays than from paper. Here we summarize results from a few of our fifteen experiments that have led us to conclude that the explanation centers on the image quality of the CRT characters. Reading speeds equivalent to those on paper were found when the CRT displays contained character fonts that resembled those on paper (rather than dot matrix fonts, for example), had a polarity of dark characters on a light background, were anti-aliased (e.g., contained grey level), and were shown on displays with relatively high resolution (e.g., 1000 x 800). Each of these variables probably contributes something to the improvement, but the trade-offs have not been determined. Other general explanations for the reading speed difference that can be excluded include some inherent defect in CRT technology itself or personal variables such as age, experience, or familiarity at reading from CRT displays.},
journal = {SIGCHI Bull.},
month = may,
pages = {7–11},
numpages = {5}
}

@article{10.1145/1165387.30853,
author = {Gould, John D. and Alfaro, Lizette and Finn, Rich and Haupt, Brian and Minuto, Angela},
title = {Why Reading Was Slower from CRT Displays than from Paper},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30853},
doi = {10.1145/1165387.30853},
abstract = {Experiments, including our own (Gould et al., 1982; 1984; 1986), have shown that people read more slowly from CRT displays than from paper. Here we summarize results from a few of our fifteen experiments that have led us to conclude that the explanation centers on the image quality of the CRT characters. Reading speeds equivalent to those on paper were found when the CRT displays contained character fonts that resembled those on paper (rather than dot matrix fonts, for example), had a polarity of dark characters on a light background, were anti-aliased (e.g., contained grey level), and were shown on displays with relatively high resolution (e.g., 1000 x 800). Each of these variables probably contributes something to the improvement, but the trade-offs have not been determined. Other general explanations for the reading speed difference that can be excluded include some inherent defect in CRT technology itself or personal variables such as age, experience, or familiarity at reading from CRT displays.},
journal = {SIGCHI Bull.},
month = may,
pages = {7–11},
numpages = {5}
}

@inproceedings{10.1145/29933.30854,
author = {Booth, Kellogg S. and Bryden, M. Philip and Cowan, Wiliam B. and Morgan, Michael F. and Plante, Brian L.},
title = {On the Parameters of Human Visual Performance: An Investigation of the Benefits of Antialiasing},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30854},
doi = {10.1145/29933.30854},
abstract = {A two-part experiment was conducted to investigate the effects of aliasing artifacts and screen resolution on a simple visual recognition task. The results indicate that in many cases far less realism may be necessary in synthetic computer-generated imagery than is often assumed in the literature. The first part of the experiment comprised a subjective rating of image quality, the second part measured task effectiveness of image quality. In the second part subjects were asked to discriminate between images of two types of objects built from cubes, similar to objects used in experiments involving mental rotation.At higher resolutions the elimination of aliasing artifacts did not significantly improve subjects' performance. At intermediate and low resolutions, comparable to what might be used for iconic menus, the reduction in aliasing artifacts resulted in improved performance. The subjective ratings indicate that for both high and low resolution the elimination of aliasing artifacts does not improve “quality,” whereas images rendered at intermediate resolutions are significantly degraded by aliasing artifacts to the extent that antialiasing improves the subjective rating.An interpretation of these results is given in the context of an ongoing research program aimed at identifying the parameters of real-time human performance for graphics workstations.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {13–19},
numpages = {7},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30854,
author = {Booth, Kellogg S. and Bryden, M. Philip and Cowan, Wiliam B. and Morgan, Michael F. and Plante, Brian L.},
title = {On the Parameters of Human Visual Performance: An Investigation of the Benefits of Antialiasing},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30854},
doi = {10.1145/30851.30854},
abstract = {A two-part experiment was conducted to investigate the effects of aliasing artifacts and screen resolution on a simple visual recognition task. The results indicate that in many cases far less realism may be necessary in synthetic computer-generated imagery than is often assumed in the literature. The first part of the experiment comprised a subjective rating of image quality, the second part measured task effectiveness of image quality. In the second part subjects were asked to discriminate between images of two types of objects built from cubes, similar to objects used in experiments involving mental rotation.At higher resolutions the elimination of aliasing artifacts did not significantly improve subjects' performance. At intermediate and low resolutions, comparable to what might be used for iconic menus, the reduction in aliasing artifacts resulted in improved performance. The subjective ratings indicate that for both high and low resolution the elimination of aliasing artifacts does not improve “quality,” whereas images rendered at intermediate resolutions are significantly degraded by aliasing artifacts to the extent that antialiasing improves the subjective rating.An interpretation of these results is given in the context of an ongoing research program aimed at identifying the parameters of real-time human performance for graphics workstations.},
journal = {SIGCHI Bull.},
month = may,
pages = {13–19},
numpages = {7}
}

@article{10.1145/1165387.30854,
author = {Booth, Kellogg S. and Bryden, M. Philip and Cowan, Wiliam B. and Morgan, Michael F. and Plante, Brian L.},
title = {On the Parameters of Human Visual Performance: An Investigation of the Benefits of Antialiasing},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30854},
doi = {10.1145/1165387.30854},
abstract = {A two-part experiment was conducted to investigate the effects of aliasing artifacts and screen resolution on a simple visual recognition task. The results indicate that in many cases far less realism may be necessary in synthetic computer-generated imagery than is often assumed in the literature. The first part of the experiment comprised a subjective rating of image quality, the second part measured task effectiveness of image quality. In the second part subjects were asked to discriminate between images of two types of objects built from cubes, similar to objects used in experiments involving mental rotation.At higher resolutions the elimination of aliasing artifacts did not significantly improve subjects' performance. At intermediate and low resolutions, comparable to what might be used for iconic menus, the reduction in aliasing artifacts resulted in improved performance. The subjective ratings indicate that for both high and low resolution the elimination of aliasing artifacts does not improve “quality,” whereas images rendered at intermediate resolutions are significantly degraded by aliasing artifacts to the extent that antialiasing improves the subjective rating.An interpretation of these results is given in the context of an ongoing research program aimed at identifying the parameters of real-time human performance for graphics workstations.},
journal = {SIGCHI Bull.},
month = may,
pages = {13–19},
numpages = {7}
}

@inproceedings{10.1145/29933.30855,
author = {Barnard, Phil and Wilson, Michael and MacLean, Allan},
title = {Approximate Modelling of Cognitive Activity: Towards an Expert System Design Aid},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30855},
doi = {10.1145/29933.30855},
abstract = {Constructs from theoretical psychology can be used to decompose the representational and processing resources of cognition. The decomposition supports “cognitive task analysis” through which user performance can be related to the functioning of resources. Such functional relationships have been formalised and embodied in an expert system. This builds approximate models which describe cognitive activity associated with the execution of dialogue tasks. Attributes of these “cognitive task models” can be used to predict likely properties of user performance.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {21–26},
numpages = {6},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30855,
author = {Barnard, Phil and Wilson, Michael and MacLean, Allan},
title = {Approximate Modelling of Cognitive Activity: Towards an Expert System Design Aid},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30855},
doi = {10.1145/30851.30855},
abstract = {Constructs from theoretical psychology can be used to decompose the representational and processing resources of cognition. The decomposition supports “cognitive task analysis” through which user performance can be related to the functioning of resources. Such functional relationships have been formalised and embodied in an expert system. This builds approximate models which describe cognitive activity associated with the execution of dialogue tasks. Attributes of these “cognitive task models” can be used to predict likely properties of user performance.},
journal = {SIGCHI Bull.},
month = may,
pages = {21–26},
numpages = {6}
}

@article{10.1145/1165387.30855,
author = {Barnard, Phil and Wilson, Michael and MacLean, Allan},
title = {Approximate Modelling of Cognitive Activity: Towards an Expert System Design Aid},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30855},
doi = {10.1145/1165387.30855},
abstract = {Constructs from theoretical psychology can be used to decompose the representational and processing resources of cognition. The decomposition supports “cognitive task analysis” through which user performance can be related to the functioning of resources. Such functional relationships have been formalised and embodied in an expert system. This builds approximate models which describe cognitive activity associated with the execution of dialogue tasks. Attributes of these “cognitive task models” can be used to predict likely properties of user performance.},
journal = {SIGCHI Bull.},
month = may,
pages = {21–26},
numpages = {6}
}

@inproceedings{10.1145/29933.30856,
author = {Polson, Peter G. and Bovair, Susan and Kieras, David},
title = {Transfer between Text Editors},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30856},
doi = {10.1145/29933.30856},
abstract = {This paper describes a successful test of a quantitative model that accounts for large positive transfer effects between similar screen editors, between different line editors and from line editors to a screen editor, and between text and graphic editors. The model is tested in an experiment using two very similar full-screen text-editors differing only in the structure of their editing commands, verb-noun vs noun-verb. Quantitative predictions for training time were derived from a production system model based on the Polson and Kieras (1985) model of text editing.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {27–32},
numpages = {6},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30856,
author = {Polson, Peter G. and Bovair, Susan and Kieras, David},
title = {Transfer between Text Editors},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30856},
doi = {10.1145/30851.30856},
abstract = {This paper describes a successful test of a quantitative model that accounts for large positive transfer effects between similar screen editors, between different line editors and from line editors to a screen editor, and between text and graphic editors. The model is tested in an experiment using two very similar full-screen text-editors differing only in the structure of their editing commands, verb-noun vs noun-verb. Quantitative predictions for training time were derived from a production system model based on the Polson and Kieras (1985) model of text editing.},
journal = {SIGCHI Bull.},
month = may,
pages = {27–32},
numpages = {6}
}

@article{10.1145/1165387.30856,
author = {Polson, Peter G. and Bovair, Susan and Kieras, David},
title = {Transfer between Text Editors},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30856},
doi = {10.1145/1165387.30856},
abstract = {This paper describes a successful test of a quantitative model that accounts for large positive transfer effects between similar screen editors, between different line editors and from line editors to a screen editor, and between text and graphic editors. The model is tested in an experiment using two very similar full-screen text-editors differing only in the structure of their editing commands, verb-noun vs noun-verb. Quantitative predictions for training time were derived from a production system model based on the Polson and Kieras (1985) model of text editing.},
journal = {SIGCHI Bull.},
month = may,
pages = {27–32},
numpages = {6}
}

@inproceedings{10.1145/29933.30857,
author = {John, Bonnie E. and Newell, Allen},
title = {Predicting the Time to Recall Computer Command Abbreviations},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30857},
doi = {10.1145/29933.30857},
abstract = {A GOMS theory of stimulus-response compatibility is shown to predict response-time performance on a command/abbreviation encoding task. Working with parameters that were set by an earlier study and which have rational, task-meaningful interpretations as mapping, motor, perception and retrieval operators, zero-parameter predictions were made that fit the observed performance with r2 = 0.776 (p&lt;0.05). The reasonableness of the parameters, the algorithms used to generate the predictions, and the weighting assumption used to combine algorithms into a single prediction are discussed.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {33–40},
numpages = {8},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.30857,
author = {John, Bonnie E. and Newell, Allen},
title = {Predicting the Time to Recall Computer Command Abbreviations},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30857},
doi = {10.1145/1165387.30857},
abstract = {A GOMS theory of stimulus-response compatibility is shown to predict response-time performance on a command/abbreviation encoding task. Working with parameters that were set by an earlier study and which have rational, task-meaningful interpretations as mapping, motor, perception and retrieval operators, zero-parameter predictions were made that fit the observed performance with r2 = 0.776 (p&lt;0.05). The reasonableness of the parameters, the algorithms used to generate the predictions, and the weighting assumption used to combine algorithms into a single prediction are discussed.},
journal = {SIGCHI Bull.},
month = may,
pages = {33–40},
numpages = {8}
}

@article{10.1145/30851.30857,
author = {John, Bonnie E. and Newell, Allen},
title = {Predicting the Time to Recall Computer Command Abbreviations},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30857},
doi = {10.1145/30851.30857},
abstract = {A GOMS theory of stimulus-response compatibility is shown to predict response-time performance on a command/abbreviation encoding task. Working with parameters that were set by an earlier study and which have rational, task-meaningful interpretations as mapping, motor, perception and retrieval operators, zero-parameter predictions were made that fit the observed performance with r2 = 0.776 (p&lt;0.05). The reasonableness of the parameters, the algorithms used to generate the predictions, and the weighting assumption used to combine algorithms into a single prediction are discussed.},
journal = {SIGCHI Bull.},
month = may,
pages = {33–40},
numpages = {8}
}

@inproceedings{10.1145/29933.30858,
author = {Aucella, Arlene and Kinkead, Robin and Wichansky, Anna and Shmandt, Chris},
title = {Voice: Technology Searching for Communication Needs},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30858},
doi = {10.1145/29933.30858},
abstract = {Voice technology is just beginning to gain a foothold in the information processing world. Applications such as voice mail, credit verification, order entry and airline reservation systems are slowly being introduced. Critics of voice systems frequently point out their limitations with little understanding of their power or advantages. One key determinant of the success or failure of voice systems is the USER INTERFACE. It is important that the dialogue structure, prompts, system feedback and error messages be designed based on user input, testing and evaluation.Another key determinant of the success of voice systems is the careful matching of users, tasks and environment to the technology. Voice technology is often broken down into 3 major categories.Speech compression. Processing allows analog patterns of human speech to be digitized. Once stored in digital form, the information can be transmitted and played back.Common Applications: Voice Mail, Voice Annotation.Text-to-Speech. Processing allows computer-stored text to be translated and retrieved via a “synthesized” voice.Common applications: Remote retrieval of information (E-Mail, Calendar Appointments), Aids to Visually or Vocally Handicapped.Speech Recognition. Processing allows analog patterns of human speech to be translated into their text-based equivalent or into computer commands.Common Applications: Data Entry, Voice Activated Typewriter.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {41–44},
numpages = {4},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30858,
author = {Aucella, Arlene and Kinkead, Robin and Wichansky, Anna and Shmandt, Chris},
title = {Voice: Technology Searching for Communication Needs},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30858},
doi = {10.1145/30851.30858},
abstract = {Voice technology is just beginning to gain a foothold in the information processing world. Applications such as voice mail, credit verification, order entry and airline reservation systems are slowly being introduced. Critics of voice systems frequently point out their limitations with little understanding of their power or advantages. One key determinant of the success or failure of voice systems is the USER INTERFACE. It is important that the dialogue structure, prompts, system feedback and error messages be designed based on user input, testing and evaluation.Another key determinant of the success of voice systems is the careful matching of users, tasks and environment to the technology. Voice technology is often broken down into 3 major categories.Speech compression. Processing allows analog patterns of human speech to be digitized. Once stored in digital form, the information can be transmitted and played back.Common Applications: Voice Mail, Voice Annotation.Text-to-Speech. Processing allows computer-stored text to be translated and retrieved via a “synthesized” voice.Common applications: Remote retrieval of information (E-Mail, Calendar Appointments), Aids to Visually or Vocally Handicapped.Speech Recognition. Processing allows analog patterns of human speech to be translated into their text-based equivalent or into computer commands.Common Applications: Data Entry, Voice Activated Typewriter.},
journal = {SIGCHI Bull.},
month = may,
pages = {41–44},
numpages = {4}
}

@article{10.1145/1165387.30858,
author = {Aucella, Arlene and Kinkead, Robin and Wichansky, Anna and Shmandt, Chris},
title = {Voice: Technology Searching for Communication Needs},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30858},
doi = {10.1145/1165387.30858},
abstract = {Voice technology is just beginning to gain a foothold in the information processing world. Applications such as voice mail, credit verification, order entry and airline reservation systems are slowly being introduced. Critics of voice systems frequently point out their limitations with little understanding of their power or advantages. One key determinant of the success or failure of voice systems is the USER INTERFACE. It is important that the dialogue structure, prompts, system feedback and error messages be designed based on user input, testing and evaluation.Another key determinant of the success of voice systems is the careful matching of users, tasks and environment to the technology. Voice technology is often broken down into 3 major categories.Speech compression. Processing allows analog patterns of human speech to be digitized. Once stored in digital form, the information can be transmitted and played back.Common Applications: Voice Mail, Voice Annotation.Text-to-Speech. Processing allows computer-stored text to be translated and retrieved via a “synthesized” voice.Common applications: Remote retrieval of information (E-Mail, Calendar Appointments), Aids to Visually or Vocally Handicapped.Speech Recognition. Processing allows analog patterns of human speech to be translated into their text-based equivalent or into computer commands.Common Applications: Data Entry, Voice Activated Typewriter.},
journal = {SIGCHI Bull.},
month = may,
pages = {41–44},
numpages = {4}
}

@inproceedings{10.1145/29933.30859,
author = {Halasz, Frank G. and Moran, Thomas P. and Trigg, Randall H.},
title = {Notecards in a Nutshell},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30859},
doi = {10.1145/29933.30859},
abstract = {NoteCards is an extensible environment designed to help people formulate, structure, compare, and manage ideas. NoteCards provides the user with a “semantic network” of electronic notecards interconnected by typed links. The system provides tools to organize, manage, and display the structure of the network, as well as a set of methods and protocols for creating programs to manipulate the information in the network. NoteCards is currently being used by more than 50 people engaged in idea processing tasks ranging from writing research papers through designing parts for photocopiers.In this paper we briefly describe NoteCards and the conceptualization of idea processing tasks that underlies its design. We then describe the NoteCards user community and several prototypical NoteCards applications. Finally, we discuss what we have learned about the system's strengths and weaknesses from our observations of the NoteCards user community.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {45–52},
numpages = {8},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.30859,
author = {Halasz, Frank G. and Moran, Thomas P. and Trigg, Randall H.},
title = {Notecards in a Nutshell},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30859},
doi = {10.1145/1165387.30859},
abstract = {NoteCards is an extensible environment designed to help people formulate, structure, compare, and manage ideas. NoteCards provides the user with a “semantic network” of electronic notecards interconnected by typed links. The system provides tools to organize, manage, and display the structure of the network, as well as a set of methods and protocols for creating programs to manipulate the information in the network. NoteCards is currently being used by more than 50 people engaged in idea processing tasks ranging from writing research papers through designing parts for photocopiers.In this paper we briefly describe NoteCards and the conceptualization of idea processing tasks that underlies its design. We then describe the NoteCards user community and several prototypical NoteCards applications. Finally, we discuss what we have learned about the system's strengths and weaknesses from our observations of the NoteCards user community.},
journal = {SIGCHI Bull.},
month = may,
pages = {45–52},
numpages = {8}
}

@article{10.1145/30851.30859,
author = {Halasz, Frank G. and Moran, Thomas P. and Trigg, Randall H.},
title = {Notecards in a Nutshell},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30859},
doi = {10.1145/30851.30859},
abstract = {NoteCards is an extensible environment designed to help people formulate, structure, compare, and manage ideas. NoteCards provides the user with a “semantic network” of electronic notecards interconnected by typed links. The system provides tools to organize, manage, and display the structure of the network, as well as a set of methods and protocols for creating programs to manipulate the information in the network. NoteCards is currently being used by more than 50 people engaged in idea processing tasks ranging from writing research papers through designing parts for photocopiers.In this paper we briefly describe NoteCards and the conceptualization of idea processing tasks that underlies its design. We then describe the NoteCards user community and several prototypical NoteCards applications. Finally, we discuss what we have learned about the system's strengths and weaknesses from our observations of the NoteCards user community.},
journal = {SIGCHI Bull.},
month = may,
pages = {45–52},
numpages = {8}
}

@inproceedings{10.1145/29933.30860,
author = {Card, Stuart K. and Henderson, Austin},
title = {A Multiple, Virtual-Workspace Interface to Support User Task Switching},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30860},
doi = {10.1145/29933.30860},
abstract = {An interface is presented that is designed to help users switch among tasks on which they are concurrently working. Nine desirable properties for such an interface are derived. It is argued that a key constraint to building interfaces that support task switching is that low user-overhead switching among tasks requires a large amount of display space, whereas actual display space is limited. A virtual workspace design is presented that greatly speeds the inevitable task-switching induced window faulting. The resulting interface is presented as a study in theory-based human-interface design. It is shown how in this case theory is important in inspiring a design, but design entailments outside the theory raise new issues that must be faced to make the design viable. These design experiences, in turn, help inspire new theory.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {53–59},
numpages = {7},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.30860,
author = {Card, Stuart K. and Henderson, Austin},
title = {A Multiple, Virtual-Workspace Interface to Support User Task Switching},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30860},
doi = {10.1145/1165387.30860},
abstract = {An interface is presented that is designed to help users switch among tasks on which they are concurrently working. Nine desirable properties for such an interface are derived. It is argued that a key constraint to building interfaces that support task switching is that low user-overhead switching among tasks requires a large amount of display space, whereas actual display space is limited. A virtual workspace design is presented that greatly speeds the inevitable task-switching induced window faulting. The resulting interface is presented as a study in theory-based human-interface design. It is shown how in this case theory is important in inspiring a design, but design entailments outside the theory raise new issues that must be faced to make the design viable. These design experiences, in turn, help inspire new theory.},
journal = {SIGCHI Bull.},
month = may,
pages = {53–59},
numpages = {7}
}

@article{10.1145/30851.30860,
author = {Card, Stuart K. and Henderson, Austin},
title = {A Multiple, Virtual-Workspace Interface to Support User Task Switching},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30860},
doi = {10.1145/30851.30860},
abstract = {An interface is presented that is designed to help users switch among tasks on which they are concurrently working. Nine desirable properties for such an interface are derived. It is argued that a key constraint to building interfaces that support task switching is that low user-overhead switching among tasks requires a large amount of display space, whereas actual display space is limited. A virtual workspace design is presented that greatly speeds the inevitable task-switching induced window faulting. The resulting interface is presented as a study in theory-based human-interface design. It is shown how in this case theory is important in inspiring a design, but design entailments outside the theory raise new issues that must be faced to make the design viable. These design experiences, in turn, help inspire new theory.},
journal = {SIGCHI Bull.},
month = may,
pages = {53–59},
numpages = {7}
}

@inproceedings{10.1145/29933.30861,
author = {Smith, Randall B.},
title = {Experiences with the Alternate Reality Kit: An Example of the Tension between Literalism and Magic},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30861},
doi = {10.1145/29933.30861},
abstract = {This paper presents an overview of the Alternate Reality Kit (ARK), an animated environment for creating interactive simulations. ARK is built upon a physical-world metaphor: all objects have an image, a position, a velocity, and can experience forces. Users manipulate objects with a mouse-operated “hand” which enables them to carry and throw objects, to press buttons, and to operate sliders.The interface features are discussed in light of a general user interface tension between literalism and magic. Literal features are defined to be those that are true to the interface's metaphor. Literal features enhance an interface's learnability. Magical features are defined to be those capabilities that deliberately violate the metaphor in order to provide enhanced functionality. Discussion of each ARK feature includes informal observations of early ARK users, an assessment of the feature's learnability, of its usefulness, and of its position on the magical-literal axis.Even though ARK includes magical features, applications-level users have be trained in a few minutes. Although this paper is about ARK, the tension between literalism and magic raises some interesting questions on its own. Some of these questions are presented briefly in the conclusion.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {61–67},
numpages = {7},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30861,
author = {Smith, Randall B.},
title = {Experiences with the Alternate Reality Kit: An Example of the Tension between Literalism and Magic},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30861},
doi = {10.1145/30851.30861},
abstract = {This paper presents an overview of the Alternate Reality Kit (ARK), an animated environment for creating interactive simulations. ARK is built upon a physical-world metaphor: all objects have an image, a position, a velocity, and can experience forces. Users manipulate objects with a mouse-operated “hand” which enables them to carry and throw objects, to press buttons, and to operate sliders.The interface features are discussed in light of a general user interface tension between literalism and magic. Literal features are defined to be those that are true to the interface's metaphor. Literal features enhance an interface's learnability. Magical features are defined to be those capabilities that deliberately violate the metaphor in order to provide enhanced functionality. Discussion of each ARK feature includes informal observations of early ARK users, an assessment of the feature's learnability, of its usefulness, and of its position on the magical-literal axis.Even though ARK includes magical features, applications-level users have be trained in a few minutes. Although this paper is about ARK, the tension between literalism and magic raises some interesting questions on its own. Some of these questions are presented briefly in the conclusion.},
journal = {SIGCHI Bull.},
month = may,
pages = {61–67},
numpages = {7}
}

@article{10.1145/1165387.30861,
author = {Smith, Randall B.},
title = {Experiences with the Alternate Reality Kit: An Example of the Tension between Literalism and Magic},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30861},
doi = {10.1145/1165387.30861},
abstract = {This paper presents an overview of the Alternate Reality Kit (ARK), an animated environment for creating interactive simulations. ARK is built upon a physical-world metaphor: all objects have an image, a position, a velocity, and can experience forces. Users manipulate objects with a mouse-operated “hand” which enables them to carry and throw objects, to press buttons, and to operate sliders.The interface features are discussed in light of a general user interface tension between literalism and magic. Literal features are defined to be those that are true to the interface's metaphor. Literal features enhance an interface's learnability. Magical features are defined to be those capabilities that deliberately violate the metaphor in order to provide enhanced functionality. Discussion of each ARK feature includes informal observations of early ARK users, an assessment of the feature's learnability, of its usefulness, and of its position on the magical-literal axis.Even though ARK includes magical features, applications-level users have be trained in a few minutes. Although this paper is about ARK, the tension between literalism and magic raises some interesting questions on its own. Some of these questions are presented briefly in the conclusion.},
journal = {SIGCHI Bull.},
month = may,
pages = {61–67},
numpages = {7}
}

@inproceedings{10.1145/29933.30862,
author = {Kane, Richard M. and Yuschik, Matthew},
title = {A Case Example of Human Factors in Product Definition: Needs Finding for a Voice Output Workstation for the Blind},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30862},
doi = {10.1145/29933.30862},
abstract = {Human factors efforts can contribute to product design at every design phase from conception through evaluation of a product in the field. Early human factors involvement has certain advantages. The major advantage is that it can have greater “leverage” by influencing more far-reaching aspects of a product. Input at later design phases, on the other hand, may delay product schedules or require a major re-design effort. Input at earlier stages can diminish these problems. As a case example, a needs finding study for a voice output workstation for the blind is described. Users of these workstations participated in a semi-structured interview to determine their needs. Results identified specific features needed. The findings also indicated that the original scope of the project, word processing, should be broadened to include other applications.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {69–73},
numpages = {5},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.30862,
author = {Kane, Richard M. and Yuschik, Matthew},
title = {A Case Example of Human Factors in Product Definition: Needs Finding for a Voice Output Workstation for the Blind},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30862},
doi = {10.1145/1165387.30862},
abstract = {Human factors efforts can contribute to product design at every design phase from conception through evaluation of a product in the field. Early human factors involvement has certain advantages. The major advantage is that it can have greater “leverage” by influencing more far-reaching aspects of a product. Input at later design phases, on the other hand, may delay product schedules or require a major re-design effort. Input at earlier stages can diminish these problems. As a case example, a needs finding study for a voice output workstation for the blind is described. Users of these workstations participated in a semi-structured interview to determine their needs. Results identified specific features needed. The findings also indicated that the original scope of the project, word processing, should be broadened to include other applications.},
journal = {SIGCHI Bull.},
month = may,
pages = {69–73},
numpages = {5}
}

@article{10.1145/30851.30862,
author = {Kane, Richard M. and Yuschik, Matthew},
title = {A Case Example of Human Factors in Product Definition: Needs Finding for a Voice Output Workstation for the Blind},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30862},
doi = {10.1145/30851.30862},
abstract = {Human factors efforts can contribute to product design at every design phase from conception through evaluation of a product in the field. Early human factors involvement has certain advantages. The major advantage is that it can have greater “leverage” by influencing more far-reaching aspects of a product. Input at later design phases, on the other hand, may delay product schedules or require a major re-design effort. Input at earlier stages can diminish these problems. As a case example, a needs finding study for a voice output workstation for the blind is described. Users of these workstations participated in a semi-structured interview to determine their needs. Results identified specific features needed. The findings also indicated that the original scope of the project, word processing, should be broadened to include other applications.},
journal = {SIGCHI Bull.},
month = may,
pages = {69–73},
numpages = {5}
}

@inproceedings{10.1145/29933.30864,
author = {Ladner, Richard and Day, randy and Gentry, Dennis and Meyer, Karin and Rose, Scott},
title = {A User Interface for Deaf-Blind People (Preliminary Report)},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30864},
doi = {10.1145/29933.30864},
abstract = {A user interface suitable for deaf-blind users is presented and justified. The interface is designed for small paperless Braille displays, large font visual displays, or other low-bandwidth displays. Some of the key properties of the interface are that it uses a hierarchical approach to structure both commands and data, has a small universal command set, and has pervasive editing capability. DBNet, a system employing the user interface, has been built and tested with deaf-blind users. DBNet will provide various communication services to the deaf-blind community including electronic news, mail, and bulletin boards.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {75–80},
numpages = {6},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30864,
author = {Ladner, Richard and Day, randy and Gentry, Dennis and Meyer, Karin and Rose, Scott},
title = {A User Interface for Deaf-Blind People (Preliminary Report)},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30864},
doi = {10.1145/30851.30864},
abstract = {A user interface suitable for deaf-blind users is presented and justified. The interface is designed for small paperless Braille displays, large font visual displays, or other low-bandwidth displays. Some of the key properties of the interface are that it uses a hierarchical approach to structure both commands and data, has a small universal command set, and has pervasive editing capability. DBNet, a system employing the user interface, has been built and tested with deaf-blind users. DBNet will provide various communication services to the deaf-blind community including electronic news, mail, and bulletin boards.},
journal = {SIGCHI Bull.},
month = may,
pages = {81–92},
numpages = {12}
}

@article{10.1145/1165387.30864,
author = {Ladner, Richard and Day, randy and Gentry, Dennis and Meyer, Karin and Rose, Scott},
title = {A User Interface for Deaf-Blind People (Preliminary Report)},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30864},
doi = {10.1145/1165387.30864},
abstract = {A user interface suitable for deaf-blind users is presented and justified. The interface is designed for small paperless Braille displays, large font visual displays, or other low-bandwidth displays. Some of the key properties of the interface are that it uses a hierarchical approach to structure both commands and data, has a small universal command set, and has pervasive editing capability. DBNet, a system employing the user interface, has been built and tested with deaf-blind users. DBNet will provide various communication services to the deaf-blind community including electronic news, mail, and bulletin boards.},
journal = {SIGCHI Bull.},
month = may,
pages = {81–92},
numpages = {12}
}

@inproceedings{10.1145/29933.30863,
author = {Verburg, Gerbrand and Field, Debbie and St. Pierre, Francois and Naumann, Stephen},
title = {Towards Universality of Access: Interfacing Physically Disabled Students to the Icon Educational Microcomputer},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30863},
doi = {10.1145/29933.30863},
abstract = {A micro-processor based Interface Unit and Teacher Utility have been developed at the Hugh MacMillan Medical Centre that will facilitate physically disabled users' access to the Icon educational microcomputer. The Interface Unit allows a variety of alternate input devices to be used with the Icon computer. Evaluations of the use of the Icon by physically disabled students without and with the Interface Unit were completed. The Teacher Utility offers on-line instruction and support for teachers with physically disabled students who have problems accessing the Icon. The design of the Teacher Utility is presented from three perspectives: the teacher, the physically disabled student, and the developers.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {81–92},
numpages = {12},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30863,
author = {Verburg, Gerbrand and Field, Debbie and St. Pierre, Francois and Naumann, Stephen},
title = {Towards Universality of Access: Interfacing Physically Disabled Students to the Icon Educational Microcomputer},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30863},
doi = {10.1145/30851.30863},
abstract = {A micro-processor based Interface Unit and Teacher Utility have been developed at the Hugh MacMillan Medical Centre that will facilitate physically disabled users' access to the Icon educational microcomputer. The Interface Unit allows a variety of alternate input devices to be used with the Icon computer. Evaluations of the use of the Icon by physically disabled students without and with the Interface Unit were completed. The Teacher Utility offers on-line instruction and support for teachers with physically disabled students who have problems accessing the Icon. The design of the Teacher Utility is presented from three perspectives: the teacher, the physically disabled student, and the developers.},
journal = {SIGCHI Bull.},
month = may,
pages = {75–80},
numpages = {6}
}

@article{10.1145/1165387.30863,
author = {Verburg, Gerbrand and Field, Debbie and St. Pierre, Francois and Naumann, Stephen},
title = {Towards Universality of Access: Interfacing Physically Disabled Students to the Icon Educational Microcomputer},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30863},
doi = {10.1145/1165387.30863},
abstract = {A micro-processor based Interface Unit and Teacher Utility have been developed at the Hugh MacMillan Medical Centre that will facilitate physically disabled users' access to the Icon educational microcomputer. The Interface Unit allows a variety of alternate input devices to be used with the Icon computer. Evaluations of the use of the Icon by physically disabled students without and with the Interface Unit were completed. The Teacher Utility offers on-line instruction and support for teachers with physically disabled students who have problems accessing the Icon. The design of the Teacher Utility is presented from three perspectives: the teacher, the physically disabled student, and the developers.},
journal = {SIGCHI Bull.},
month = may,
pages = {75–80},
numpages = {6}
}

@inproceedings{10.1145/29933.30865,
author = {Frye, Douglas and Soloway, Elliot},
title = {Interface Design: A Neglected Issue in Educational Software},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30865},
doi = {10.1145/29933.30865},
abstract = {The user interface is particularly important for educational software because 1) it must provide an entry to the content domain of the program rather than vice versa and 2) it must be sensitive to the general skill and/or developmental level of the user. In spite of these special characteristics, interface design for educational software has been given little attention. This study evaluates a representative interface from arithmetic software now used in the schools. It was found that the interface caused students a large number of difficulties. These difficulties were sufficient to interfere with the instructional effectiveness of the software. Designing interfaces that will benefit educational software will require careful study of the users of these programs along with an in-depth understanding of the domains being taught.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {93–97},
numpages = {5},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30865,
author = {Frye, Douglas and Soloway, Elliot},
title = {Interface Design: A Neglected Issue in Educational Software},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30865},
doi = {10.1145/30851.30865},
abstract = {The user interface is particularly important for educational software because 1) it must provide an entry to the content domain of the program rather than vice versa and 2) it must be sensitive to the general skill and/or developmental level of the user. In spite of these special characteristics, interface design for educational software has been given little attention. This study evaluates a representative interface from arithmetic software now used in the schools. It was found that the interface caused students a large number of difficulties. These difficulties were sufficient to interfere with the instructional effectiveness of the software. Designing interfaces that will benefit educational software will require careful study of the users of these programs along with an in-depth understanding of the domains being taught.},
journal = {SIGCHI Bull.},
month = may,
pages = {93–97},
numpages = {5}
}

@article{10.1145/1165387.30865,
author = {Frye, Douglas and Soloway, Elliot},
title = {Interface Design: A Neglected Issue in Educational Software},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30865},
doi = {10.1145/1165387.30865},
abstract = {The user interface is particularly important for educational software because 1) it must provide an entry to the content domain of the program rather than vice versa and 2) it must be sensitive to the general skill and/or developmental level of the user. In spite of these special characteristics, interface design for educational software has been given little attention. This study evaluates a representative interface from arithmetic software now used in the schools. It was found that the interface caused students a large number of difficulties. These difficulties were sufficient to interfere with the instructional effectiveness of the software. Designing interfaces that will benefit educational software will require careful study of the users of these programs along with an in-depth understanding of the domains being taught.},
journal = {SIGCHI Bull.},
month = may,
pages = {93–97},
numpages = {5}
}

@inproceedings{10.1145/29933.30866,
author = {Neal, Lisa Rubin},
title = {Cognition-Sensitive Design and User Modeling for Syntax-Directed Editors},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30866},
doi = {10.1145/29933.30866},
abstract = {Syntax-directed editors were created with the intent of aiding in and improving the programming process. Despite their potential, they have not been successful, as evidenced by limited use. In general, they are perceived as being too difficult to use and the benefits of their use are outweighed by the difficulties.We believe that the cognitive styles and skills of the users have been ignored in the design process. In this paper we present some of our initial results which show that cognitive styles vary over a significant spectrum and that their consideration in the design of a syntax-directed editor will result in an intelligent tool that will be right for the cognitive skills and expertise of an individual user. In turn, an approach to design that takes cognitive variation into account would support the construction of syntax-directed editors which are successfully used.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {99–102},
numpages = {4},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30866,
author = {Neal, Lisa Rubin},
title = {Cognition-Sensitive Design and User Modeling for Syntax-Directed Editors},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30866},
doi = {10.1145/30851.30866},
abstract = {Syntax-directed editors were created with the intent of aiding in and improving the programming process. Despite their potential, they have not been successful, as evidenced by limited use. In general, they are perceived as being too difficult to use and the benefits of their use are outweighed by the difficulties.We believe that the cognitive styles and skills of the users have been ignored in the design process. In this paper we present some of our initial results which show that cognitive styles vary over a significant spectrum and that their consideration in the design of a syntax-directed editor will result in an intelligent tool that will be right for the cognitive skills and expertise of an individual user. In turn, an approach to design that takes cognitive variation into account would support the construction of syntax-directed editors which are successfully used.},
journal = {SIGCHI Bull.},
month = may,
pages = {99–102},
numpages = {4}
}

@article{10.1145/1165387.30866,
author = {Neal, Lisa Rubin},
title = {Cognition-Sensitive Design and User Modeling for Syntax-Directed Editors},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30866},
doi = {10.1145/1165387.30866},
abstract = {Syntax-directed editors were created with the intent of aiding in and improving the programming process. Despite their potential, they have not been successful, as evidenced by limited use. In general, they are perceived as being too difficult to use and the benefits of their use are outweighed by the difficulties.We believe that the cognitive styles and skills of the users have been ignored in the design process. In this paper we present some of our initial results which show that cognitive styles vary over a significant spectrum and that their consideration in the design of a syntax-directed editor will result in an intelligent tool that will be right for the cognitive skills and expertise of an individual user. In turn, an approach to design that takes cognitive variation into account would support the construction of syntax-directed editors which are successfully used.},
journal = {SIGCHI Bull.},
month = may,
pages = {99–102},
numpages = {4}
}

@inproceedings{10.1145/29933.30867,
author = {Trevellyan, Robert and Browne, Dermot P.},
title = {A Self-Regulating Adaptive System},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30867},
doi = {10.1145/29933.30867},
abstract = {The viability of providing adaptive user interfaces has been demonstrated ([3], [5]). Such systems identify differences between users in order to provide purposeful change at the user interface. Thus, adaptive systems have objectives, as indicated by the term 'purposeful.' The research reported here takes an important step forward by demonstrating that adaptive systems can be built that regulate their own behaviour by assessing whether their adaptations are being successful in meeting these objectives.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {103–107},
numpages = {5},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30867,
author = {Trevellyan, Robert and Browne, Dermot P.},
title = {A Self-Regulating Adaptive System},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30867},
doi = {10.1145/30851.30867},
abstract = {The viability of providing adaptive user interfaces has been demonstrated ([3], [5]). Such systems identify differences between users in order to provide purposeful change at the user interface. Thus, adaptive systems have objectives, as indicated by the term 'purposeful.' The research reported here takes an important step forward by demonstrating that adaptive systems can be built that regulate their own behaviour by assessing whether their adaptations are being successful in meeting these objectives.},
journal = {SIGCHI Bull.},
month = may,
pages = {103–107},
numpages = {5}
}

@article{10.1145/1165387.30867,
author = {Trevellyan, Robert and Browne, Dermot P.},
title = {A Self-Regulating Adaptive System},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30867},
doi = {10.1145/1165387.30867},
abstract = {The viability of providing adaptive user interfaces has been demonstrated ([3], [5]). Such systems identify differences between users in order to provide purposeful change at the user interface. Thus, adaptive systems have objectives, as indicated by the term 'purposeful.' The research reported here takes an important step forward by demonstrating that adaptive systems can be built that regulate their own behaviour by assessing whether their adaptations are being successful in meeting these objectives.},
journal = {SIGCHI Bull.},
month = may,
pages = {103–107},
numpages = {5}
}

@inproceedings{10.1145/29933.30868,
author = {Dickinson, Robert R. and Bartels, Richard H.},
title = {The Definition, Editing, and Contouring of Surfaces for the Analysis of Field Problems},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30868},
doi = {10.1145/29933.30868},
abstract = {This paper reports on an interactive system for manipulating a tensor-product B-spline approximation to field data for applications in which contours are of interest. The features of the system are: an interpolation technique for approximating fields defined from scattered or gridded data by tensor-product B-splines, an interactive display providing control-vertex manipulation of the resulting B-spline approximation, and a contouring algorithm that is designed specifically for B-spline surfaces.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {109–114},
numpages = {6},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.30868,
author = {Dickinson, Robert R. and Bartels, Richard H.},
title = {The Definition, Editing, and Contouring of Surfaces for the Analysis of Field Problems},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30868},
doi = {10.1145/1165387.30868},
abstract = {This paper reports on an interactive system for manipulating a tensor-product B-spline approximation to field data for applications in which contours are of interest. The features of the system are: an interpolation technique for approximating fields defined from scattered or gridded data by tensor-product B-splines, an interactive display providing control-vertex manipulation of the resulting B-spline approximation, and a contouring algorithm that is designed specifically for B-spline surfaces.},
journal = {SIGCHI Bull.},
month = may,
pages = {109–114},
numpages = {6}
}

@article{10.1145/30851.30868,
author = {Dickinson, Robert R. and Bartels, Richard H.},
title = {The Definition, Editing, and Contouring of Surfaces for the Analysis of Field Problems},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30868},
doi = {10.1145/30851.30868},
abstract = {This paper reports on an interactive system for manipulating a tensor-product B-spline approximation to field data for applications in which contours are of interest. The features of the system are: an interpolation technique for approximating fields defined from scattered or gridded data by tensor-product B-splines, an interactive display providing control-vertex manipulation of the resulting B-spline approximation, and a contouring algorithm that is designed specifically for B-spline surfaces.},
journal = {SIGCHI Bull.},
month = may,
pages = {109–114},
numpages = {6}
}

@inproceedings{10.1145/29933.30869,
author = {Sloan, Kenneth R. and Painter, James},
title = {From Contours to Surfaces: Testbed and Initial Results},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30869},
doi = {10.1145/29933.30869},
abstract = {This paper is concerned with the problem of reconstructing the surface of three-dimensional objects, given a collection of planar contours representing cross-sections through the objects. This is an important problem, with applications in clinical medicine, bio-medical research and instruction, and industrial inspection. Current solutions to this problem have raised interesting theoretical questions about search techniques and the exploitation of domain-specific aspects of such search problems. In this paper, we survey known reconstruction techniques, describe a testbed for evaluating these techniques and present an improvement on the simple divide-and-conquer method analyzed by Fuchs, Kedem and Uselton [5].},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {115–120},
numpages = {6},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30869,
author = {Sloan, Kenneth R. and Painter, James},
title = {From Contours to Surfaces: Testbed and Initial Results},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30869},
doi = {10.1145/30851.30869},
abstract = {This paper is concerned with the problem of reconstructing the surface of three-dimensional objects, given a collection of planar contours representing cross-sections through the objects. This is an important problem, with applications in clinical medicine, bio-medical research and instruction, and industrial inspection. Current solutions to this problem have raised interesting theoretical questions about search techniques and the exploitation of domain-specific aspects of such search problems. In this paper, we survey known reconstruction techniques, describe a testbed for evaluating these techniques and present an improvement on the simple divide-and-conquer method analyzed by Fuchs, Kedem and Uselton [5].},
journal = {SIGCHI Bull.},
month = may,
pages = {115–120},
numpages = {6}
}

@article{10.1145/1165387.30869,
author = {Sloan, Kenneth R. and Painter, James},
title = {From Contours to Surfaces: Testbed and Initial Results},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30869},
doi = {10.1145/1165387.30869},
abstract = {This paper is concerned with the problem of reconstructing the surface of three-dimensional objects, given a collection of planar contours representing cross-sections through the objects. This is an important problem, with applications in clinical medicine, bio-medical research and instruction, and industrial inspection. Current solutions to this problem have raised interesting theoretical questions about search techniques and the exploitation of domain-specific aspects of such search problems. In this paper, we survey known reconstruction techniques, describe a testbed for evaluating these techniques and present an improvement on the simple divide-and-conquer method analyzed by Fuchs, Kedem and Uselton [5].},
journal = {SIGCHI Bull.},
month = may,
pages = {115–120},
numpages = {6}
}

@inproceedings{10.1145/29933.30870,
author = {Suchman, Lucy and Beeman, William and Pear, Michael and Fox, Barbara and Smolensky, Paul},
title = {Social Science and System Design: Interdisciplinary Collaborations},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30870},
doi = {10.1145/29933.30870},
abstract = {Contributions from the behavioral sciences to the design of computer systems have come primarily from psychology, and have focused on individual cognition. In this symposium, we consider the applicability to system design of approaches that focus on social interaction. The participants comprise pairs of researchers engaged in projects that aim to bring together systematic studies of naturally occurring human activities with the design of computer-based technology. Each of the projects emphasizes the importance of the social organization of communities, everyday communication and practice.The symposium participants — anthropologists, linguists and computer scientists — bring interdisciplinary perspectives to bear on the problem of how to design tools that incorporate the right mix of support for current work practices, solutions to recognized problems, and innovations in the way that work gets done. The aim of the symposium is to explore the possibilities for a productive relationship between research on socially organized human activities and system design.In this forum we will examine the problems that such interdisciplinary efforts face and the payoffs that they produce. Drawing on experience with their respective research projects, the participants will address the following questions concerning the development of a design process grounded in empirical studies:what is the relevance of activity studies to the design of new technology? What people do in everyday work settings is an obvious subject matter for social science, but just what is the relationship between that subject matter and system design? What part should an understanding of what people do now, with existing technological resources, play in the design of new technologies?How has new technology changed the nature of everyday work activities? The technological resources available in the domain of intellectual work, for example, are continually changing. Given this moving technological base, new forms of interaction between people emerge. What are the implications of those new forms, made possible by system design, for social science research?What social theory and methods do you draw on in your studies of work practice? What are the difficult theoretical or methodological problems, and what are the consequences of looking at everyday activities with the aim of designing new technology?What is the motivation behind your system design effort? That is, what problem in the domain of interest is your design intended to address?How has your design approach been affected by your empirical research?How has working with your collaborator changed your view of the problem domain? What has been most difficult about your collaboration and what has been most valuable? How have you negotiated differences in technical background, methods, conceptualization of the problem domain?To ground the discussion, participants will offer examples from their ongoing research projects. Brief descriptions of those projects are included here, but the symposium is intended as a lively debate of the questions posed, not as a presentation of findings. We hope through our discussion and through the participation of the symposium audience to shed light on the issues, while encouraging the development of new collaborations between social and computer scientists.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {121–123},
numpages = {3},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30870,
author = {Suchman, Lucy and Beeman, William and Pear, Michael and Fox, Barbara and Smolensky, Paul},
title = {Social Science and System Design: Interdisciplinary Collaborations},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30870},
doi = {10.1145/30851.30870},
abstract = {Contributions from the behavioral sciences to the design of computer systems have come primarily from psychology, and have focused on individual cognition. In this symposium, we consider the applicability to system design of approaches that focus on social interaction. The participants comprise pairs of researchers engaged in projects that aim to bring together systematic studies of naturally occurring human activities with the design of computer-based technology. Each of the projects emphasizes the importance of the social organization of communities, everyday communication and practice.The symposium participants — anthropologists, linguists and computer scientists — bring interdisciplinary perspectives to bear on the problem of how to design tools that incorporate the right mix of support for current work practices, solutions to recognized problems, and innovations in the way that work gets done. The aim of the symposium is to explore the possibilities for a productive relationship between research on socially organized human activities and system design.In this forum we will examine the problems that such interdisciplinary efforts face and the payoffs that they produce. Drawing on experience with their respective research projects, the participants will address the following questions concerning the development of a design process grounded in empirical studies:what is the relevance of activity studies to the design of new technology? What people do in everyday work settings is an obvious subject matter for social science, but just what is the relationship between that subject matter and system design? What part should an understanding of what people do now, with existing technological resources, play in the design of new technologies?How has new technology changed the nature of everyday work activities? The technological resources available in the domain of intellectual work, for example, are continually changing. Given this moving technological base, new forms of interaction between people emerge. What are the implications of those new forms, made possible by system design, for social science research?What social theory and methods do you draw on in your studies of work practice? What are the difficult theoretical or methodological problems, and what are the consequences of looking at everyday activities with the aim of designing new technology?What is the motivation behind your system design effort? That is, what problem in the domain of interest is your design intended to address?How has your design approach been affected by your empirical research?How has working with your collaborator changed your view of the problem domain? What has been most difficult about your collaboration and what has been most valuable? How have you negotiated differences in technical background, methods, conceptualization of the problem domain?To ground the discussion, participants will offer examples from their ongoing research projects. Brief descriptions of those projects are included here, but the symposium is intended as a lively debate of the questions posed, not as a presentation of findings. We hope through our discussion and through the participation of the symposium audience to shed light on the issues, while encouraging the development of new collaborations between social and computer scientists.},
journal = {SIGCHI Bull.},
month = may,
pages = {121–123},
numpages = {3}
}

@article{10.1145/1165387.30870,
author = {Suchman, Lucy and Beeman, William and Pear, Michael and Fox, Barbara and Smolensky, Paul},
title = {Social Science and System Design: Interdisciplinary Collaborations},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30870},
doi = {10.1145/1165387.30870},
abstract = {Contributions from the behavioral sciences to the design of computer systems have come primarily from psychology, and have focused on individual cognition. In this symposium, we consider the applicability to system design of approaches that focus on social interaction. The participants comprise pairs of researchers engaged in projects that aim to bring together systematic studies of naturally occurring human activities with the design of computer-based technology. Each of the projects emphasizes the importance of the social organization of communities, everyday communication and practice.The symposium participants — anthropologists, linguists and computer scientists — bring interdisciplinary perspectives to bear on the problem of how to design tools that incorporate the right mix of support for current work practices, solutions to recognized problems, and innovations in the way that work gets done. The aim of the symposium is to explore the possibilities for a productive relationship between research on socially organized human activities and system design.In this forum we will examine the problems that such interdisciplinary efforts face and the payoffs that they produce. Drawing on experience with their respective research projects, the participants will address the following questions concerning the development of a design process grounded in empirical studies:what is the relevance of activity studies to the design of new technology? What people do in everyday work settings is an obvious subject matter for social science, but just what is the relationship between that subject matter and system design? What part should an understanding of what people do now, with existing technological resources, play in the design of new technologies?How has new technology changed the nature of everyday work activities? The technological resources available in the domain of intellectual work, for example, are continually changing. Given this moving technological base, new forms of interaction between people emerge. What are the implications of those new forms, made possible by system design, for social science research?What social theory and methods do you draw on in your studies of work practice? What are the difficult theoretical or methodological problems, and what are the consequences of looking at everyday activities with the aim of designing new technology?What is the motivation behind your system design effort? That is, what problem in the domain of interest is your design intended to address?How has your design approach been affected by your empirical research?How has working with your collaborator changed your view of the problem domain? What has been most difficult about your collaboration and what has been most valuable? How have you negotiated differences in technical background, methods, conceptualization of the problem domain?To ground the discussion, participants will offer examples from their ongoing research projects. Brief descriptions of those projects are included here, but the symposium is intended as a lively debate of the questions posed, not as a presentation of findings. We hope through our discussion and through the participation of the symposium audience to shed light on the issues, while encouraging the development of new collaborations between social and computer scientists.},
journal = {SIGCHI Bull.},
month = may,
pages = {121–123},
numpages = {3}
}

@inproceedings{10.1145/29933.30871,
author = {Grudin, Jonathan and Ehrlich, Susan F. and Shriner, Rick},
title = {Positioning Human Factors in the User Interface Development Chain},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30871},
doi = {10.1145/29933.30871},
abstract = {Human factors professionals are not completely free to support the optimization of user interface design within the time span of individual software development projects. Interface design is constrained by conservative forces, such as the expectations of users of existing systems in the installed base and emerging de facto or formal standards. At the same time, human factors involvement with a particular product may ultimately have its greatest impact on future product releases. In this paper we explore an expanded time line for influencing product design. This time line brings middle- and upper-management concerns into focus, revealing critical opportunities for effectively positioning and applying human factors resources.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {125–131},
numpages = {7},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.30871,
author = {Grudin, Jonathan and Ehrlich, Susan F. and Shriner, Rick},
title = {Positioning Human Factors in the User Interface Development Chain},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30871},
doi = {10.1145/1165387.30871},
abstract = {Human factors professionals are not completely free to support the optimization of user interface design within the time span of individual software development projects. Interface design is constrained by conservative forces, such as the expectations of users of existing systems in the installed base and emerging de facto or formal standards. At the same time, human factors involvement with a particular product may ultimately have its greatest impact on future product releases. In this paper we explore an expanded time line for influencing product design. This time line brings middle- and upper-management concerns into focus, revealing critical opportunities for effectively positioning and applying human factors resources.},
journal = {SIGCHI Bull.},
month = may,
pages = {125–131},
numpages = {7}
}

@article{10.1145/30851.30871,
author = {Grudin, Jonathan and Ehrlich, Susan F. and Shriner, Rick},
title = {Positioning Human Factors in the User Interface Development Chain},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30871},
doi = {10.1145/30851.30871},
abstract = {Human factors professionals are not completely free to support the optimization of user interface design within the time span of individual software development projects. Interface design is constrained by conservative forces, such as the expectations of users of existing systems in the installed base and emerging de facto or formal standards. At the same time, human factors involvement with a particular product may ultimately have its greatest impact on future product releases. In this paper we explore an expanded time line for influencing product design. This time line brings middle- and upper-management concerns into focus, revealing critical opportunities for effectively positioning and applying human factors resources.},
journal = {SIGCHI Bull.},
month = may,
pages = {125–131},
numpages = {7}
}

@inproceedings{10.1145/29933.30872,
author = {Goransson, Bengt and Lind, Mats and Pettersson, Else and Sandblad, Bengt and Schwalbe, Patrik},
title = {The Interface is Often Not the Problem},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30872},
doi = {10.1145/29933.30872},
abstract = {Computer systems in the form of tools for specific functions within a work environment are becoming increasingly common. Because the users are not computer experts, and because the introduction of the new tools can dramatically change their tasks, problems arise. It is argued that even if the proper design of the MMI is very important, this will not solve all the problems. More basic problems concern what functions should be included in the system and how the users can understand what the system can do in different work situations and how the response should be evaluated in the context of the work situations. This is demonstrated by experiences from application projects. It is concluded that more research must be devoted to these problem areas. Another important result is the fact that the possibilities to develop more generally applicable computer based tools are limited. Adaption to local circumstances and needs is usually a necessity.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {133–136},
numpages = {4},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30872,
author = {Goransson, Bengt and Lind, Mats and Pettersson, Else and Sandblad, Bengt and Schwalbe, Patrik},
title = {The Interface is Often Not the Problem},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30872},
doi = {10.1145/30851.30872},
abstract = {Computer systems in the form of tools for specific functions within a work environment are becoming increasingly common. Because the users are not computer experts, and because the introduction of the new tools can dramatically change their tasks, problems arise. It is argued that even if the proper design of the MMI is very important, this will not solve all the problems. More basic problems concern what functions should be included in the system and how the users can understand what the system can do in different work situations and how the response should be evaluated in the context of the work situations. This is demonstrated by experiences from application projects. It is concluded that more research must be devoted to these problem areas. Another important result is the fact that the possibilities to develop more generally applicable computer based tools are limited. Adaption to local circumstances and needs is usually a necessity.},
journal = {SIGCHI Bull.},
month = may,
pages = {133–136},
numpages = {4}
}

@article{10.1145/1165387.30872,
author = {Goransson, Bengt and Lind, Mats and Pettersson, Else and Sandblad, Bengt and Schwalbe, Patrik},
title = {The Interface is Often Not the Problem},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30872},
doi = {10.1145/1165387.30872},
abstract = {Computer systems in the form of tools for specific functions within a work environment are becoming increasingly common. Because the users are not computer experts, and because the introduction of the new tools can dramatically change their tasks, problems arise. It is argued that even if the proper design of the MMI is very important, this will not solve all the problems. More basic problems concern what functions should be included in the system and how the users can understand what the system can do in different work situations and how the response should be evaluated in the context of the work situations. This is demonstrated by experiences from application projects. It is concluded that more research must be devoted to these problem areas. Another important result is the fact that the possibilities to develop more generally applicable computer based tools are limited. Adaption to local circumstances and needs is usually a necessity.},
journal = {SIGCHI Bull.},
month = may,
pages = {133–136},
numpages = {4}
}

@inproceedings{10.1145/29933.30873,
author = {Rosson, Mary Beth and Maass, Susanne and Kellogg, Wendy A.},
title = {Designing for Designers: An Analysis of Design Practice in the Real World},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30873},
doi = {10.1145/29933.30873},
abstract = {Twenty-two designers were interviewed about their design of interactive systems. They were asked to select a recent project having a significant user interface component, and were probed about the general design process involved, how the design of the user interface fit into that process, and their personal strategies for exploring ideas. Analysis of their responses pointed to two models of the design process. The relationship of these models to the type of user testing done and the strategies used for generating ideas is discussed, especially with respect to the implications for developing tools to support design.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {137–142},
numpages = {6},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.30873,
author = {Rosson, Mary Beth and Maass, Susanne and Kellogg, Wendy A.},
title = {Designing for Designers: An Analysis of Design Practice in the Real World},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30873},
doi = {10.1145/1165387.30873},
abstract = {Twenty-two designers were interviewed about their design of interactive systems. They were asked to select a recent project having a significant user interface component, and were probed about the general design process involved, how the design of the user interface fit into that process, and their personal strategies for exploring ideas. Analysis of their responses pointed to two models of the design process. The relationship of these models to the type of user testing done and the strategies used for generating ideas is discussed, especially with respect to the implications for developing tools to support design.},
journal = {SIGCHI Bull.},
month = may,
pages = {137–142},
numpages = {6}
}

@article{10.1145/30851.30873,
author = {Rosson, Mary Beth and Maass, Susanne and Kellogg, Wendy A.},
title = {Designing for Designers: An Analysis of Design Practice in the Real World},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30873},
doi = {10.1145/30851.30873},
abstract = {Twenty-two designers were interviewed about their design of interactive systems. They were asked to select a recent project having a significant user interface component, and were probed about the general design process involved, how the design of the user interface fit into that process, and their personal strategies for exploring ideas. Analysis of their responses pointed to two models of the design process. The relationship of these models to the type of user testing done and the strategies used for generating ideas is discussed, especially with respect to the implications for developing tools to support design.},
journal = {SIGCHI Bull.},
month = may,
pages = {137–142},
numpages = {6}
}

@inproceedings{10.1145/29933.30874,
author = {Lewis, J. P. and Parke, F. I.},
title = {Automated Lip-Synch and Speech Synthesis for Character Animation},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30874},
doi = {10.1145/29933.30874},
abstract = {An automated method of synchronizing facial animation to recorded speech is described. In this method, a common speech synthesis method (linear prediction) is adapted to provide simple and accurate phoneme recognition. The recognized phonemes are then associated with mouth positions to provide keyframes for computer animation of speech using a parametric model of the human face.The linear prediction software, once implemented, can also be used for speech resynthesis. The synthesis retains intelligibility and natural speech rhythm while achieving a “synthetic realism” consistent with computer animation. Speech synthesis also enables certain useful manipulations for the purpose of computer character animation.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {143–147},
numpages = {5},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30874,
author = {Lewis, J. P. and Parke, F. I.},
title = {Automated Lip-Synch and Speech Synthesis for Character Animation},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30874},
doi = {10.1145/30851.30874},
abstract = {An automated method of synchronizing facial animation to recorded speech is described. In this method, a common speech synthesis method (linear prediction) is adapted to provide simple and accurate phoneme recognition. The recognized phonemes are then associated with mouth positions to provide keyframes for computer animation of speech using a parametric model of the human face.The linear prediction software, once implemented, can also be used for speech resynthesis. The synthesis retains intelligibility and natural speech rhythm while achieving a “synthetic realism” consistent with computer animation. Speech synthesis also enables certain useful manipulations for the purpose of computer character animation.},
journal = {SIGCHI Bull.},
month = may,
pages = {143–147},
numpages = {5}
}

@article{10.1145/1165387.30874,
author = {Lewis, J. P. and Parke, F. I.},
title = {Automated Lip-Synch and Speech Synthesis for Character Animation},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30874},
doi = {10.1145/1165387.30874},
abstract = {An automated method of synchronizing facial animation to recorded speech is described. In this method, a common speech synthesis method (linear prediction) is adapted to provide simple and accurate phoneme recognition. The recognized phonemes are then associated with mouth positions to provide keyframes for computer animation of speech using a parametric model of the human face.The linear prediction software, once implemented, can also be used for speech resynthesis. The synthesis retains intelligibility and natural speech rhythm while achieving a “synthetic realism” consistent with computer animation. Speech synthesis also enables certain useful manipulations for the purpose of computer character animation.},
journal = {SIGCHI Bull.},
month = may,
pages = {143–147},
numpages = {5}
}

@inproceedings{10.1145/29933.30875,
author = {Takashima, Yosuke and Shimazu, Hideo and Tomono, Masahiro},
title = {Story Driven Animation},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30875},
doi = {10.1145/29933.30875},
abstract = {An animation system has been developed which generates animations from stories written in natural language. The system consists of three modules: story understanding module, stage directing module and action generating module.The story understanding module extracts actions that are not explicitly described in the story and makes a scenario. The stage directing module adapts the scenario by determining the actors' positions on the stage and setting the stage. Actors are defined as 3-Dimensional articulated figures. Each component of an actor has its primitive motion method. To achieve complicated actions, primitive motions are combined. Referring to these complicated actions, the action generating module produces animated sequences from the adapted scenario. These three modules are tightly coupled with their knowledge bases. As an example, the story of the “Hare and Tortoise” from Aesop's Fables, written for elementary schoolchildren is used. This example proves that it is possible to produce computer animation directly from the story written in natural language, now in Japanese.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {149–153},
numpages = {5},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30875,
author = {Takashima, Yosuke and Shimazu, Hideo and Tomono, Masahiro},
title = {Story Driven Animation},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30875},
doi = {10.1145/30851.30875},
abstract = {An animation system has been developed which generates animations from stories written in natural language. The system consists of three modules: story understanding module, stage directing module and action generating module.The story understanding module extracts actions that are not explicitly described in the story and makes a scenario. The stage directing module adapts the scenario by determining the actors' positions on the stage and setting the stage. Actors are defined as 3-Dimensional articulated figures. Each component of an actor has its primitive motion method. To achieve complicated actions, primitive motions are combined. Referring to these complicated actions, the action generating module produces animated sequences from the adapted scenario. These three modules are tightly coupled with their knowledge bases. As an example, the story of the “Hare and Tortoise” from Aesop's Fables, written for elementary schoolchildren is used. This example proves that it is possible to produce computer animation directly from the story written in natural language, now in Japanese.},
journal = {SIGCHI Bull.},
month = may,
pages = {149–153},
numpages = {5}
}

@article{10.1145/1165387.30875,
author = {Takashima, Yosuke and Shimazu, Hideo and Tomono, Masahiro},
title = {Story Driven Animation},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30875},
doi = {10.1145/1165387.30875},
abstract = {An animation system has been developed which generates animations from stories written in natural language. The system consists of three modules: story understanding module, stage directing module and action generating module.The story understanding module extracts actions that are not explicitly described in the story and makes a scenario. The stage directing module adapts the scenario by determining the actors' positions on the stage and setting the stage. Actors are defined as 3-Dimensional articulated figures. Each component of an actor has its primitive motion method. To achieve complicated actions, primitive motions are combined. Referring to these complicated actions, the action generating module produces animated sequences from the adapted scenario. These three modules are tightly coupled with their knowledge bases. As an example, the story of the “Hare and Tortoise” from Aesop's Fables, written for elementary schoolchildren is used. This example proves that it is possible to produce computer animation directly from the story written in natural language, now in Japanese.},
journal = {SIGCHI Bull.},
month = may,
pages = {149–153},
numpages = {5}
}

@inproceedings{10.1145/29933.30876,
author = {Sibert, John and Buffa, Michael G. and Crane, Hewitt D. and Doster, Wolfgang and Rhyne, James and Ward, Jean Renaerd},
title = {Issues Limiting the Acceptance of User Interfaces Using Gesture Input and Handwriting Character Recognition (Panel)},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.30876},
doi = {10.1145/29933.30876},
abstract = {Recently there has been increasing attention to character recognition/graphical user interfaces under the name of “gesture input”. This technique actually has a long history: “sketch recognition” interfaces of 15 or more years ago were highly praised [Applicon 73], and user interfaces using handwriting input before the wide use of text keyboards were one of the first research goals in computer science [Bledsoe 59]. The underlying character and symbol recognition technologies have been a major research area in their own right since the early 1950s [Suen 80].The last two years have seen an upsurge in the number of developments in this area, both from commercial companies attempting to exploit new character and symbol recognition technologies, [CIC 85] [Pencept 84] [Cooper 82] and from researchers starting from fundamental questions in user interactions [Buxton 86] [Wolf 86]. However, one question still remains: “Why has this set of techniques had so little impact on user interface design practice, despite its long history and promise?” This panel discussion should give many answers to this question.Panelists include the leading commercial developers of handwriting input products, well-known researchers in the psychological aspects of graphical user interactions, and representatives of the research community for character recognition.The issue of supporting this type of interface is very timely: recent standardization efforts such as PHIGS and GKS for graphics interactions are known to have the unfortunate side effects of excluding some of the current user interface designs using this class of technology [10].},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {155–158},
numpages = {4},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.30876,
author = {Sibert, John and Buffa, Michael G. and Crane, Hewitt D. and Doster, Wolfgang and Rhyne, James and Ward, Jean Renaerd},
title = {Issues Limiting the Acceptance of User Interfaces Using Gesture Input and Handwriting Character Recognition (Panel)},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.30876},
doi = {10.1145/30851.30876},
abstract = {Recently there has been increasing attention to character recognition/graphical user interfaces under the name of “gesture input”. This technique actually has a long history: “sketch recognition” interfaces of 15 or more years ago were highly praised [Applicon 73], and user interfaces using handwriting input before the wide use of text keyboards were one of the first research goals in computer science [Bledsoe 59]. The underlying character and symbol recognition technologies have been a major research area in their own right since the early 1950s [Suen 80].The last two years have seen an upsurge in the number of developments in this area, both from commercial companies attempting to exploit new character and symbol recognition technologies, [CIC 85] [Pencept 84] [Cooper 82] and from researchers starting from fundamental questions in user interactions [Buxton 86] [Wolf 86]. However, one question still remains: “Why has this set of techniques had so little impact on user interface design practice, despite its long history and promise?” This panel discussion should give many answers to this question.Panelists include the leading commercial developers of handwriting input products, well-known researchers in the psychological aspects of graphical user interactions, and representatives of the research community for character recognition.The issue of supporting this type of interface is very timely: recent standardization efforts such as PHIGS and GKS for graphics interactions are known to have the unfortunate side effects of excluding some of the current user interface designs using this class of technology [10].},
journal = {SIGCHI Bull.},
month = may,
pages = {155–158},
numpages = {4}
}

@article{10.1145/1165387.30876,
author = {Sibert, John and Buffa, Michael G. and Crane, Hewitt D. and Doster, Wolfgang and Rhyne, James and Ward, Jean Renaerd},
title = {Issues Limiting the Acceptance of User Interfaces Using Gesture Input and Handwriting Character Recognition (Panel)},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.30876},
doi = {10.1145/1165387.30876},
abstract = {Recently there has been increasing attention to character recognition/graphical user interfaces under the name of “gesture input”. This technique actually has a long history: “sketch recognition” interfaces of 15 or more years ago were highly praised [Applicon 73], and user interfaces using handwriting input before the wide use of text keyboards were one of the first research goals in computer science [Bledsoe 59]. The underlying character and symbol recognition technologies have been a major research area in their own right since the early 1950s [Suen 80].The last two years have seen an upsurge in the number of developments in this area, both from commercial companies attempting to exploit new character and symbol recognition technologies, [CIC 85] [Pencept 84] [Cooper 82] and from researchers starting from fundamental questions in user interactions [Buxton 86] [Wolf 86]. However, one question still remains: “Why has this set of techniques had so little impact on user interface design practice, despite its long history and promise?” This panel discussion should give many answers to this question.Panelists include the leading commercial developers of handwriting input products, well-known researchers in the psychological aspects of graphical user interactions, and representatives of the research community for character recognition.The issue of supporting this type of interface is very timely: recent standardization efforts such as PHIGS and GKS for graphics interactions are known to have the unfortunate side effects of excluding some of the current user interface designs using this class of technology [10].},
journal = {SIGCHI Bull.},
month = may,
pages = {155–158},
numpages = {4}
}

@inproceedings{10.1145/29933.275623,
author = {Black, John B. and Carroll, John M. and McGuigan, Stuart M.},
title = {What Kind of Minimal Instruction Manual is the Most Effective},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275623},
doi = {10.1145/29933.275623},
abstract = {An empirical study examined the effectiveness of four different versions of a self-instruction manual for a word processing system: a Skeletal version that explicitly states only the essential information, an Inferential version that has the users infer some of the essential information, a Rehearsal version that is like the Skeletal manual, but adds opportunities to rehearse the explicitly stated information, and a Lengthy version that adds nonessential explanatory and descriptive information to the Skeletal version. The best learning performance was obtained with the inferential approach, particularly for more realistic tasks.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {159–162},
numpages = {4},
keywords = {manual design, learning, instruction},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275623,
author = {Black, John B. and Carroll, John M. and McGuigan, Stuart M.},
title = {What Kind of Minimal Instruction Manual is the Most Effective},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275623},
doi = {10.1145/1165387.275623},
abstract = {An empirical study examined the effectiveness of four different versions of a self-instruction manual for a word processing system: a Skeletal version that explicitly states only the essential information, an Inferential version that has the users infer some of the essential information, a Rehearsal version that is like the Skeletal manual, but adds opportunities to rehearse the explicitly stated information, and a Lengthy version that adds nonessential explanatory and descriptive information to the Skeletal version. The best learning performance was obtained with the inferential approach, particularly for more realistic tasks.},
journal = {SIGCHI Bull.},
month = may,
pages = {159–162},
numpages = {4},
keywords = {manual design, learning, instruction}
}

@article{10.1145/30851.275623,
author = {Black, John B. and Carroll, John M. and McGuigan, Stuart M.},
title = {What Kind of Minimal Instruction Manual is the Most Effective},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275623},
doi = {10.1145/30851.275623},
abstract = {An empirical study examined the effectiveness of four different versions of a self-instruction manual for a word processing system: a Skeletal version that explicitly states only the essential information, an Inferential version that has the users infer some of the essential information, a Rehearsal version that is like the Skeletal manual, but adds opportunities to rehearse the explicitly stated information, and a Lengthy version that adds nonessential explanatory and descriptive information to the Skeletal version. The best learning performance was obtained with the inferential approach, particularly for more realistic tasks.},
journal = {SIGCHI Bull.},
month = may,
pages = {159–162},
numpages = {4},
keywords = {manual design, learning, instruction}
}

@inproceedings{10.1145/29933.275624,
author = {Aaronson, Amy and Carroll, John M.},
title = {Intelligent Help in a One-Shot Dialog: A Protocol Study},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275624},
doi = {10.1145/29933.275624},
abstract = {A database of 150 interactions conducted via electronic mail was analyzed. The database had been constructed as an on-line tool for users and advisors, but the interactions can also be regarded as modelling intelligent help dialog in which posing a query and providing a response are each accomplished in “one-shot”. The types of questions users ask and the advisory strategies employed for imcomplete queries without follow-up questioning are described. The goal is to understand this new on-line tool for advising and its implications as a model of one-shot intelligent help dialogs.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {163–168},
numpages = {6},
keywords = {intelligent help, advisory dialogs},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275624,
author = {Aaronson, Amy and Carroll, John M.},
title = {Intelligent Help in a One-Shot Dialog: A Protocol Study},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275624},
doi = {10.1145/1165387.275624},
abstract = {A database of 150 interactions conducted via electronic mail was analyzed. The database had been constructed as an on-line tool for users and advisors, but the interactions can also be regarded as modelling intelligent help dialog in which posing a query and providing a response are each accomplished in “one-shot”. The types of questions users ask and the advisory strategies employed for imcomplete queries without follow-up questioning are described. The goal is to understand this new on-line tool for advising and its implications as a model of one-shot intelligent help dialogs.},
journal = {SIGCHI Bull.},
month = may,
pages = {163–168},
numpages = {6},
keywords = {advisory dialogs, intelligent help}
}

@article{10.1145/30851.275624,
author = {Aaronson, Amy and Carroll, John M.},
title = {Intelligent Help in a One-Shot Dialog: A Protocol Study},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275624},
doi = {10.1145/30851.275624},
abstract = {A database of 150 interactions conducted via electronic mail was analyzed. The database had been constructed as an on-line tool for users and advisors, but the interactions can also be regarded as modelling intelligent help dialog in which posing a query and providing a response are each accomplished in “one-shot”. The types of questions users ask and the advisory strategies employed for imcomplete queries without follow-up questioning are described. The goal is to understand this new on-line tool for advising and its implications as a model of one-shot intelligent help dialogs.},
journal = {SIGCHI Bull.},
month = may,
pages = {163–168},
numpages = {6},
keywords = {intelligent help, advisory dialogs}
}

@inproceedings{10.1145/29933.275625,
author = {Catrambone, Richard and Carroll, John M.},
title = {Learning a Word Processing System with Training Wheels and Guided Exploration},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275625},
doi = {10.1145/29933.275625},
abstract = {A Training Wheels interface creates a reduced functionality system intended to prevent new users from suffering the consequences of certain types of common errors when they exercise system functions and procedures. This has been shown to be an effective training system design for learning basic text editing functions [4]. We extend this result by examining the extent to which training wheels learners can transfer their skills to interaction with the full-function system. The experiment reported here indicates that training wheels subjects were better able to perform advanced full-system editing functions than subjects who were trained on the full system itself.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {169–174},
numpages = {6},
keywords = {training wheels, guided exploration, minimalist documentation, user training, skill transfer, error blocking},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275625,
author = {Catrambone, Richard and Carroll, John M.},
title = {Learning a Word Processing System with Training Wheels and Guided Exploration},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275625},
doi = {10.1145/1165387.275625},
abstract = {A Training Wheels interface creates a reduced functionality system intended to prevent new users from suffering the consequences of certain types of common errors when they exercise system functions and procedures. This has been shown to be an effective training system design for learning basic text editing functions [4]. We extend this result by examining the extent to which training wheels learners can transfer their skills to interaction with the full-function system. The experiment reported here indicates that training wheels subjects were better able to perform advanced full-system editing functions than subjects who were trained on the full system itself.},
journal = {SIGCHI Bull.},
month = may,
pages = {169–174},
numpages = {6},
keywords = {user training, minimalist documentation, skill transfer, error blocking, guided exploration, training wheels}
}

@article{10.1145/30851.275625,
author = {Catrambone, Richard and Carroll, John M.},
title = {Learning a Word Processing System with Training Wheels and Guided Exploration},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275625},
doi = {10.1145/30851.275625},
abstract = {A Training Wheels interface creates a reduced functionality system intended to prevent new users from suffering the consequences of certain types of common errors when they exercise system functions and procedures. This has been shown to be an effective training system design for learning basic text editing functions [4]. We extend this result by examining the extent to which training wheels learners can transfer their skills to interaction with the full-function system. The experiment reported here indicates that training wheels subjects were better able to perform advanced full-system editing functions than subjects who were trained on the full system itself.},
journal = {SIGCHI Bull.},
month = may,
pages = {169–174},
numpages = {6},
keywords = {guided exploration, error blocking, skill transfer, minimalist documentation, user training, training wheels}
}

@inproceedings{10.1145/29933.275626,
author = {Gould, John D. and Salaun, Josiane},
title = {Behavioral Experiments on Handmarkings},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275626},
doi = {10.1145/29933.275626},
abstract = {Handmarkings, e.g., handwritten proofeditors' marks, can be used as direct editing commands to an interactive computer system. Three exploratory experiments studied the potential value of handmarkings for editing text and pictures. Results showed that circles are the most frequently used scoping mark and arrows are the most frequently used operator and target indicators. Experimental comparisons showed that handmarkings have the potential to be faster than keyboards and mice for editing tasks. But their ultimate value will depend upon the style and details of their user interface implementation.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {175–181},
numpages = {7},
keywords = {handmarkings, user interface techniques, gestures, editing},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275626,
author = {Gould, John D. and Salaun, Josiane},
title = {Behavioral Experiments on Handmarkings},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275626},
doi = {10.1145/1165387.275626},
abstract = {Handmarkings, e.g., handwritten proofeditors' marks, can be used as direct editing commands to an interactive computer system. Three exploratory experiments studied the potential value of handmarkings for editing text and pictures. Results showed that circles are the most frequently used scoping mark and arrows are the most frequently used operator and target indicators. Experimental comparisons showed that handmarkings have the potential to be faster than keyboards and mice for editing tasks. But their ultimate value will depend upon the style and details of their user interface implementation.},
journal = {SIGCHI Bull.},
month = may,
pages = {175–181},
numpages = {7},
keywords = {handmarkings, user interface techniques, editing, gestures}
}

@article{10.1145/30851.275626,
author = {Gould, John D. and Salaun, Josiane},
title = {Behavioral Experiments on Handmarkings},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275626},
doi = {10.1145/30851.275626},
abstract = {Handmarkings, e.g., handwritten proofeditors' marks, can be used as direct editing commands to an interactive computer system. Three exploratory experiments studied the potential value of handmarkings for editing text and pictures. Results showed that circles are the most frequently used scoping mark and arrows are the most frequently used operator and target indicators. Experimental comparisons showed that handmarkings have the potential to be faster than keyboards and mice for editing tasks. But their ultimate value will depend upon the style and details of their user interface implementation.},
journal = {SIGCHI Bull.},
month = may,
pages = {175–181},
numpages = {7},
keywords = {gestures, handmarkings, user interface techniques, editing}
}

@inproceedings{10.1145/29933.275627,
author = {Ware, Colin and Mikaelian, Harutune H.},
title = {An Evaluation of an Eye Tracker as a Device for Computer Input2},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275627},
doi = {10.1145/29933.275627},
abstract = {Since humans direct their visual attention by means of eye movements, a device which monitors eye movements should be a natural “pick” device for selecting objects visually present on a monitor. The results from an experimental investigation of an eye tracker as a computer input device are presented. Three different methods were used to select the object looked at; these were a button press, prolonged fixation or “dwell” and an on screen select button. The results show that an eye tracker can be used as a fast selection device providing that the target size is not too small. If the targets are small speed declines and errors increase rapidly.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {183–188},
numpages = {6},
keywords = {input devices, eye movements},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275627,
author = {Ware, Colin and Mikaelian, Harutune H.},
title = {An Evaluation of an Eye Tracker as a Device for Computer Input2},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275627},
doi = {10.1145/1165387.275627},
abstract = {Since humans direct their visual attention by means of eye movements, a device which monitors eye movements should be a natural “pick” device for selecting objects visually present on a monitor. The results from an experimental investigation of an eye tracker as a computer input device are presented. Three different methods were used to select the object looked at; these were a button press, prolonged fixation or “dwell” and an on screen select button. The results show that an eye tracker can be used as a fast selection device providing that the target size is not too small. If the targets are small speed declines and errors increase rapidly.},
journal = {SIGCHI Bull.},
month = may,
pages = {183–188},
numpages = {6},
keywords = {eye movements, input devices}
}

@article{10.1145/30851.275627,
author = {Ware, Colin and Mikaelian, Harutune H.},
title = {An Evaluation of an Eye Tracker as a Device for Computer Input2},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275627},
doi = {10.1145/30851.275627},
abstract = {Since humans direct their visual attention by means of eye movements, a device which monitors eye movements should be a natural “pick” device for selecting objects visually present on a monitor. The results from an experimental investigation of an eye tracker as a computer input device are presented. Three different methods were used to select the object looked at; these were a button press, prolonged fixation or “dwell” and an on screen select button. The results show that an eye tracker can be used as a fast selection device providing that the target size is not too small. If the targets are small speed declines and errors increase rapidly.},
journal = {SIGCHI Bull.},
month = may,
pages = {183–188},
numpages = {6},
keywords = {input devices, eye movements}
}

@inproceedings{10.1145/29933.275628,
author = {Zimmerman, Thomas G. and Lanier, Jaron and Blanchard, Chuck and Bryson, Steve and Harvill, Young},
title = {A Hand Gesture Interface Device},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275628},
doi = {10.1145/29933.275628},
abstract = {This paper reports on the development of a hand to machine interface device that provides real-time gesture, position and orientation information. The key element is a glove and the device as a whole incorporates a collection of technologies. Analog flex sensors on the glove measure finger bending. Hand position and orientation are measured either by ultrasonics, providing five degrees of freedom, or magnetic flux sensors, which provide six degrees of freedom. Piezoceramic benders provide the wearer of the glove with tactile feedback. These sensors are mounted on the light-weight glove and connected to the driving hardware via a small cable.Applications of the glove and its component technologies include its use in conjunction with a host computer which drives a real-time 3-dimensional model of the hand allowing the glove wearer to manipulate computer-generated objects as if they were real, interpretation of finger-spelling, evaluation of hand impairment in addition to providing an interface to a visual programming language.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {189–192},
numpages = {4},
keywords = {user interface, tactile interface, motor interface, human interface, gesture recognition},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275628,
author = {Zimmerman, Thomas G. and Lanier, Jaron and Blanchard, Chuck and Bryson, Steve and Harvill, Young},
title = {A Hand Gesture Interface Device},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275628},
doi = {10.1145/30851.275628},
abstract = {This paper reports on the development of a hand to machine interface device that provides real-time gesture, position and orientation information. The key element is a glove and the device as a whole incorporates a collection of technologies. Analog flex sensors on the glove measure finger bending. Hand position and orientation are measured either by ultrasonics, providing five degrees of freedom, or magnetic flux sensors, which provide six degrees of freedom. Piezoceramic benders provide the wearer of the glove with tactile feedback. These sensors are mounted on the light-weight glove and connected to the driving hardware via a small cable.Applications of the glove and its component technologies include its use in conjunction with a host computer which drives a real-time 3-dimensional model of the hand allowing the glove wearer to manipulate computer-generated objects as if they were real, interpretation of finger-spelling, evaluation of hand impairment in addition to providing an interface to a visual programming language.},
journal = {SIGCHI Bull.},
month = may,
pages = {189–192},
numpages = {4},
keywords = {user interface, gesture recognition, tactile interface, human interface, motor interface}
}

@article{10.1145/1165387.275628,
author = {Zimmerman, Thomas G. and Lanier, Jaron and Blanchard, Chuck and Bryson, Steve and Harvill, Young},
title = {A Hand Gesture Interface Device},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275628},
doi = {10.1145/1165387.275628},
abstract = {This paper reports on the development of a hand to machine interface device that provides real-time gesture, position and orientation information. The key element is a glove and the device as a whole incorporates a collection of technologies. Analog flex sensors on the glove measure finger bending. Hand position and orientation are measured either by ultrasonics, providing five degrees of freedom, or magnetic flux sensors, which provide six degrees of freedom. Piezoceramic benders provide the wearer of the glove with tactile feedback. These sensors are mounted on the light-weight glove and connected to the driving hardware via a small cable.Applications of the glove and its component technologies include its use in conjunction with a host computer which drives a real-time 3-dimensional model of the hand allowing the glove wearer to manipulate computer-generated objects as if they were real, interpretation of finger-spelling, evaluation of hand impairment in addition to providing an interface to a visual programming language.},
journal = {SIGCHI Bull.},
month = may,
pages = {189–192},
numpages = {4},
keywords = {user interface, motor interface, gesture recognition, tactile interface, human interface}
}

@inproceedings{10.1145/29933.275629,
author = {Graber, Jeffrey and Lefebvre, Kevin and Sciulli, Michael and Leich, Donald and Novacek, Milan and Ross, David and Zeltzer, David and Sturman, David},
title = {Developing Computer Animation Packages (Panel)},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275629},
doi = {10.1145/29933.275629},
abstract = {Specialized computer architectures can provide better price/performance for executing image processing and graphics applications than general purpose designs. Two processors are presented that use parallel SIMD data paths to support common graphics data structures as primitive operands in arithmetic expressions. A variant of the C language has been implemented to allow high level language coding of user applications on these processors. High level programming support is designed into the processor architecture that implements parallel object data typing and parallel conditional evaluation in hardware.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {193–196},
numpages = {4},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275629,
author = {Graber, Jeffrey and Lefebvre, Kevin and Sciulli, Michael and Leich, Donald and Novacek, Milan and Ross, David and Zeltzer, David and Sturman, David},
title = {Developing Computer Animation Packages (Panel)},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275629},
doi = {10.1145/30851.275629},
abstract = {Specialized computer architectures can provide better price/performance for executing image processing and graphics applications than general purpose designs. Two processors are presented that use parallel SIMD data paths to support common graphics data structures as primitive operands in arithmetic expressions. A variant of the C language has been implemented to allow high level language coding of user applications on these processors. High level programming support is designed into the processor architecture that implements parallel object data typing and parallel conditional evaluation in hardware.},
journal = {SIGCHI Bull.},
month = may,
pages = {193–196},
numpages = {4}
}

@article{10.1145/1165387.275629,
author = {Graber, Jeffrey and Lefebvre, Kevin and Sciulli, Michael and Leich, Donald and Novacek, Milan and Ross, David and Zeltzer, David and Sturman, David},
title = {Developing Computer Animation Packages (Panel)},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275629},
doi = {10.1145/1165387.275629},
abstract = {Specialized computer architectures can provide better price/performance for executing image processing and graphics applications than general purpose designs. Two processors are presented that use parallel SIMD data paths to support common graphics data structures as primitive operands in arithmetic expressions. A variant of the C language has been implemented to allow high level language coding of user applications on these processors. High level programming support is designed into the processor architecture that implements parallel object data typing and parallel conditional evaluation in hardware.},
journal = {SIGCHI Bull.},
month = may,
pages = {193–196},
numpages = {4}
}

@inproceedings{10.1145/29933.275630,
author = {Casner, Stephen and Lewis, Clayton},
title = {Learning about Hidden Events in System Interactions},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275630},
doi = {10.1145/29933.275630},
abstract = {Understanding how to use a computer system often requires knowledge of hidden events: things which happen as a result of user actions but which produce no immediate perceptible effect. How do users learn about these events? Will learners explain the mechanism in detail or only at the level at which they are able to use it? We extend Lewis' EXPL model of causal analysis, incorporating ideas from Miyake, Draper, and Dietterich, to give an account of learning about hidden events from examples. We present experimental evidence suggesting that violations of user expectations trigger a process in which hidden events are hypothesized and subsequently linked to user actions using schemata for general classes of situations which violate user expectations.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {197–203},
numpages = {7},
keywords = {explanations, example-based learning, models of learning},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275630,
author = {Casner, Stephen and Lewis, Clayton},
title = {Learning about Hidden Events in System Interactions},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275630},
doi = {10.1145/30851.275630},
abstract = {Understanding how to use a computer system often requires knowledge of hidden events: things which happen as a result of user actions but which produce no immediate perceptible effect. How do users learn about these events? Will learners explain the mechanism in detail or only at the level at which they are able to use it? We extend Lewis' EXPL model of causal analysis, incorporating ideas from Miyake, Draper, and Dietterich, to give an account of learning about hidden events from examples. We present experimental evidence suggesting that violations of user expectations trigger a process in which hidden events are hypothesized and subsequently linked to user actions using schemata for general classes of situations which violate user expectations.},
journal = {SIGCHI Bull.},
month = may,
pages = {197–203},
numpages = {7},
keywords = {explanations, example-based learning, models of learning}
}

@article{10.1145/1165387.275630,
author = {Casner, Stephen and Lewis, Clayton},
title = {Learning about Hidden Events in System Interactions},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275630},
doi = {10.1145/1165387.275630},
abstract = {Understanding how to use a computer system often requires knowledge of hidden events: things which happen as a result of user actions but which produce no immediate perceptible effect. How do users learn about these events? Will learners explain the mechanism in detail or only at the level at which they are able to use it? We extend Lewis' EXPL model of causal analysis, incorporating ideas from Miyake, Draper, and Dietterich, to give an account of learning about hidden events from examples. We present experimental evidence suggesting that violations of user expectations trigger a process in which hidden events are hypothesized and subsequently linked to user actions using schemata for general classes of situations which violate user expectations.},
journal = {SIGCHI Bull.},
month = may,
pages = {197–203},
numpages = {7},
keywords = {models of learning, explanations, example-based learning}
}

@inproceedings{10.1145/29933.275631,
author = {Tetzlaff, Linda},
title = {Transfer of Learning: Beyond Common Elements},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275631},
doi = {10.1145/29933.275631},
abstract = {An experiment on transfer of learning using text editors revealed significant differences in performance, based on the learning experience of the subjects. The set of commands of a text editor was divided into four subsets. Different groups of subjects learned these subsets in different orders. Depending on the order of learning, subjects formed different concepts of the editor as manifest by their choice of commands, their errors, and their model of the editor, elicited by a sorting task. Pragmatic production model approaches to transfer would need significant enhancement to accommodate this result.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {205–210},
numpages = {6},
keywords = {human factors, production models, cognitive skills, transfer, text editing},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275631,
author = {Tetzlaff, Linda},
title = {Transfer of Learning: Beyond Common Elements},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275631},
doi = {10.1145/30851.275631},
abstract = {An experiment on transfer of learning using text editors revealed significant differences in performance, based on the learning experience of the subjects. The set of commands of a text editor was divided into four subsets. Different groups of subjects learned these subsets in different orders. Depending on the order of learning, subjects formed different concepts of the editor as manifest by their choice of commands, their errors, and their model of the editor, elicited by a sorting task. Pragmatic production model approaches to transfer would need significant enhancement to accommodate this result.},
journal = {SIGCHI Bull.},
month = may,
pages = {205–210},
numpages = {6},
keywords = {cognitive skills, text editing, human factors, transfer, production models}
}

@article{10.1145/1165387.275631,
author = {Tetzlaff, Linda},
title = {Transfer of Learning: Beyond Common Elements},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275631},
doi = {10.1145/1165387.275631},
abstract = {An experiment on transfer of learning using text editors revealed significant differences in performance, based on the learning experience of the subjects. The set of commands of a text editor was divided into four subsets. Different groups of subjects learned these subsets in different orders. Depending on the order of learning, subjects formed different concepts of the editor as manifest by their choice of commands, their errors, and their model of the editor, elicited by a sorting task. Pragmatic production model approaches to transfer would need significant enhancement to accommodate this result.},
journal = {SIGCHI Bull.},
month = may,
pages = {205–210},
numpages = {6},
keywords = {cognitive skills, text editing, production models, human factors, transfer}
}

@inproceedings{10.1145/29933.275632,
author = {Danahy, John W.},
title = {Sophisticated Image Rendering in Environmental Design Review},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275632},
doi = {10.1145/29933.275632},
abstract = {The Landscape Architecture Programme and the Computer Systems Research Institute at the University of Toronto undertook two studies using advanced rendering tools pioneered in the areas of computer animation and graphic art. Through two professional landscape architectural design studies we explored the potential role and impact of computer simulation in the initial, more creative phases of the design work. Advanced image rendering hardware and software were used to produce high quality computer drawings of design concepts. The techniques employed in this study are unique in their application to environmental design where they dramatically improve the designer's opportunities to simulate realistic images of proposed design alternatives and to consider the visual and spatial implications of such alternatives.The case studies represented in the paper were undertaken for the National Capital Commission in Ottawa, Canada. The first project is an urban design massing study called the “Parliamentary Precinct Study” and the second project is a detailed design of the “Ceremonial Routes” in Ottawa.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {211–218},
numpages = {8},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275632,
author = {Danahy, John W.},
title = {Sophisticated Image Rendering in Environmental Design Review},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275632},
doi = {10.1145/30851.275632},
abstract = {The Landscape Architecture Programme and the Computer Systems Research Institute at the University of Toronto undertook two studies using advanced rendering tools pioneered in the areas of computer animation and graphic art. Through two professional landscape architectural design studies we explored the potential role and impact of computer simulation in the initial, more creative phases of the design work. Advanced image rendering hardware and software were used to produce high quality computer drawings of design concepts. The techniques employed in this study are unique in their application to environmental design where they dramatically improve the designer's opportunities to simulate realistic images of proposed design alternatives and to consider the visual and spatial implications of such alternatives.The case studies represented in the paper were undertaken for the National Capital Commission in Ottawa, Canada. The first project is an urban design massing study called the “Parliamentary Precinct Study” and the second project is a detailed design of the “Ceremonial Routes” in Ottawa.},
journal = {SIGCHI Bull.},
month = may,
pages = {211–218},
numpages = {8}
}

@article{10.1145/1165387.275632,
author = {Danahy, John W.},
title = {Sophisticated Image Rendering in Environmental Design Review},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275632},
doi = {10.1145/1165387.275632},
abstract = {The Landscape Architecture Programme and the Computer Systems Research Institute at the University of Toronto undertook two studies using advanced rendering tools pioneered in the areas of computer animation and graphic art. Through two professional landscape architectural design studies we explored the potential role and impact of computer simulation in the initial, more creative phases of the design work. Advanced image rendering hardware and software were used to produce high quality computer drawings of design concepts. The techniques employed in this study are unique in their application to environmental design where they dramatically improve the designer's opportunities to simulate realistic images of proposed design alternatives and to consider the visual and spatial implications of such alternatives.The case studies represented in the paper were undertaken for the National Capital Commission in Ottawa, Canada. The first project is an urban design massing study called the “Parliamentary Precinct Study” and the second project is a detailed design of the “Ceremonial Routes” in Ottawa.},
journal = {SIGCHI Bull.},
month = may,
pages = {211–218},
numpages = {8}
}

@inproceedings{10.1145/29933.275633,
author = {Szab\'{o}, Kevin S. B. and Elmasry, Mohamed I.},
title = {The User Interface and Program Structure of a Graphical VLSI Layout Editor},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275633},
doi = {10.1145/29933.275633},
abstract = {In this paper the user interface and program organization of the SYMPLE VLSI symbolic layout editor is examined. The user interface is driven by a small interpreter that is constructed from a LISP-like language at run time and has access to a consistent library of menus and graphical information-gathering functions. To improve maintainability, the editor has been constructed in a modular form with well-defined interfaces.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {219–225},
numpages = {7},
keywords = {user interface, VLSI editor, symbolic layout, CAD/CAM},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275633,
author = {Szab\'{o}, Kevin S. B. and Elmasry, Mohamed I.},
title = {The User Interface and Program Structure of a Graphical VLSI Layout Editor},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275633},
doi = {10.1145/1165387.275633},
abstract = {In this paper the user interface and program organization of the SYMPLE VLSI symbolic layout editor is examined. The user interface is driven by a small interpreter that is constructed from a LISP-like language at run time and has access to a consistent library of menus and graphical information-gathering functions. To improve maintainability, the editor has been constructed in a modular form with well-defined interfaces.},
journal = {SIGCHI Bull.},
month = may,
pages = {219–225},
numpages = {7},
keywords = {symbolic layout, CAD/CAM, user interface, VLSI editor}
}

@article{10.1145/30851.275633,
author = {Szab\'{o}, Kevin S. B. and Elmasry, Mohamed I.},
title = {The User Interface and Program Structure of a Graphical VLSI Layout Editor},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275633},
doi = {10.1145/30851.275633},
abstract = {In this paper the user interface and program organization of the SYMPLE VLSI symbolic layout editor is examined. The user interface is driven by a small interpreter that is constructed from a LISP-like language at run time and has access to a consistent library of menus and graphical information-gathering functions. To improve maintainability, the editor has been constructed in a modular form with well-defined interfaces.},
journal = {SIGCHI Bull.},
month = may,
pages = {219–225},
numpages = {7},
keywords = {symbolic layout, VLSI editor, user interface, CAD/CAM}
}

@inproceedings{10.1145/29933.275634,
author = {Greif, Irene and Curtis, Bill and Krasner, Herb and Malone, Thomas W. and Shneiderman, Ben},
title = {Computer-Supported Cooperative Work (Panel): Is This REALLY a New Field of Research?},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275634},
doi = {10.1145/29933.275634},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {227–228},
numpages = {2},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275634,
author = {Greif, Irene and Curtis, Bill and Krasner, Herb and Malone, Thomas W. and Shneiderman, Ben},
title = {Computer-Supported Cooperative Work (Panel): Is This REALLY a New Field of Research?},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275634},
doi = {10.1145/1165387.275634},
journal = {SIGCHI Bull.},
month = may,
pages = {227–228},
numpages = {2}
}

@article{10.1145/30851.275634,
author = {Greif, Irene and Curtis, Bill and Krasner, Herb and Malone, Thomas W. and Shneiderman, Ben},
title = {Computer-Supported Cooperative Work (Panel): Is This REALLY a New Field of Research?},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275634},
doi = {10.1145/30851.275634},
journal = {SIGCHI Bull.},
month = may,
pages = {227–228},
numpages = {2}
}

@inproceedings{10.1145/29933.275635,
author = {Flecchia, Mark A. and Bergeron, R. Daniel},
title = {Specifying Complex Dialogs in ALGAE},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275635},
doi = {10.1145/29933.275635},
abstract = {The complexity and high development costs of user interfaces has led to research into the design of User Interface Management Systems (UIMSs). At the heart of a UIMS is a facility for specifying a dialog control component, which processes user actions and coordinates program responses. This paper describes a language called ALGAE, which allows the specification of multi-threaded, event driven dialogs.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {229–234},
numpages = {6},
keywords = {computer-user dialogs, user interface management systems, event based languages},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275635,
author = {Flecchia, Mark A. and Bergeron, R. Daniel},
title = {Specifying Complex Dialogs in ALGAE},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275635},
doi = {10.1145/1165387.275635},
abstract = {The complexity and high development costs of user interfaces has led to research into the design of User Interface Management Systems (UIMSs). At the heart of a UIMS is a facility for specifying a dialog control component, which processes user actions and coordinates program responses. This paper describes a language called ALGAE, which allows the specification of multi-threaded, event driven dialogs.},
journal = {SIGCHI Bull.},
month = may,
pages = {229–234},
numpages = {6},
keywords = {user interface management systems, event based languages, computer-user dialogs}
}

@article{10.1145/30851.275635,
author = {Flecchia, Mark A. and Bergeron, R. Daniel},
title = {Specifying Complex Dialogs in ALGAE},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275635},
doi = {10.1145/30851.275635},
abstract = {The complexity and high development costs of user interfaces has led to research into the design of User Interface Management Systems (UIMSs). At the heart of a UIMS is a facility for specifying a dialog control component, which processes user actions and coordinates program responses. This paper describes a language called ALGAE, which allows the specification of multi-threaded, event driven dialogs.},
journal = {SIGCHI Bull.},
month = may,
pages = {229–234},
numpages = {6},
keywords = {event based languages, user interface management systems, computer-user dialogs}
}

@inproceedings{10.1145/29933.275636,
author = {Szekely, Pedro},
title = {Modular Implementation of Presentations},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275636},
doi = {10.1145/29933.275636},
abstract = {The presentation of an application program specifies how the data and operations provided by an application are presented to users. Most traditional techniques for implementing presentations lead to unstructured, unmodular implementations that are hard to construct and change. We present a model of presentation that identifies the dependencies between the presentation and functionality portions of an application. Based on this model, we show how several implementation techniques can be used to construct presentations in a modular way.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {235–240},
numpages = {6},
keywords = {user interface management systems, graphical user interfaces, semantics of interaction, object-oriented programming},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275636,
author = {Szekely, Pedro},
title = {Modular Implementation of Presentations},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275636},
doi = {10.1145/1165387.275636},
abstract = {The presentation of an application program specifies how the data and operations provided by an application are presented to users. Most traditional techniques for implementing presentations lead to unstructured, unmodular implementations that are hard to construct and change. We present a model of presentation that identifies the dependencies between the presentation and functionality portions of an application. Based on this model, we show how several implementation techniques can be used to construct presentations in a modular way.},
journal = {SIGCHI Bull.},
month = may,
pages = {235–240},
numpages = {6},
keywords = {graphical user interfaces, object-oriented programming, user interface management systems, semantics of interaction}
}

@article{10.1145/30851.275636,
author = {Szekely, Pedro},
title = {Modular Implementation of Presentations},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275636},
doi = {10.1145/30851.275636},
abstract = {The presentation of an application program specifies how the data and operations provided by an application are presented to users. Most traditional techniques for implementing presentations lead to unstructured, unmodular implementations that are hard to construct and change. We present a model of presentation that identifies the dependencies between the presentation and functionality portions of an application. Based on this model, we show how several implementation techniques can be used to construct presentations in a modular way.},
journal = {SIGCHI Bull.},
month = may,
pages = {235–240},
numpages = {6},
keywords = {user interface management systems, semantics of interaction, graphical user interfaces, object-oriented programming}
}

@inproceedings{10.1145/29933.275637,
author = {Hill, Ralph D.},
title = {Event-Response Systems: A Technique for Specifying Multi-Threaded Dialogues},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275637},
doi = {10.1145/29933.275637},
abstract = {Event-Response Systems are a technique for specifying the syntax of multi-threaded dialogues. They are based on the paradigm of specifying system responses to events generated by the user. They can compactly represent the concurrency needed to implement multi-threaded dialogues. This concurrency support also allows interfaces to be structured differently than is possible with existing dialogue specification systems based on state transition specifications or grammars. This flexibility allows many interfaces, especially direct manipulation interfaces, to be specified with a more modular structure than most existing systems allow.Event-Response Systems are described formally, and a dialogue specification language based on the ERS formalism is informally presented. Some example uses and implementation techniques are also described.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {241–248},
numpages = {8},
keywords = {concurrency, user interface management systems},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275637,
author = {Hill, Ralph D.},
title = {Event-Response Systems: A Technique for Specifying Multi-Threaded Dialogues},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275637},
doi = {10.1145/1165387.275637},
abstract = {Event-Response Systems are a technique for specifying the syntax of multi-threaded dialogues. They are based on the paradigm of specifying system responses to events generated by the user. They can compactly represent the concurrency needed to implement multi-threaded dialogues. This concurrency support also allows interfaces to be structured differently than is possible with existing dialogue specification systems based on state transition specifications or grammars. This flexibility allows many interfaces, especially direct manipulation interfaces, to be specified with a more modular structure than most existing systems allow.Event-Response Systems are described formally, and a dialogue specification language based on the ERS formalism is informally presented. Some example uses and implementation techniques are also described.},
journal = {SIGCHI Bull.},
month = may,
pages = {241–248},
numpages = {8},
keywords = {concurrency, user interface management systems}
}

@article{10.1145/30851.275637,
author = {Hill, Ralph D.},
title = {Event-Response Systems: A Technique for Specifying Multi-Threaded Dialogues},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275637},
doi = {10.1145/30851.275637},
abstract = {Event-Response Systems are a technique for specifying the syntax of multi-threaded dialogues. They are based on the paradigm of specifying system responses to events generated by the user. They can compactly represent the concurrency needed to implement multi-threaded dialogues. This concurrency support also allows interfaces to be structured differently than is possible with existing dialogue specification systems based on state transition specifications or grammars. This flexibility allows many interfaces, especially direct manipulation interfaces, to be specified with a more modular structure than most existing systems allow.Event-Response Systems are described formally, and a dialogue specification language based on the ERS formalism is informally presented. Some example uses and implementation techniques are also described.},
journal = {SIGCHI Bull.},
month = may,
pages = {241–248},
numpages = {8},
keywords = {user interface management systems, concurrency}
}

@inproceedings{10.1145/29933.275638,
author = {Geist, Robert and Allen, Robert and Nowaczyk, Ronald},
title = {Towards a Model of User Perception of Computer Systems Response Time},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275638},
doi = {10.1145/29933.275638},
abstract = {The foundational structure of a new model of user perception of computer system response time is proposed. It is suggested that the development of such a model is now of central importance to the computer system configuration design effort. The new model is seen to explain the success of an earlier measure, designed for the non-interactive environment, in predicting user estimates of response time for interactive systems. The results of new empirical studies, designed to delineate specific components of the model, are also discussed.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {249–253},
numpages = {5},
keywords = {performance measures, empirical studies, configuration design, models, user perception},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275638,
author = {Geist, Robert and Allen, Robert and Nowaczyk, Ronald},
title = {Towards a Model of User Perception of Computer Systems Response Time},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275638},
doi = {10.1145/1165387.275638},
abstract = {The foundational structure of a new model of user perception of computer system response time is proposed. It is suggested that the development of such a model is now of central importance to the computer system configuration design effort. The new model is seen to explain the success of an earlier measure, designed for the non-interactive environment, in predicting user estimates of response time for interactive systems. The results of new empirical studies, designed to delineate specific components of the model, are also discussed.},
journal = {SIGCHI Bull.},
month = may,
pages = {249–253},
numpages = {5},
keywords = {user perception, models, performance measures, empirical studies, configuration design}
}

@article{10.1145/30851.275638,
author = {Geist, Robert and Allen, Robert and Nowaczyk, Ronald},
title = {Towards a Model of User Perception of Computer Systems Response Time},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275638},
doi = {10.1145/30851.275638},
abstract = {The foundational structure of a new model of user perception of computer system response time is proposed. It is suggested that the development of such a model is now of central importance to the computer system configuration design effort. The new model is seen to explain the success of an earlier measure, designed for the non-interactive environment, in predicting user estimates of response time for interactive systems. The results of new empirical studies, designed to delineate specific components of the model, are also discussed.},
journal = {SIGCHI Bull.},
month = may,
pages = {249–253},
numpages = {5},
keywords = {empirical studies, models, user perception, performance measures, configuration design}
}

@inproceedings{10.1145/29933.275639,
author = {Somberg, Benjamin L.},
title = {A Comparison of Rule-Based and Positionally Constant Arrangements of Computer Menu Items},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275639},
doi = {10.1145/29933.275639},
abstract = {An experiment was conducted to evaluate user performance under four different menu item arrangements: alphabetic, probability of selection (most popular choices are positioned near the beginning of the list), random, and positionally constant (consistent assignment of individual items to screen positions). During the initial stages of practice, the rule-based approaches produced faster mean search times, but after moderate amounts of practice, the positionally constant arrangement appeared to be most efficient. People seem to remember quite easily the location of items on a display, indicating that positional constancy can be an important factor in increasing the efficiency of the search of computer menus and other displays.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {255–260},
numpages = {6},
keywords = {visual displays, computer menus, screen formatting, visual search, human-computer interaction},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275639,
author = {Somberg, Benjamin L.},
title = {A Comparison of Rule-Based and Positionally Constant Arrangements of Computer Menu Items},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275639},
doi = {10.1145/30851.275639},
abstract = {An experiment was conducted to evaluate user performance under four different menu item arrangements: alphabetic, probability of selection (most popular choices are positioned near the beginning of the list), random, and positionally constant (consistent assignment of individual items to screen positions). During the initial stages of practice, the rule-based approaches produced faster mean search times, but after moderate amounts of practice, the positionally constant arrangement appeared to be most efficient. People seem to remember quite easily the location of items on a display, indicating that positional constancy can be an important factor in increasing the efficiency of the search of computer menus and other displays.},
journal = {SIGCHI Bull.},
month = may,
pages = {255–260},
numpages = {6},
keywords = {visual search, human-computer interaction, visual displays, screen formatting, computer menus}
}

@article{10.1145/1165387.275639,
author = {Somberg, Benjamin L.},
title = {A Comparison of Rule-Based and Positionally Constant Arrangements of Computer Menu Items},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275639},
doi = {10.1145/1165387.275639},
abstract = {An experiment was conducted to evaluate user performance under four different menu item arrangements: alphabetic, probability of selection (most popular choices are positioned near the beginning of the list), random, and positionally constant (consistent assignment of individual items to screen positions). During the initial stages of practice, the rule-based approaches produced faster mean search times, but after moderate amounts of practice, the positionally constant arrangement appeared to be most efficient. People seem to remember quite easily the location of items on a display, indicating that positional constancy can be an important factor in increasing the efficiency of the search of computer menus and other displays.},
journal = {SIGCHI Bull.},
month = may,
pages = {255–260},
numpages = {6},
keywords = {visual displays, computer menus, visual search, screen formatting, human-computer interaction}
}

@inproceedings{10.1145/29933.275640,
author = {Jeffries, Robin and Rosenberg, Jarrett},
title = {Comparing a Form-Based and a Language-Based User Interface for Instructing a Mail Program},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275640},
doi = {10.1145/29933.275640},
abstract = {In the domain of interaction languages, forms have been found to be of value in allowing users, especially non-programmers, to specify objects and operations with a minimum of training, time, and errors. Most of that research, however, has been on the use of data base query languages. The present research found that in a procedural task of specifying mail filtering instructions, non-programmers using a form were as fast as programmers using a procedural language, although programmers using the form were faster still.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {261–266},
numpages = {6},
keywords = {forms, interaction styles, design trade-offs},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275640,
author = {Jeffries, Robin and Rosenberg, Jarrett},
title = {Comparing a Form-Based and a Language-Based User Interface for Instructing a Mail Program},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275640},
doi = {10.1145/30851.275640},
abstract = {In the domain of interaction languages, forms have been found to be of value in allowing users, especially non-programmers, to specify objects and operations with a minimum of training, time, and errors. Most of that research, however, has been on the use of data base query languages. The present research found that in a procedural task of specifying mail filtering instructions, non-programmers using a form were as fast as programmers using a procedural language, although programmers using the form were faster still.},
journal = {SIGCHI Bull.},
month = may,
pages = {261–266},
numpages = {6},
keywords = {forms, interaction styles, design trade-offs}
}

@article{10.1145/1165387.275640,
author = {Jeffries, Robin and Rosenberg, Jarrett},
title = {Comparing a Form-Based and a Language-Based User Interface for Instructing a Mail Program},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275640},
doi = {10.1145/1165387.275640},
abstract = {In the domain of interaction languages, forms have been found to be of value in allowing users, especially non-programmers, to specify objects and operations with a minimum of training, time, and errors. Most of that research, however, has been on the use of data base query languages. The present research found that in a procedural task of specifying mail filtering instructions, non-programmers using a form were as fast as programmers using a procedural language, although programmers using the form were faster still.},
journal = {SIGCHI Bull.},
month = may,
pages = {261–266},
numpages = {6},
keywords = {design trade-offs, forms, interaction styles}
}

@inproceedings{10.1145/29933.275641,
author = {Neches, Robert and Brown, John Seely and Sondheimer, Norm and Malone, Tom and Williams, Mike},
title = {Intelligence in Interfaces (Panel)},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275641},
doi = {10.1145/29933.275641},
abstract = {The purpose of this symposium is three-fold:First, by presenting a selection of our work as examples, we seek to define a model of intelligent interaction and illustrate points in the interface process where artificial intelligence can play a role.Second, by comparing the approaches represented in our efforts, we intend to explore a fundamental philosophical difference in the field of intelligent interfaces: the distinction between the power tools vs. the intelligent assistant paradigms. (As part of this discussion, we intend to consider how to mine the rich ground that lies between these two extremes.)Third, by examining the design process underlying our examples, we seek to provide a better understanding of the relationship between AI interface tools and the applications that they communicate with.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {267–269},
numpages = {3},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275641,
author = {Neches, Robert and Brown, John Seely and Sondheimer, Norm and Malone, Tom and Williams, Mike},
title = {Intelligence in Interfaces (Panel)},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275641},
doi = {10.1145/30851.275641},
abstract = {The purpose of this symposium is three-fold:First, by presenting a selection of our work as examples, we seek to define a model of intelligent interaction and illustrate points in the interface process where artificial intelligence can play a role.Second, by comparing the approaches represented in our efforts, we intend to explore a fundamental philosophical difference in the field of intelligent interfaces: the distinction between the power tools vs. the intelligent assistant paradigms. (As part of this discussion, we intend to consider how to mine the rich ground that lies between these two extremes.)Third, by examining the design process underlying our examples, we seek to provide a better understanding of the relationship between AI interface tools and the applications that they communicate with.},
journal = {SIGCHI Bull.},
month = may,
pages = {267–269},
numpages = {3}
}

@article{10.1145/1165387.275641,
author = {Neches, Robert and Brown, John Seely and Sondheimer, Norm and Malone, Tom and Williams, Mike},
title = {Intelligence in Interfaces (Panel)},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275641},
doi = {10.1145/1165387.275641},
abstract = {The purpose of this symposium is three-fold:First, by presenting a selection of our work as examples, we seek to define a model of intelligent interaction and illustrate points in the interface process where artificial intelligence can play a role.Second, by comparing the approaches represented in our efforts, we intend to explore a fundamental philosophical difference in the field of intelligent interfaces: the distinction between the power tools vs. the intelligent assistant paradigms. (As part of this discussion, we intend to consider how to mine the rich ground that lies between these two extremes.)Third, by examining the design process underlying our examples, we seek to provide a better understanding of the relationship between AI interface tools and the applications that they communicate with.},
journal = {SIGCHI Bull.},
month = may,
pages = {267–269},
numpages = {3}
}

@inproceedings{10.1145/29933.275642,
author = {Myers, Brad A.},
title = {Creating Dynamic Interaction Techniques by Demonstration},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275642},
doi = {10.1145/29933.275642},
abstract = {When creating highly-interactive, Direct Manipulation interfaces, one of the most difficult design and implementation tasks is handling the mouse and other input devices. Peridot, a new User Interface Management System, addresses this problem by allowing the user interface designer to demonstrate how the input devices should be handled by giving an example of the interface in action. The designer uses sample values for parameters, and the system automatically infers the general operation and creates the code. After an interaction is specified, it can immediately be executed and edited. This promotes extremely rapid prototyping since it is very easy to design, implement and modify mouse-based interfaces. Peridot also supports additional input devices such as touch tablets, as well as multiple input devices operating in parallel (such as one in each hand) in a natural, easy to specify manner. This is implemented using active values, which are like variables except that the objects that depend on active values are updated immediately whenever they change. Active values are a straightforward and efficient mechanism for implementing dynamic interactions.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {271–278},
numpages = {8},
keywords = {interaction techniques, user interface management systems, direct manipulation, user interface design, visual programming, programming by example},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275642,
author = {Myers, Brad A.},
title = {Creating Dynamic Interaction Techniques by Demonstration},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275642},
doi = {10.1145/30851.275642},
abstract = {When creating highly-interactive, Direct Manipulation interfaces, one of the most difficult design and implementation tasks is handling the mouse and other input devices. Peridot, a new User Interface Management System, addresses this problem by allowing the user interface designer to demonstrate how the input devices should be handled by giving an example of the interface in action. The designer uses sample values for parameters, and the system automatically infers the general operation and creates the code. After an interaction is specified, it can immediately be executed and edited. This promotes extremely rapid prototyping since it is very easy to design, implement and modify mouse-based interfaces. Peridot also supports additional input devices such as touch tablets, as well as multiple input devices operating in parallel (such as one in each hand) in a natural, easy to specify manner. This is implemented using active values, which are like variables except that the objects that depend on active values are updated immediately whenever they change. Active values are a straightforward and efficient mechanism for implementing dynamic interactions.},
journal = {SIGCHI Bull.},
month = may,
pages = {271–278},
numpages = {8},
keywords = {visual programming, user interface design, user interface management systems, interaction techniques, programming by example, direct manipulation}
}

@article{10.1145/1165387.275642,
author = {Myers, Brad A.},
title = {Creating Dynamic Interaction Techniques by Demonstration},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275642},
doi = {10.1145/1165387.275642},
abstract = {When creating highly-interactive, Direct Manipulation interfaces, one of the most difficult design and implementation tasks is handling the mouse and other input devices. Peridot, a new User Interface Management System, addresses this problem by allowing the user interface designer to demonstrate how the input devices should be handled by giving an example of the interface in action. The designer uses sample values for parameters, and the system automatically infers the general operation and creates the code. After an interaction is specified, it can immediately be executed and edited. This promotes extremely rapid prototyping since it is very easy to design, implement and modify mouse-based interfaces. Peridot also supports additional input devices such as touch tablets, as well as multiple input devices operating in parallel (such as one in each hand) in a natural, easy to specify manner. This is implemented using active values, which are like variables except that the objects that depend on active values are updated immediately whenever they change. Active values are a straightforward and efficient mechanism for implementing dynamic interactions.},
journal = {SIGCHI Bull.},
month = may,
pages = {271–278},
numpages = {8},
keywords = {direct manipulation, interaction techniques, visual programming, user interface management systems, user interface design, programming by example}
}

@inproceedings{10.1145/29933.275643,
author = {Helfman, J. I.},
title = {Panther: A Specification System for Graphical Controls},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275643},
doi = {10.1145/29933.275643},
abstract = {An experimental graphical control specification system, called Panther, has been written in C for UNIX®-based applications. Unlike similar systems, which focus on combining interaction techniques, Panther allows the specification of low-level interactions by invoking user-selectable subroutines for input-device transitions. A Panther interface is specified in a textual table as a set of hierarchically nested regions. Regions can model any control device, such as menu buttons, slider-bars, switches, alphanumeric displays, or even combinations of other regions. Panther does not rely on special hardware, extensive software, or interprocess communication.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {279–284},
numpages = {6},
keywords = {graphical user interfaces, graphical controls, graphical interface specification},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275643,
author = {Helfman, J. I.},
title = {Panther: A Specification System for Graphical Controls},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275643},
doi = {10.1145/30851.275643},
abstract = {An experimental graphical control specification system, called Panther, has been written in C for UNIX®-based applications. Unlike similar systems, which focus on combining interaction techniques, Panther allows the specification of low-level interactions by invoking user-selectable subroutines for input-device transitions. A Panther interface is specified in a textual table as a set of hierarchically nested regions. Regions can model any control device, such as menu buttons, slider-bars, switches, alphanumeric displays, or even combinations of other regions. Panther does not rely on special hardware, extensive software, or interprocess communication.},
journal = {SIGCHI Bull.},
month = may,
pages = {279–284},
numpages = {6},
keywords = {graphical controls, graphical user interfaces, graphical interface specification}
}

@article{10.1145/1165387.275643,
author = {Helfman, J. I.},
title = {Panther: A Specification System for Graphical Controls},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275643},
doi = {10.1145/1165387.275643},
abstract = {An experimental graphical control specification system, called Panther, has been written in C for UNIX®-based applications. Unlike similar systems, which focus on combining interaction techniques, Panther allows the specification of low-level interactions by invoking user-selectable subroutines for input-device transitions. A Panther interface is specified in a textual table as a set of hierarchically nested regions. Regions can model any control device, such as menu buttons, slider-bars, switches, alphanumeric displays, or even combinations of other regions. Panther does not rely on special hardware, extensive software, or interprocess communication.},
journal = {SIGCHI Bull.},
month = may,
pages = {279–284},
numpages = {6},
keywords = {graphical interface specification, graphical user interfaces, graphical controls}
}

@inproceedings{10.1145/29933.275644,
author = {Fisher, Gene L. and Joy, Kenneth I.},
title = {A Control Panel Interface for Graphics and Image Processing Applications},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275644},
doi = {10.1145/29933.275644},
abstract = {This paper describes a graphical interface for application programs. The interface is based on the notion of a control panel. A control panel contains a browsable list of an application's parameters and a set of functions to control the application's execution. A variety of graphical knobs and gauges may be associated with any or all of the parameters to permit fine-grain execution control, including animation of an application's output. The control panel interface is integrated into the framework of an interactive programming environment for graphics and image processing applications. This integration is an important feature of the overall interface design.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {285–290},
numpages = {6},
keywords = {image processing applications, graphical interface, graphics applications, applications environment},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275644,
author = {Fisher, Gene L. and Joy, Kenneth I.},
title = {A Control Panel Interface for Graphics and Image Processing Applications},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275644},
doi = {10.1145/1165387.275644},
abstract = {This paper describes a graphical interface for application programs. The interface is based on the notion of a control panel. A control panel contains a browsable list of an application's parameters and a set of functions to control the application's execution. A variety of graphical knobs and gauges may be associated with any or all of the parameters to permit fine-grain execution control, including animation of an application's output. The control panel interface is integrated into the framework of an interactive programming environment for graphics and image processing applications. This integration is an important feature of the overall interface design.},
journal = {SIGCHI Bull.},
month = may,
pages = {285–290},
numpages = {6},
keywords = {image processing applications, graphics applications, applications environment, graphical interface}
}

@article{10.1145/30851.275644,
author = {Fisher, Gene L. and Joy, Kenneth I.},
title = {A Control Panel Interface for Graphics and Image Processing Applications},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275644},
doi = {10.1145/30851.275644},
abstract = {This paper describes a graphical interface for application programs. The interface is based on the notion of a control panel. A control panel contains a browsable list of an application's parameters and a set of functions to control the application's execution. A variety of graphical knobs and gauges may be associated with any or all of the parameters to permit fine-grain execution control, including animation of an application's output. The control panel interface is integrated into the framework of an interactive programming environment for graphics and image processing applications. This integration is an important feature of the overall interface design.},
journal = {SIGCHI Bull.},
month = may,
pages = {285–290},
numpages = {6},
keywords = {graphics applications, image processing applications, applications environment, graphical interface}
}

@inproceedings{10.1145/29933.275645,
author = {Young, Richard M. and Barnard, Phil},
title = {The Use of Scenarios in Human-Computer Interaction Research: Turbocharging the Tortoise of Cumulative Science},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275645},
doi = {10.1145/29933.275645},
abstract = {A scenario is an idealised but detailed description of a specific instance of human-computer interaction (HCI). A set of scenarios can be used as a “filter bank” to weed out theories whose scope is too narrow for them to apply to many real HCI situations. By helping redress the balance between generality and accuracy in theories derived from cognitive psychology, this use of scenarios (1) allows the researcher to build on empirical findings already established while avoiding the tar-pits associated with the experimental methodology, (2) enables the researcher to consider a range of phenomena in a single study, thereby directly addressing the question of the scope of the theory, and (3) ensures that the resulting theory will be applicable in HCI contexts.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {291–296},
numpages = {6},
keywords = {scenarios, research strategy, scope and accuracy of models, methodology},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275645,
author = {Young, Richard M. and Barnard, Phil},
title = {The Use of Scenarios in Human-Computer Interaction Research: Turbocharging the Tortoise of Cumulative Science},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275645},
doi = {10.1145/1165387.275645},
abstract = {A scenario is an idealised but detailed description of a specific instance of human-computer interaction (HCI). A set of scenarios can be used as a “filter bank” to weed out theories whose scope is too narrow for them to apply to many real HCI situations. By helping redress the balance between generality and accuracy in theories derived from cognitive psychology, this use of scenarios (1) allows the researcher to build on empirical findings already established while avoiding the tar-pits associated with the experimental methodology, (2) enables the researcher to consider a range of phenomena in a single study, thereby directly addressing the question of the scope of the theory, and (3) ensures that the resulting theory will be applicable in HCI contexts.},
journal = {SIGCHI Bull.},
month = may,
pages = {291–296},
numpages = {6},
keywords = {scenarios, methodology, research strategy, scope and accuracy of models}
}

@article{10.1145/30851.275645,
author = {Young, Richard M. and Barnard, Phil},
title = {The Use of Scenarios in Human-Computer Interaction Research: Turbocharging the Tortoise of Cumulative Science},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275645},
doi = {10.1145/30851.275645},
abstract = {A scenario is an idealised but detailed description of a specific instance of human-computer interaction (HCI). A set of scenarios can be used as a “filter bank” to weed out theories whose scope is too narrow for them to apply to many real HCI situations. By helping redress the balance between generality and accuracy in theories derived from cognitive psychology, this use of scenarios (1) allows the researcher to build on empirical findings already established while avoiding the tar-pits associated with the experimental methodology, (2) enables the researcher to consider a range of phenomena in a single study, thereby directly addressing the question of the scope of the theory, and (3) ensures that the resulting theory will be applicable in HCI contexts.},
journal = {SIGCHI Bull.},
month = may,
pages = {291–296},
numpages = {6},
keywords = {scenarios, methodology, scope and accuracy of models, research strategy}
}

@inproceedings{10.1145/29933.275646,
author = {Bailey, Wayne A. and Kay, Edwin J.},
title = {Structural Analysis of Verbal Data},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275646},
doi = {10.1145/29933.275646},
abstract = {Current methods of analyzing verbal reports (Protocol Analysis) from human-computer interactions fall short of their potential. Although there are systematic methods for collecting complete and objective verbal reports applicable to a broad range of problem-solving tasks, currently available analyses of verbal reports are ad hoc and apply only to well constrained tasks. Structural Analysis is a systematic method, currently under development, for analyzing real-world tasks involving human-computer interaction. Starting with a rule that assigns utterances to two dichotomous categories related to a behavior of interest, rules are generated that expose the goal building and evaluation underlying that behavior. The resulting data yield time distributions that characterize subjects' goal-directed behavior and that allow comparisons among tasks or among subjects.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {297–301},
numpages = {5},
keywords = {problem solving, protocol analysis, verbal data, cognitive engineering},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275646,
author = {Bailey, Wayne A. and Kay, Edwin J.},
title = {Structural Analysis of Verbal Data},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275646},
doi = {10.1145/1165387.275646},
abstract = {Current methods of analyzing verbal reports (Protocol Analysis) from human-computer interactions fall short of their potential. Although there are systematic methods for collecting complete and objective verbal reports applicable to a broad range of problem-solving tasks, currently available analyses of verbal reports are ad hoc and apply only to well constrained tasks. Structural Analysis is a systematic method, currently under development, for analyzing real-world tasks involving human-computer interaction. Starting with a rule that assigns utterances to two dichotomous categories related to a behavior of interest, rules are generated that expose the goal building and evaluation underlying that behavior. The resulting data yield time distributions that characterize subjects' goal-directed behavior and that allow comparisons among tasks or among subjects.},
journal = {SIGCHI Bull.},
month = may,
pages = {297–301},
numpages = {5},
keywords = {problem solving, cognitive engineering, protocol analysis, verbal data}
}

@article{10.1145/30851.275646,
author = {Bailey, Wayne A. and Kay, Edwin J.},
title = {Structural Analysis of Verbal Data},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275646},
doi = {10.1145/30851.275646},
abstract = {Current methods of analyzing verbal reports (Protocol Analysis) from human-computer interactions fall short of their potential. Although there are systematic methods for collecting complete and objective verbal reports applicable to a broad range of problem-solving tasks, currently available analyses of verbal reports are ad hoc and apply only to well constrained tasks. Structural Analysis is a systematic method, currently under development, for analyzing real-world tasks involving human-computer interaction. Starting with a rule that assigns utterances to two dichotomous categories related to a behavior of interest, rules are generated that expose the goal building and evaluation underlying that behavior. The resulting data yield time distributions that characterize subjects' goal-directed behavior and that allow comparisons among tasks or among subjects.},
journal = {SIGCHI Bull.},
month = may,
pages = {297–301},
numpages = {5},
keywords = {cognitive engineering, problem solving, protocol analysis, verbal data}
}

@inproceedings{10.1145/29933.275647,
author = {Kellogg, Wendy A. and Breen, Timothy J.},
title = {Evaluating User and System Models: Applying Scaling Techniques to Problems in Human-Computer Interaction},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275647},
doi = {10.1145/29933.275647},
abstract = {A user's mental model of a system should be an important determinant of performance and as well as a means of understanding why particular user errors occur. In particular, experienced users' models should be in closer agreement with the system than less experienced users' models, and deviations of expert models from the system should correspond to difficulties in performance and suggest ways that system usability could be improved. The present study explored the utility of scaling techniques for defining and comparing user and system models. The results support the assertion that with experience users' mental models approach the system model. However, even experienced users had significant deviations from the system model, leading to predictions of where experts would have difficulty using the system and suggestions for improving usability.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {303–308},
numpages = {6},
keywords = {user conceptual models, assessment of system usability, psychological scaling techniques, mental models},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275647,
author = {Kellogg, Wendy A. and Breen, Timothy J.},
title = {Evaluating User and System Models: Applying Scaling Techniques to Problems in Human-Computer Interaction},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275647},
doi = {10.1145/1165387.275647},
abstract = {A user's mental model of a system should be an important determinant of performance and as well as a means of understanding why particular user errors occur. In particular, experienced users' models should be in closer agreement with the system than less experienced users' models, and deviations of expert models from the system should correspond to difficulties in performance and suggest ways that system usability could be improved. The present study explored the utility of scaling techniques for defining and comparing user and system models. The results support the assertion that with experience users' mental models approach the system model. However, even experienced users had significant deviations from the system model, leading to predictions of where experts would have difficulty using the system and suggestions for improving usability.},
journal = {SIGCHI Bull.},
month = may,
pages = {303–308},
numpages = {6},
keywords = {psychological scaling techniques, mental models, user conceptual models, assessment of system usability}
}

@article{10.1145/30851.275647,
author = {Kellogg, Wendy A. and Breen, Timothy J.},
title = {Evaluating User and System Models: Applying Scaling Techniques to Problems in Human-Computer Interaction},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275647},
doi = {10.1145/30851.275647},
abstract = {A user's mental model of a system should be an important determinant of performance and as well as a means of understanding why particular user errors occur. In particular, experienced users' models should be in closer agreement with the system than less experienced users' models, and deviations of expert models from the system should correspond to difficulties in performance and suggest ways that system usability could be improved. The present study explored the utility of scaling techniques for defining and comparing user and system models. The results support the assertion that with experience users' mental models approach the system model. However, even experienced users had significant deviations from the system model, leading to predictions of where experts would have difficulty using the system and suggestions for improving usability.},
journal = {SIGCHI Bull.},
month = may,
pages = {303–308},
numpages = {6},
keywords = {assessment of system usability, psychological scaling techniques, mental models, user conceptual models}
}

@inproceedings{10.1145/29933.275648,
author = {Fuchs, Henry and Card, Stuart and Crow, Frank and Pizer, Stephen M.},
title = {Issues from the 1986 Workshop on Interactive 3D Graphics (Panel)},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275648},
doi = {10.1145/29933.275648},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {309},
numpages = {1},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275648,
author = {Fuchs, Henry and Card, Stuart and Crow, Frank and Pizer, Stephen M.},
title = {Issues from the 1986 Workshop on Interactive 3D Graphics (Panel)},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275648},
doi = {10.1145/1165387.275648},
journal = {SIGCHI Bull.},
month = may,
pages = {309},
numpages = {1}
}

@article{10.1145/30851.275648,
author = {Fuchs, Henry and Card, Stuart and Crow, Frank and Pizer, Stephen M.},
title = {Issues from the 1986 Workshop on Interactive 3D Graphics (Panel)},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275648},
doi = {10.1145/30851.275648},
journal = {SIGCHI Bull.},
month = may,
pages = {309},
numpages = {1}
}

@inproceedings{10.1145/29933.275649,
author = {Olsen, Dan R. and Green, Mark and Lantz, Keith A. and Schulert, Andrew and Sibert, John L.},
title = {Whiter (or Wither) UIMS?},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275649},
doi = {10.1145/29933.275649},
abstract = {The subject of User Interface Management Systems (UIMS) has been a topic of research and debate for the last several years. The goal of such systems has been to automate the production of user interface software. The problem of building quality user interfaces within available resources is a very important one as the demand for new interactive programs grows. Prototype UIMSs have been built and some software packages are presently being marketed as such. Many papers have been published on the topic.There still, however, remain a number of unanswered questions. Is a UIMS an effective tool for building high quality user interfaces or is the run-time cost of abstracting out the user interface too high? Why are there not more UIMSs available and why are they not more frequently used? Is simple programmer productivity alone sufficient motivation for learning and adopting yet another programming tool? What is the difference, if any, between a “user interface toolbox”, a windowing system and a UIMS? What are the differences between a UIMS and the screen and editor generators found in fourth generation languages? In fact, exactly what is a UIMS?In order to discuss these questions and to reassess the state of the UIMS art, SIGGRAPH sponsored a workshop on these issues (proceedings will be published in Computer Graphics in 1987). The panelists represent four subgroups who have each addressed these problems from different points of view.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {311–314},
numpages = {4},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/1165387.275649,
author = {Olsen, Dan R. and Green, Mark and Lantz, Keith A. and Schulert, Andrew and Sibert, John L.},
title = {Whiter (or Wither) UIMS?},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275649},
doi = {10.1145/1165387.275649},
abstract = {The subject of User Interface Management Systems (UIMS) has been a topic of research and debate for the last several years. The goal of such systems has been to automate the production of user interface software. The problem of building quality user interfaces within available resources is a very important one as the demand for new interactive programs grows. Prototype UIMSs have been built and some software packages are presently being marketed as such. Many papers have been published on the topic.There still, however, remain a number of unanswered questions. Is a UIMS an effective tool for building high quality user interfaces or is the run-time cost of abstracting out the user interface too high? Why are there not more UIMSs available and why are they not more frequently used? Is simple programmer productivity alone sufficient motivation for learning and adopting yet another programming tool? What is the difference, if any, between a “user interface toolbox”, a windowing system and a UIMS? What are the differences between a UIMS and the screen and editor generators found in fourth generation languages? In fact, exactly what is a UIMS?In order to discuss these questions and to reassess the state of the UIMS art, SIGGRAPH sponsored a workshop on these issues (proceedings will be published in Computer Graphics in 1987). The panelists represent four subgroups who have each addressed these problems from different points of view.},
journal = {SIGCHI Bull.},
month = may,
pages = {311–314},
numpages = {4}
}

@article{10.1145/30851.275649,
author = {Olsen, Dan R. and Green, Mark and Lantz, Keith A. and Schulert, Andrew and Sibert, John L.},
title = {Whiter (or Wither) UIMS?},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275649},
doi = {10.1145/30851.275649},
abstract = {The subject of User Interface Management Systems (UIMS) has been a topic of research and debate for the last several years. The goal of such systems has been to automate the production of user interface software. The problem of building quality user interfaces within available resources is a very important one as the demand for new interactive programs grows. Prototype UIMSs have been built and some software packages are presently being marketed as such. Many papers have been published on the topic.There still, however, remain a number of unanswered questions. Is a UIMS an effective tool for building high quality user interfaces or is the run-time cost of abstracting out the user interface too high? Why are there not more UIMSs available and why are they not more frequently used? Is simple programmer productivity alone sufficient motivation for learning and adopting yet another programming tool? What is the difference, if any, between a “user interface toolbox”, a windowing system and a UIMS? What are the differences between a UIMS and the screen and editor generators found in fourth generation languages? In fact, exactly what is a UIMS?In order to discuss these questions and to reassess the state of the UIMS art, SIGGRAPH sponsored a workshop on these issues (proceedings will be published in Computer Graphics in 1987). The panelists represent four subgroups who have each addressed these problems from different points of view.},
journal = {SIGCHI Bull.},
month = may,
pages = {311–314},
numpages = {4}
}

@inproceedings{10.1145/29933.275650,
author = {Clement, Andrew and Gotlieb, C. C.},
title = {Evolution of an Organizational Interface: The New Business Department at a Large Insurance Firm},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275650},
doi = {10.1145/29933.275650},
abstract = {This paper describes how the work organization and computer system of the New Business Department at a large life insurance firm have interacted and evolved over time. The dynamics of interaction are explained largely in terms of the economic incentive to reduce the length of transaction processing chains and the more political goal of extending managerial control. It is argued that examining the interaction of organizations and computer systems Can contribute to a better theoretical understanding of the development of large computer systems and offer guidance to designers of user-computer interfaces. A graphical technique for depicting organizational interfaces is presented.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {315–322},
numpages = {8},
keywords = {case study, managerial control, organizational interface, on line computer system, organizational study},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275650,
author = {Clement, Andrew and Gotlieb, C. C.},
title = {Evolution of an Organizational Interface: The New Business Department at a Large Insurance Firm},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275650},
doi = {10.1145/30851.275650},
abstract = {This paper describes how the work organization and computer system of the New Business Department at a large life insurance firm have interacted and evolved over time. The dynamics of interaction are explained largely in terms of the economic incentive to reduce the length of transaction processing chains and the more political goal of extending managerial control. It is argued that examining the interaction of organizations and computer systems Can contribute to a better theoretical understanding of the development of large computer systems and offer guidance to designers of user-computer interfaces. A graphical technique for depicting organizational interfaces is presented.},
journal = {SIGCHI Bull.},
month = may,
pages = {315–322},
numpages = {8},
keywords = {organizational study, organizational interface, managerial control, on line computer system, case study}
}

@article{10.1145/1165387.275650,
author = {Clement, Andrew and Gotlieb, C. C.},
title = {Evolution of an Organizational Interface: The New Business Department at a Large Insurance Firm},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275650},
doi = {10.1145/1165387.275650},
abstract = {This paper describes how the work organization and computer system of the New Business Department at a large life insurance firm have interacted and evolved over time. The dynamics of interaction are explained largely in terms of the economic incentive to reduce the length of transaction processing chains and the more political goal of extending managerial control. It is argued that examining the interaction of organizations and computer systems Can contribute to a better theoretical understanding of the development of large computer systems and offer guidance to designers of user-computer interfaces. A graphical technique for depicting organizational interfaces is presented.},
journal = {SIGCHI Bull.},
month = may,
pages = {315–322},
numpages = {8},
keywords = {organizational interface, case study, managerial control, on line computer system, organizational study}
}

@inproceedings{10.1145/29933.275651,
author = {Ehrlich, Susan F.},
title = {Social and Psychological Factors Influencing the Design of Office Communications Systems},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275651},
doi = {10.1145/29933.275651},
abstract = {Office automation is used by groups of people with complex communication needs to help them reach business goals such as scheduling, tracking, reviewing, and delegating. Effective individual and group decisions are heavily dependent on communication protocols and social conventions. Because these conventions are so ingrained, they are sometimes not readily available to conscious inspection during the design of communication systems. Even more problematic, system designers may not have first hand knowledge of the conventions and protocol for the range of environments in which their systems will be used. Nevertheless, office systems must work in tandem with these conventions. Wang Laboratories has a continuing program of research directed at identifying the psychological and social factors that come into play during the adoption and use of computer communication systems and the implications of these factors for the design of those systems. Highlights of a three year program of research are presented covering implications for voice mail, electronic mail, and electronic calendars.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {323–329},
numpages = {7},
keywords = {communication, voice mail, sociology, office systems, electronic mail},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275651,
author = {Ehrlich, Susan F.},
title = {Social and Psychological Factors Influencing the Design of Office Communications Systems},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275651},
doi = {10.1145/30851.275651},
abstract = {Office automation is used by groups of people with complex communication needs to help them reach business goals such as scheduling, tracking, reviewing, and delegating. Effective individual and group decisions are heavily dependent on communication protocols and social conventions. Because these conventions are so ingrained, they are sometimes not readily available to conscious inspection during the design of communication systems. Even more problematic, system designers may not have first hand knowledge of the conventions and protocol for the range of environments in which their systems will be used. Nevertheless, office systems must work in tandem with these conventions. Wang Laboratories has a continuing program of research directed at identifying the psychological and social factors that come into play during the adoption and use of computer communication systems and the implications of these factors for the design of those systems. Highlights of a three year program of research are presented covering implications for voice mail, electronic mail, and electronic calendars.},
journal = {SIGCHI Bull.},
month = may,
pages = {323–329},
numpages = {7},
keywords = {electronic mail, office systems, communication, sociology, voice mail}
}

@article{10.1145/1165387.275651,
author = {Ehrlich, Susan F.},
title = {Social and Psychological Factors Influencing the Design of Office Communications Systems},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275651},
doi = {10.1145/1165387.275651},
abstract = {Office automation is used by groups of people with complex communication needs to help them reach business goals such as scheduling, tracking, reviewing, and delegating. Effective individual and group decisions are heavily dependent on communication protocols and social conventions. Because these conventions are so ingrained, they are sometimes not readily available to conscious inspection during the design of communication systems. Even more problematic, system designers may not have first hand knowledge of the conventions and protocol for the range of environments in which their systems will be used. Nevertheless, office systems must work in tandem with these conventions. Wang Laboratories has a continuing program of research directed at identifying the psychological and social factors that come into play during the adoption and use of computer communication systems and the implications of these factors for the design of those systems. Highlights of a three year program of research are presented covering implications for voice mail, electronic mail, and electronic calendars.},
journal = {SIGCHI Bull.},
month = may,
pages = {323–329},
numpages = {7},
keywords = {communication, sociology, electronic mail, office systems, voice mail}
}

@inproceedings{10.1145/29933.275652,
author = {Mosteller, William and Boies, Stephen J. and Grantham, Charles E. and Drby, Thomas and Rubinstein, Richard and Wixon, Dennis},
title = {The Politics of Human Factors (Panels)},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275652},
doi = {10.1145/29933.275652},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {331–332},
numpages = {2},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275652,
author = {Mosteller, William and Boies, Stephen J. and Grantham, Charles E. and Drby, Thomas and Rubinstein, Richard and Wixon, Dennis},
title = {The Politics of Human Factors (Panels)},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275652},
doi = {10.1145/30851.275652},
journal = {SIGCHI Bull.},
month = may,
pages = {331–332},
numpages = {2}
}

@article{10.1145/1165387.275652,
author = {Mosteller, William and Boies, Stephen J. and Grantham, Charles E. and Drby, Thomas and Rubinstein, Richard and Wixon, Dennis},
title = {The Politics of Human Factors (Panels)},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275652},
doi = {10.1145/1165387.275652},
journal = {SIGCHI Bull.},
month = may,
pages = {331–332},
numpages = {2}
}

@inproceedings{10.1145/29933.275653,
author = {Landauer, Thomas K.},
title = {Psychology as a Mother of Invention},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275653},
doi = {10.1145/29933.275653},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {333–335},
numpages = {3},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275653,
author = {Landauer, Thomas K.},
title = {Psychology as a Mother of Invention},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275653},
doi = {10.1145/30851.275653},
journal = {SIGCHI Bull.},
month = may,
pages = {333–335},
numpages = {3}
}

@article{10.1145/1165387.275653,
author = {Landauer, Thomas K.},
title = {Psychology as a Mother of Invention},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275653},
doi = {10.1145/1165387.275653},
journal = {SIGCHI Bull.},
month = may,
pages = {333–335},
numpages = {3}
}

@inproceedings{10.1145/29933.275654,
author = {Kling, Rob},
title = {The Social Dimensions of Computerization},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275654},
doi = {10.1145/29933.275654},
abstract = {While industrialized countries have been rapidly computerizing, the ultimate forms of computerization and their social consequences are still somewhat open-ended. The general directions of equipment developments have been relatively clear - toward computer-based systems which run on faster, smaller, and cheaper hardware; toward equipment architectures which distribute computing (and work); and software which is generally more flexible and more likely to support graceful interactions between person and machine. Computerization is more than placing computing equipment in offices, homes, boats, planes, automobiles, or shopping areas. Computerization refers to the social practices through which computer-based systems and services are made available to various groups, arrangements for training people in the variety of skills they need to use systems effectively, practices that alter accountability, changes in patterns of control, etc. Computerization is a combination of technical, social and political processes [12].Computerization touches the lives of millions of people in many key spheres of work, education, commerce, dealing with public agencies, etc. It is tempting to find some simple formula to summarize the consequences of computerization for people, groups, and the larger social order. Simple capsule formulas which concisely summarize a meaning for computerization tend to be deterministic and grossly oversimplified [11]. Our most reliable knowledge about the specific social consequences of computerization comes from careful field studies of specific computer-based systems in specific social settings [10]. There are a myriad of systems and settings and varied computerization practices employed throughout the industrialized nations. Moreover, analysts bring their own differing theoretical assumptions to their studies [6, 10, 22]. Consequently, the findings of research studies sometimes appear inconsistent [1, 10, 19, 21]. There are serious debates about whether computerization will naturally lead to better or worse jobs [4, 7, 8, 17, 23, 24], lead people to make better or worse decisions [20], lead work groups to be more or less flexible [17], reinforce or redistribute patterns of social power [3], make bureacracies less accountable to the public [2], etc.Much of the popular and professional discourse about the consequences and conditions of computer use is relatively deterministic. Deterministic stories can be optimistic [5] or pessimistic [7, 23]. During the last decade scholars have begun to develop some interesting explanatory models to help understand how computerization "works" as a social and technical process. Research on the social impacts of computing indicates that few "deterministic" consequences of introducing computer-based systems into social settings such as organizations [12, 18, 20, 25]. Under different conditions and different computerization strategies, jobs may become more or less skilled; work groups may gain or lose flexibility; decisions may be "better" or more confused; power may shift to or from central administrators, etc. Changes such as these depend upon both social and technical contingencies, such as: the kinds of systems introduced, who controls them, the kind of infrastructure devoted to their support, etc [17]. Computer-based systems which can be perfectable under static laboratory conditions and when supported by a rich array of resources may be very problematic when introduced into dynamic social settings, settings rife with social conflict, or when computerization strategies limit support resources. Contextual characteristics, such as these, are a powerful influence on the kinds of computer-based systems adopted, the ways they are organized, and their consequences for people and groups. As a consequence, the simple development of "good technologies" is not sufficient to insure that social life will be improved for many participants.This talk will examine some organizing ideas to help understand how computerization strategies and their outcomes depend upon the social contexts in which people sad groups enact them by introducing web models [14,18]. Web models examine the social context in which a computer-based system is adopted, developed, or used; they view the infrastructure for supporting a computer-based system as an integral element of its operational form; and they situate the computing developments being studies in light of the history of related computing developments and related social practices within key social settings. The examples for this talk will be drawn primarily from the computerization of workplaces.Web models help explain 1) the social leverage provided by computing arrangements; 2) the co-requisites for smoothly operating systems; and 3) the ways in which the social settings in which computing arrangements are developed and used shape their configurations and consequences.We contrast web models with conventionally rational "discrete-entity" models which are a-contextual, a-historical, and assume that adequate infrastructure can always be available as needed. Predictions of computing development sad use based on discrete-entity models usually underestimate the problems of implementation and underestimate the extent to which computer-based systems play important roles other than as direct aids in leveraging information processing capabilities in a work organization.Web models shed greater light on socially and technically complex, embedded computing developments than do discrete-entity models. At best, discrete-entity models account for some of the potential (dis)advantages provided by a new technology or organizational arrangements. Since they are context-free, discrete-entity models can be used to describe the results of many simple experiments. In discrete-entity analyses, all things being equal is the rule, while the social setting of technical development and use is largely ignored. That neglect is usually untenable when the organizational setting or the technology itself is complex. Even simple technologies may be compromised by complex, demanding settings [13].Web models draw "large" social boundaries around a focal computing resource so that the defining situation includes: the ecology of participants who influence the adoption and use of computer-based technologies, the infrastructures for supporting system development and use, and the history of local computing developments [3, 8, 13, 16].The social boundaries for a given computing resource can extend far beyond the work places where it is developed and used. Useful social boundaries contain work groups laced throughout a given organization and through other organizations on which the focal organization depends for resources such as staff, equipment, income, and legitimacy. These boundaries are often ir- regular in that they often do not conform to the formal boundaries of organizations and their subunits. They can also be idiosyncratic in that they differ from one organizational setting to another, even when the same technologies are in use. Within these social boundaries, web models link computing developments to routine organizational activities and critical negotiations.Web models help explain the actual leverage of computing developments, their carrying costs, and the ways that systems are valued by different participants. Computer-based systems increasingly extend beyond the narrow boundaries of a work group or small scale organizational unit and are increasingly an element in more complex social relations. Consequently, discrete-entity models are becoming less relevant as a basis for guiding research on the social dimensions of computerization. Web models of computing appear especially appropriate when 1) the production or support of computer-based systems is socially complex or 2) their adoption or operation depends upon social relations that extend far beyond the behavioral setting in which the technology is developed or used. Web models examine the social simplicity/complexity of computing arrangements, not just their technical simplicity/complexity. As computer-based systems become more socially complex, web models will become increasingly critical as approaches for explaining the development and use of computing.},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {337–339},
numpages = {3},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275654,
author = {Kling, Rob},
title = {The Social Dimensions of Computerization},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275654},
doi = {10.1145/30851.275654},
abstract = {While industrialized countries have been rapidly computerizing, the ultimate forms of computerization and their social consequences are still somewhat open-ended. The general directions of equipment developments have been relatively clear - toward computer-based systems which run on faster, smaller, and cheaper hardware; toward equipment architectures which distribute computing (and work); and software which is generally more flexible and more likely to support graceful interactions between person and machine. Computerization is more than placing computing equipment in offices, homes, boats, planes, automobiles, or shopping areas. Computerization refers to the social practices through which computer-based systems and services are made available to various groups, arrangements for training people in the variety of skills they need to use systems effectively, practices that alter accountability, changes in patterns of control, etc. Computerization is a combination of technical, social and political processes [12].Computerization touches the lives of millions of people in many key spheres of work, education, commerce, dealing with public agencies, etc. It is tempting to find some simple formula to summarize the consequences of computerization for people, groups, and the larger social order. Simple capsule formulas which concisely summarize a meaning for computerization tend to be deterministic and grossly oversimplified [11]. Our most reliable knowledge about the specific social consequences of computerization comes from careful field studies of specific computer-based systems in specific social settings [10]. There are a myriad of systems and settings and varied computerization practices employed throughout the industrialized nations. Moreover, analysts bring their own differing theoretical assumptions to their studies [6, 10, 22]. Consequently, the findings of research studies sometimes appear inconsistent [1, 10, 19, 21]. There are serious debates about whether computerization will naturally lead to better or worse jobs [4, 7, 8, 17, 23, 24], lead people to make better or worse decisions [20], lead work groups to be more or less flexible [17], reinforce or redistribute patterns of social power [3], make bureacracies less accountable to the public [2], etc.Much of the popular and professional discourse about the consequences and conditions of computer use is relatively deterministic. Deterministic stories can be optimistic [5] or pessimistic [7, 23]. During the last decade scholars have begun to develop some interesting explanatory models to help understand how computerization "works" as a social and technical process. Research on the social impacts of computing indicates that few "deterministic" consequences of introducing computer-based systems into social settings such as organizations [12, 18, 20, 25]. Under different conditions and different computerization strategies, jobs may become more or less skilled; work groups may gain or lose flexibility; decisions may be "better" or more confused; power may shift to or from central administrators, etc. Changes such as these depend upon both social and technical contingencies, such as: the kinds of systems introduced, who controls them, the kind of infrastructure devoted to their support, etc [17]. Computer-based systems which can be perfectable under static laboratory conditions and when supported by a rich array of resources may be very problematic when introduced into dynamic social settings, settings rife with social conflict, or when computerization strategies limit support resources. Contextual characteristics, such as these, are a powerful influence on the kinds of computer-based systems adopted, the ways they are organized, and their consequences for people and groups. As a consequence, the simple development of "good technologies" is not sufficient to insure that social life will be improved for many participants.This talk will examine some organizing ideas to help understand how computerization strategies and their outcomes depend upon the social contexts in which people sad groups enact them by introducing web models [14,18]. Web models examine the social context in which a computer-based system is adopted, developed, or used; they view the infrastructure for supporting a computer-based system as an integral element of its operational form; and they situate the computing developments being studies in light of the history of related computing developments and related social practices within key social settings. The examples for this talk will be drawn primarily from the computerization of workplaces.Web models help explain 1) the social leverage provided by computing arrangements; 2) the co-requisites for smoothly operating systems; and 3) the ways in which the social settings in which computing arrangements are developed and used shape their configurations and consequences.We contrast web models with conventionally rational "discrete-entity" models which are a-contextual, a-historical, and assume that adequate infrastructure can always be available as needed. Predictions of computing development sad use based on discrete-entity models usually underestimate the problems of implementation and underestimate the extent to which computer-based systems play important roles other than as direct aids in leveraging information processing capabilities in a work organization.Web models shed greater light on socially and technically complex, embedded computing developments than do discrete-entity models. At best, discrete-entity models account for some of the potential (dis)advantages provided by a new technology or organizational arrangements. Since they are context-free, discrete-entity models can be used to describe the results of many simple experiments. In discrete-entity analyses, all things being equal is the rule, while the social setting of technical development and use is largely ignored. That neglect is usually untenable when the organizational setting or the technology itself is complex. Even simple technologies may be compromised by complex, demanding settings [13].Web models draw "large" social boundaries around a focal computing resource so that the defining situation includes: the ecology of participants who influence the adoption and use of computer-based technologies, the infrastructures for supporting system development and use, and the history of local computing developments [3, 8, 13, 16].The social boundaries for a given computing resource can extend far beyond the work places where it is developed and used. Useful social boundaries contain work groups laced throughout a given organization and through other organizations on which the focal organization depends for resources such as staff, equipment, income, and legitimacy. These boundaries are often ir- regular in that they often do not conform to the formal boundaries of organizations and their subunits. They can also be idiosyncratic in that they differ from one organizational setting to another, even when the same technologies are in use. Within these social boundaries, web models link computing developments to routine organizational activities and critical negotiations.Web models help explain the actual leverage of computing developments, their carrying costs, and the ways that systems are valued by different participants. Computer-based systems increasingly extend beyond the narrow boundaries of a work group or small scale organizational unit and are increasingly an element in more complex social relations. Consequently, discrete-entity models are becoming less relevant as a basis for guiding research on the social dimensions of computerization. Web models of computing appear especially appropriate when 1) the production or support of computer-based systems is socially complex or 2) their adoption or operation depends upon social relations that extend far beyond the behavioral setting in which the technology is developed or used. Web models examine the social simplicity/complexity of computing arrangements, not just their technical simplicity/complexity. As computer-based systems become more socially complex, web models will become increasingly critical as approaches for explaining the development and use of computing.},
journal = {SIGCHI Bull.},
month = may,
pages = {337–339},
numpages = {3}
}

@article{10.1145/1165387.275654,
author = {Kling, Rob},
title = {The Social Dimensions of Computerization},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275654},
doi = {10.1145/1165387.275654},
abstract = {While industrialized countries have been rapidly computerizing, the ultimate forms of computerization and their social consequences are still somewhat open-ended. The general directions of equipment developments have been relatively clear - toward computer-based systems which run on faster, smaller, and cheaper hardware; toward equipment architectures which distribute computing (and work); and software which is generally more flexible and more likely to support graceful interactions between person and machine. Computerization is more than placing computing equipment in offices, homes, boats, planes, automobiles, or shopping areas. Computerization refers to the social practices through which computer-based systems and services are made available to various groups, arrangements for training people in the variety of skills they need to use systems effectively, practices that alter accountability, changes in patterns of control, etc. Computerization is a combination of technical, social and political processes [12].Computerization touches the lives of millions of people in many key spheres of work, education, commerce, dealing with public agencies, etc. It is tempting to find some simple formula to summarize the consequences of computerization for people, groups, and the larger social order. Simple capsule formulas which concisely summarize a meaning for computerization tend to be deterministic and grossly oversimplified [11]. Our most reliable knowledge about the specific social consequences of computerization comes from careful field studies of specific computer-based systems in specific social settings [10]. There are a myriad of systems and settings and varied computerization practices employed throughout the industrialized nations. Moreover, analysts bring their own differing theoretical assumptions to their studies [6, 10, 22]. Consequently, the findings of research studies sometimes appear inconsistent [1, 10, 19, 21]. There are serious debates about whether computerization will naturally lead to better or worse jobs [4, 7, 8, 17, 23, 24], lead people to make better or worse decisions [20], lead work groups to be more or less flexible [17], reinforce or redistribute patterns of social power [3], make bureacracies less accountable to the public [2], etc.Much of the popular and professional discourse about the consequences and conditions of computer use is relatively deterministic. Deterministic stories can be optimistic [5] or pessimistic [7, 23]. During the last decade scholars have begun to develop some interesting explanatory models to help understand how computerization "works" as a social and technical process. Research on the social impacts of computing indicates that few "deterministic" consequences of introducing computer-based systems into social settings such as organizations [12, 18, 20, 25]. Under different conditions and different computerization strategies, jobs may become more or less skilled; work groups may gain or lose flexibility; decisions may be "better" or more confused; power may shift to or from central administrators, etc. Changes such as these depend upon both social and technical contingencies, such as: the kinds of systems introduced, who controls them, the kind of infrastructure devoted to their support, etc [17]. Computer-based systems which can be perfectable under static laboratory conditions and when supported by a rich array of resources may be very problematic when introduced into dynamic social settings, settings rife with social conflict, or when computerization strategies limit support resources. Contextual characteristics, such as these, are a powerful influence on the kinds of computer-based systems adopted, the ways they are organized, and their consequences for people and groups. As a consequence, the simple development of "good technologies" is not sufficient to insure that social life will be improved for many participants.This talk will examine some organizing ideas to help understand how computerization strategies and their outcomes depend upon the social contexts in which people sad groups enact them by introducing web models [14,18]. Web models examine the social context in which a computer-based system is adopted, developed, or used; they view the infrastructure for supporting a computer-based system as an integral element of its operational form; and they situate the computing developments being studies in light of the history of related computing developments and related social practices within key social settings. The examples for this talk will be drawn primarily from the computerization of workplaces.Web models help explain 1) the social leverage provided by computing arrangements; 2) the co-requisites for smoothly operating systems; and 3) the ways in which the social settings in which computing arrangements are developed and used shape their configurations and consequences.We contrast web models with conventionally rational "discrete-entity" models which are a-contextual, a-historical, and assume that adequate infrastructure can always be available as needed. Predictions of computing development sad use based on discrete-entity models usually underestimate the problems of implementation and underestimate the extent to which computer-based systems play important roles other than as direct aids in leveraging information processing capabilities in a work organization.Web models shed greater light on socially and technically complex, embedded computing developments than do discrete-entity models. At best, discrete-entity models account for some of the potential (dis)advantages provided by a new technology or organizational arrangements. Since they are context-free, discrete-entity models can be used to describe the results of many simple experiments. In discrete-entity analyses, all things being equal is the rule, while the social setting of technical development and use is largely ignored. That neglect is usually untenable when the organizational setting or the technology itself is complex. Even simple technologies may be compromised by complex, demanding settings [13].Web models draw "large" social boundaries around a focal computing resource so that the defining situation includes: the ecology of participants who influence the adoption and use of computer-based technologies, the infrastructures for supporting system development and use, and the history of local computing developments [3, 8, 13, 16].The social boundaries for a given computing resource can extend far beyond the work places where it is developed and used. Useful social boundaries contain work groups laced throughout a given organization and through other organizations on which the focal organization depends for resources such as staff, equipment, income, and legitimacy. These boundaries are often ir- regular in that they often do not conform to the formal boundaries of organizations and their subunits. They can also be idiosyncratic in that they differ from one organizational setting to another, even when the same technologies are in use. Within these social boundaries, web models link computing developments to routine organizational activities and critical negotiations.Web models help explain the actual leverage of computing developments, their carrying costs, and the ways that systems are valued by different participants. Computer-based systems increasingly extend beyond the narrow boundaries of a work group or small scale organizational unit and are increasingly an element in more complex social relations. Consequently, discrete-entity models are becoming less relevant as a basis for guiding research on the social dimensions of computerization. Web models of computing appear especially appropriate when 1) the production or support of computer-based systems is socially complex or 2) their adoption or operation depends upon social relations that extend far beyond the behavioral setting in which the technology is developed or used. Web models examine the social simplicity/complexity of computing arrangements, not just their technical simplicity/complexity. As computer-based systems become more socially complex, web models will become increasingly critical as approaches for explaining the development and use of computing.},
journal = {SIGCHI Bull.},
month = may,
pages = {337–339},
numpages = {3}
}

@inproceedings{10.1145/29933.275837,
author = {Carey, Tom},
title = {Summary of the CHI'87 Doctoral Consortium},
year = {1986},
isbn = {0897912136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/29933.275837},
doi = {10.1145/29933.275837},
booktitle = {Proceedings of the SIGCHI/GI Conference on Human Factors in Computing Systems and Graphics Interface},
pages = {341–342},
numpages = {2},
location = {Toronto, Ontario, Canada},
series = {CHI '87}
}

@article{10.1145/30851.275837,
author = {Carey, Tom},
title = {Summary of the CHI'87 Doctoral Consortium},
year = {1986},
issue_date = {May 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {SI},
issn = {0736-6906},
url = {https://doi.org/10.1145/30851.275837},
doi = {10.1145/30851.275837},
journal = {SIGCHI Bull.},
month = may,
pages = {341–342},
numpages = {2}
}

@article{10.1145/1165387.275837,
author = {Carey, Tom},
title = {Summary of the CHI'87 Doctoral Consortium},
year = {1986},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0736-6906},
url = {https://doi.org/10.1145/1165387.275837},
doi = {10.1145/1165387.275837},
journal = {SIGCHI Bull.},
month = may,
pages = {341–342},
numpages = {2}
}

