@inproceedings{10.1145/142621.142622,
author = {Herndon, Kenneth P. and Zeleznik, Robert C. and Robbins, Daniel C. and Conner, D. Brookshire and Snibbe, Scott S. and van Dam, Andries},
title = {Interactive Shadows},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142622},
doi = {10.1145/142621.142622},
abstract = {It is often difficult in computer graphics applications to understand spatial relationships between objects in a 3D scene or effect changes to those objects without specialized visualization and manipulation techniques. We present a set of three-dimensional tools (widgets) called “shadows” that not only provide valuable perceptual cues about the spatial relationships between objects, but also provide a direct manipulation interface to constrained transformation techniques. These shadow widgets provide two advances over previous techniques. First, they provide high correlation between their own geometric feedback and their effects on the objects they control. Second, unlike some other 3D widgets, they do not obscure the objects they control.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {1–6},
numpages = {6},
keywords = {3D widgets, interactive systems, direct manipulation},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142623,
author = {Bolt, Richard A. and Herranz, Edward},
title = {Two-Handed Gesture in Multi-Modal Natural Dialog},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142623},
doi = {10.1145/142621.142623},
abstract = {Tracking both hands in free-space with accompanying speech input can augment the user's ability to communicate with computers. This paper discusses the kinds of situations which call for two-handed input and not just the single hand, and reports a prototype in which two-handed gestures serve to input concepts, both static and dynamic, manipulate displayed items, and specify actions to be taken. Future directions include enlargement of the vocabulary of two-handed “coverbal” gestures and the modulation by gaze of gestural intent.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {7–14},
numpages = {8},
keywords = {natural dialog, gestural input, multi-modal interaction},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142624,
author = {Adelstein, Bernard D. and Johnston, Eric R. and Ellis, Stephen R.},
title = {A Testbed for Characterizing Dynamic Response of Virtual Environment Spatial Sensors},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142624},
doi = {10.1145/142621.142624},
abstract = {This paper describes a testbed and method for characterizing the dynamic response of the type of spatial displacement transducers commonly used in virtual environment (VE) applications. The testbed consists of a motorized rotary swing arm that imparts known displacement inputs to the VE sensor. The experimental method involves a series of tests in which the sensor is displaced back and forth at a number of controlled frequencies that span the bandwidth of volitional human movement. During the tests, actual swing arm angle and reported VE sensor displacements are collected and time stamped. Because of the time stamping technique, the response time of the sensor can be measured directly, independent of latencies in data transmission from the sensor unit and any processing by the  interface applications running on the host computer. Analysis of these experimental results allows sensor time delay and gain characteristics to be determined as a function of input frequency. Results from tests of several differnt VE spatial sensors (Ascension, Logitech, and Polhemus) are presented here to demonstrate use of the testbed and method.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {15–22},
numpages = {8},
keywords = {spatial sensors, virtual environments, sensor lag, input devices, system calibration},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142625,
author = {Rao, Ramana and Card, Stuart K. and Jellinek, Herbert D. and Mackinlay, Jock D. and Robertson, George G.},
title = {The Information Grid: A Framework for Information Retrieval and Retrieval-Centered Applications},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142625},
doi = {10.1145/142621.142625},
abstract = {The Information Grid (InfoGrid) is a framework for building information access applications that provides a user interface design and an interaction model. It focuses on retrieval of application objects as its top level mechanism for accessing user information, documents, or services. We have embodied the InfoGrid design in an object-oriented application framework that supports rapid construction of applications. This application framework has been used to build a number of applications, some that are classically characterized as information retrieval applications, others that are more typically viewed as personal work tools.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {23–32},
numpages = {10},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142626,
author = {Zarmer, Craig L. and Chew, Chee},
title = {Frameworks for Interactive, Extensible, Information-Intensive Applications},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142626},
doi = {10.1145/142621.142626},
abstract = {We describe a set of application frameworks designed especially to support information-intensive applications in complex domains, where the visual organization of an application's information is critical. Our frameworks, called visual formalisms, provide the semantic structures and editing operations, as well as the visual layout algorithms, needed to create a complete application. Examples of visual formalisms include tables, panels, graphs, and outlines. They are designed to be extended both by programmers, through subclassing, and by end users, through an integrated extension language.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {33–41},
numpages = {9},
keywords = {end user programming, application frameworks, user interface management systems, user interface toolkits, builders},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142627,
author = {Miller, Christopher A. and Larson, Raymond},
title = {An Explanatory and “Argumentative” Interface for a Model-Based Diagnostic System},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142627},
doi = {10.1145/142621.142627},
abstract = {That intelligent systems need an explanatory capability if they are to aid or support human users has long been understood. A system which can justify its decisions generally obtains improved user trust, greater accuracy in use and offers embedded training potential. Extensive work has been done to provide rule-based systems with explanatory interfaces, but little has been done to provide the same benefits for model-based systems. We develop an approach to organizing the presentation of large amounts of model-based data in an interactive format patterned after a model of human-human explanatory and argumentative discourse. Portions of this interface were implemented for Honeywell's model-based Flight Control Maintenance and Diagnostic System (FCMDS). We conclude that sufficient information exists in a model-based system to provide a wide range of explanation types, and that, the discourse approach is a convenient, powerful and broadly applicable method of organizing and controlling information exchange involving this data.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {43–52},
numpages = {10},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142628,
author = {Burgess, David A.},
title = {Techniques for Low Cost Spatial Audio},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142628},
doi = {10.1145/142621.142628},
abstract = {There are a variety of potential uses for interactive spatial sound in human-computer interfaces, but hardware costs have made most of these applications impractical. Recently, however, single-chip digital signal processors have made real-time spatial audio an affordable possibility for many workstations. This paper describes an efficient spatialization technique and the associated computational requirements. Issues specific to the use of spatial audio in user interfaces are addressed. The paper also describes the design of a network server for spatial audio that can support a number of users at modest cost.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {53–59},
numpages = {7},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142629,
author = {Mynatt, Elizabeth D. and Edwards, W. Keith},
title = {Mapping GUIs to Auditory Interfaces},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142629},
doi = {10.1145/142621.142629},
abstract = {This paper describes work to provide mappings between X-based graphical interfaces and auditory interfaces. In our system, dubbed Mercator, this mapping is transparent to applications. The primary motivation for this work is to provide accessibility to graphical applications for users who are blind or visually impaired. We describe the design of an auditory interface which simulates many of the features of graphical interfaces. We then describe the architecture we have built to model and transform graphical interfaces. Finally, we conclude with some indications of future research for improving our translation mechanisms and for creating an auditory “desktop” environment.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {61–70},
numpages = {10},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142630,
author = {Arons, Barry},
title = {Tools for Building Asynchronous Servers to Support Speech and Audio Applications},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142630},
doi = {10.1145/142621.142630},
abstract = {Distributed client/server models are becoming increasingly prevalent in multimedia systems and advanced user interface design. A multimedia application, for example, may play and record audio, use speech recognition input, and use a window system for graphical I/O. The software architecture of such a system can be simplified if the application communicates to multiple servers (e.g., audio servers, recognition servers) that each manage different types of input and output. This paper describes tools for rapidly prototyping distributed asynchronous servers and applications, with an emphasis on supporting highly interactive user interfaces, temporal media, and multi-modal I/O.The Socket Manager handles low-level connection management and device I/O by  supporting a callback mechanism for connection initiation, shutdown, and for reading incoming data. The Byte Stream Manager consists of an RPC compiler and run-time library that supports synchronous and asynchronous calls, with both a programmatic interface and a telnet interface that allows the server to act as a command interpreter. This paper details the tools developed for building asynchronous servers, several audio and speech servers built using these tools, and applications that exploit the features provided by the servers.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {71–78},
numpages = {8},
keywords = {speech and studio applications, remote procedure call, audio servers, speech recognition and synthesis, distributed client-server architecture, asynchronous message passing},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142631,
author = {Bos, Edwin},
title = {Some Virtues and Limitations of Action Inferring Interfaces},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142631},
doi = {10.1145/142621.142631},
abstract = {An action inferring facility for a multimodal interface called Edward is described. Based on the actions the user performs, Edward anticipates future actions and offers to perform them automatically. The system uses inductive inference to anticipate actions. It generalizes over arguments and results, and detects patterns on the basis of a small sequence of user actions, e.g. “copy a lisp file; change extension of original file into .org; put the copy in the backup folder”. Multimodality (particularly the combination of natural language and simulated pointing gestures) and the reuse of patterns are important new features. Some possibilities and problems of action inferring interfaces in general are addressed. Action inferring interfaces are particularly useful for professional users of general-purpose applications. Such users are unable to program repetitive patterns because either the applications do not provide the facilities or the users lack the capabilities.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {79–88},
numpages = {10},
keywords = {multimodal interfaces, programming by example, demonstrational interfaces},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142632,
author = {Fisher, Gene L. and Busse, Dale E. and Wolber, David A.},
title = {Adding Rule-Based Reasoning to a Demonstrational Interface Builder},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142632},
doi = {10.1145/142621.142632},
abstract = {This paper presents a demonstrational interface builder with improved reasoning capabilities. The system is comprised of two major components: an interactive display manager and a rule-based reasoner. The display manager provides facilities to draw the physical appearance of an interface and define interface behavior by graphical demonstration. The behavior is defined using a technique of stimulus-response demonstrations. With this technique, an interface developer first demonstrates a stimulus that represents an action that an end user will perform on the interface. After the stimulus, the developer demonstrates the response(s) that should result from the given stimulus. As the behavior is demonstrated, the reasoner observes the demonstrations and draws inferences to expedite behavior definition. The inferences entail generalizing from specific behavior demonstrations and identifying constraints that define the generalized behavior. Once behavior constraints are identified, the reasoner sends them to the display manager to complete the definition process. When the interface is executed by an end-user, the display manager uses the constraints to implement the run-time behavior of the interface.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {89–97},
numpages = {9},
keywords = {interface builders, direct manipulation, programming by demonstration, UIMSs},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142633,
author = {Kurlander, David and Feiner, Steven},
title = {A History-Based Macro by Example System},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142633},
doi = {10.1145/142621.142633},
abstract = {Many tasks performed using computer interfaces are very repetitive. While programmers can write macros or procedures to automate these repetitive tasks, this requires special skills. Demonstrational systems make macro building accessible to all users, but most provide either no visual representation of the macro or only a textual representation. We have developed a history-based visual representation of commands in a graphical user interface. This representation supports the definition of macros by example in several novel ways. At any time, a user can open a history window, review the commands executed in a session, select operations to encapsulate into a macro, and choose objects and their attributes as arguments. The system has facilities to generalize the macro automatically, save it for future use, and edit it.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {99–106},
numpages = {8},
keywords = {demonstrational techniques, graphical representations, histories, programming by example, macros},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142634,
author = {Miyashita, Ken and Matsuoka, Satoshi and Takahashi, Shin and Yonezawa, Akinori and Kamada, Tomihisa},
title = {Declarative Programming of Graphical Interfaces by Visual Examples},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142634},
doi = {10.1145/142621.142634},
abstract = {Graphical user interfaces (GUI) provide intuitive and easy means for users to communicate with computers. However, construction of GUI software requires complex programming that is far from being intuitive. Because of the “semantic gap” between the textual application program and its graphical interface, the programmer himself must conceptually maintain the correspondence between the textual programming and the graphical image of the resulting interface. Instead, we propose a programming environment based on the programming by visual example (PBVE) scheme, which allows the GUI designers to “program” visual interfaces for their applications by “drawing” the example visualization of application data with a direct  manipulation interface. Our system, TRIP3, realizes this with (1) the bi-directional translation model between the (abstract) application data and the pictorial data of the GUI, and (2) the ability to generate mapping rules for the translation from example application data and its corresponding example visualization. The latter is made possible by the use of generalization of visual examples, where the system is able to automatically generate generalized mapping rules from a given set of examples.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {107–116},
numpages = {10},
keywords = {programming by example, graphical user interface, visualization, layouts, constraints, direct manipulation},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142635,
author = {Hashimoto, Osamu and Myers, Brad A.},
title = {Graphical Styles for Building Interfaces by Demonstration},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142635},
doi = {10.1145/142621.142635},
abstract = {Conventional interface builders allow the user interface designer to select widgets such as menus, buttons and scroll bars, and lay them out using a mouse. Although these are conceptually simple to use, in practice there are a number of problems. First, a typical widget will have dozens of properties which the designer might change. Insuring that these properties are consistent across multiple widgets in a dialog box and multiple dialog boxes in an application can be very difficult. Second, if the designer wants to change the properties, each widget must be edited individually. Third, getting the widgets laid out appropriately in a dialog box can be tedious. Grids and alignment commands are not sufficient. This paper describes Graphical Tabs and Graphical  Styles in the Gild interface builder which solve all of these problems. A “graphical tab” is an absolute position in a window. A “graphical style” incorporates both property and layout information, and can be defined by example, named, applied to other widgets, edited, saved to a file, and read from a file. If a graphical style is edited, then all widgets defined using that style are modified. In addition, because appropriate styles are inferred, they do not have to be explicitly applied.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {117–124},
numpages = {8},
keywords = {demonstrational interfaces, styles, user interface management system, garnet, user interface builder, inferencing, direct manipulation, tabs},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142637,
author = {Guimar\~{a}es, Nuno M. and Correia, Nuno and Carmo, Telmo A.},
title = {Programming Time in Multimedia User Interfaces},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142637},
doi = {10.1145/142621.142637},
abstract = {The new media types used in advance user interfaces and interactive systems introduce time as a significant variable. This paper addresses the architectural support and programming tools that should be provided to the programmer to manage the time dependencies. The approach considers that the basic models and programming paradigms adopted in the manipulation and management of time should be isomorphic with the spatial models used in existing graphical user interfaces.The paper describes the architectural principles of a toolkit designed to support the construction of user interfaces with temporal characteristics. The Ttoolkit is an extension of an existing graphical user interface toolkit, the Xt toolkit. Its design is presented and a sample application is described.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {125–134},
numpages = {10},
keywords = {multimedia user interfaces, UI toolkits, time programming, dynamic media},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142639,
author = {Lin, Jin-Kun},
title = {MediaMosaic—a Multimedia Editing Environment},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142639},
doi = {10.1145/142621.142639},
abstract = {MediaMosaic is an editing environment developed to provide several features that are either unavailable or not adequately addressed in current editing systems. First, it is a multimedia editor of an open architecture. General media are inserted in documents by embedded virtual screens. Second, it allows users to do markup editing in context. The marked comments are overlapped and attached to the commented areas. Third, it provides a mechanism to allow users to bring data from more than one source to a single document. The views of the included data can be tailored. Fourth, users can work on an included medium through its embedded view or through another complete and duplicated view. It isolates and simplifies the interface design of individual media editors.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {135–141},
numpages = {7},
keywords = {multimedia, editor, X Window systems, user interface},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142641,
author = {Cohen, Philip R.},
title = {The Role of Natural Language in a Multimodal Interface},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142641},
doi = {10.1145/142621.142641},
abstract = {Although graphics and direct manipulation are effective interface technologies for some classes of problems, they are limited in many ways. In particular, they provide little support for identifying objects not on the screen, for specifying temporal relations, for identifying and operating on large sets and subsets of entities, and for using the context of interaction. On the other hand, these are precisely strengths of natural language. This paper presents an interface that blends natural language processing and direct manipulation technologies, using each for their characteristic advantages. Specifically, the paper shows how to use natural language to describe objects and temporal relations, and how to use direct manipulation for overcoming hard natural language problems involving  the establishment and use of context and pronominal reference. This work has been implemented in SRI's Shoptalk system, a prototype information and decision-support system for manufacturing.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {143–149},
numpages = {7},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142643,
author = {Miller, David S. and Smith, John G. and Muller, Michael J.},
title = {TelePICTIVE: Computer-Supported Collaborative GUI Design for Designers with Diverse Expertise},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142643},
doi = {10.1145/142621.142643},
abstract = {It is generally accepted that it is important to involve the end users of a Graphical User Interface (GUI) in all stages of its design and development. However, traditional GUI development tools typically do not support collaborative design. TelePICTIVE is an experimental software prototype designed to allow computer-naive users to collaborate with experts at possibly remote locations in designing GUIs.TelePICTIVE is based on the PICTIVE participatory design methodology, and has been prototyped using the RENDEZVOUS system. In this paper we describe TelePICTIVE, and show how it is designed to support collaboration among a group of GUI designers with diverse levels of expertise. We also explore some of the issue that have come up during development and initial usability testing, such as how to coordinate simultaneous access to a shared design surface, and how to engage in the participatory design of GUIs using a Computer-Supported Cooperative Work (CSCW) system.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {151–160},
numpages = {10},
keywords = {multi-user, collaborative, participatory design, graphical user interface, MUMMS application, PICTIVE, CSCW},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142645,
author = {Rhyne, James R. and Wolf, Catherine G.},
title = {Tools for Supporting the Collaborative Process},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142645},
doi = {10.1145/142621.142645},
abstract = {Collaborative software has been divided into two temporal categories: synchronous and asynchronous. We argue that this binary distinction is unnecessary and harmful, and present a model for collaboration processes (i.e. the temporal record of the actions of the group members) which includes both synchronous and asynchronous software as submodels. We outline an object–oriented toolkit which implements the model, and present an application of its use in a pen–based conferencing tool.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {161–170},
numpages = {10},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142646,
author = {Beaudouin-Lafon, Michel and Karsenty, Alain},
title = {Transparency and Awareness in a Real-Time Groupware System},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142646},
doi = {10.1145/142621.142646},
abstract = {This article explores real-time groupware systems from the perspective of both the users and the designer. This exploration is carried out through the description of GroupDesign, a real-time multi-user drawing tool that we have developed. From the perspective of the users, we present a number of functionalities that we feel necessary in any real-time groupware system: Graphic &amp; Audio Echo, Localization, Identification, Age, and History. From the perspective of the designer, we demonstrate the possibility of creating a multi-user application from a single-user one, and we introduce the notion of purely replicated architecture.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {171–180},
numpages = {10},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142647,
author = {Herczeg, J\"{u}rgen and Hohl, Hubertus and Ressel, Matthias},
title = {Progress in Building User Interface Toolkits: The World According to XIT},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142647},
doi = {10.1145/142621.142647},
abstract = {User interface toolkits and higher-level tools built on top of them play an ever increasing part in developing graphical user interfaces. This paper describes the XIT system, a user interface development tool for the X Window System, based on Common Lisp, comprising user interface toolkits as well as high-level interactive tools organized into a layered architecture. We especially focus on the object-oriented design of the lower-level toolkits and show how advanced features for describing automatic screen layout, visual feedback, application links, complex interaction, and dialog control, usually not included in traditional user interface toolkits, are integrated.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {181–190},
numpages = {10},
keywords = {user interface development tools, interaction techniques, graphical user interfaces, user interface toolkits, object-oriented programming},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142648,
author = {Berlage, Thomas},
title = {Using Taps to Separate the User Interface from the Application Code},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142648},
doi = {10.1145/142621.142648},
abstract = {A new mechanism based on taps is introduced to separate the output from the application code in graphical interactive interfaces. The mechanism is implemented in GINA, an object-oriented application framework. Taps maintain a functional mapping from application data to interface objects that is described in a general-purpose programming language. Taps are triggered automatically by user actions. Compared to constraints or the MVC model, taps do not need execution or memory support from the application objects, at the expense of a performance penalty. Screen updates, which pose the largest performance problem, are minimized by checking for attribute changes and window visibility. A comparison operation is used to maintain structural consistency between hierarchies of application and interface objects. Taps can be defined interactively using formulas in a spreadsheet-like tool.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {191–198},
numpages = {8},
keywords = {command objects, change propagation, user interface management systems},
location = {Monteray, California, USA},
series = {UIST '92}
}

@inproceedings{10.1145/142621.142650,
author = {Hudson, Scott E. and Newell, Gary L.},
title = {Probabilistic State Machines: Dialog Management for Inputs with Uncertainty},
year = {1992},
isbn = {0897915496},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142621.142650},
doi = {10.1145/142621.142650},
abstract = {Traditional models of input work on the assumption that inputs delivered to a system are fairly certain to have occurred as they are reported. However, a number of new input modalities, such as pen-based inputs, hand and body gesture inputs, and voice input, do not share this property. Inputs under these techniques are normally acquired by a process of recognition. As a result, each of these techniques makes mistakes and provides inputs which are approximate or uncertain. This paper considers some preliminry techniques for dialog management in the presence of this uncertainty. These techniques—including a new input model and a set of extended state machine abstractions—will explicitly model uncertainty and handle it as a normal and expected part of the input process.},
booktitle = {Proceedings of the 5th Annual ACM Symposium on User Interface Software and Technology},
pages = {199–208},
numpages = {10},
location = {Monteray, California, USA},
series = {UIST '92}
}

