@inproceedings{10.1145/3253236,
author = {Morgan, Howard},
title = {Session Details: Session I - Performance and Physical Design Issues},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253236},
doi = {10.1145/3253236},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509385,
author = {Hammer, Michael and Chan, Arvola},
title = {Index Selection in a Self-Adaptive Data Base Management System},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509385},
doi = {10.1145/509383.509385},
abstract = {We address the problem of automatically adjusting the physical organization of a data base to optimize its performance as its access requirements change. We describe the principles of the automatic index selection facility of a prototype self-adaptive data base management system that is currently under development. The importance of accurate usage model acquisition and data characteristics estimation is stressed. The statistics gathering mechanisms that are being incorporated into our prototype system are discussed. Exponential smoothing techniques are used for averaging statistics observed over different periods of time in order to predict future characteristics. An heuristic algorithm for selecting indices to match projected access requirements is presented. The cost model on which the decision procedure is based is flexible enough to incorporate the overhead costs of index creation, index storage and application program recompilation.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {1–8},
numpages = {8},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509386,
author = {Teorey, T. J. and Das, K. Sundar},
title = {Application of an Analytical Model to Evaluate Storage Structures},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509386},
doi = {10.1145/509383.509386},
abstract = {The File Design Analyzer is a software package which evaluates well-known database storage structures and access methods in terms of secondary storage processing time and storage overhead required to service a set of user applications. It implements a first-order analytical model to specifically evaluate sequential, indexed sequential, direct access, inverted, multilist, and network storage structures. Interaction with the package is available in conversational mode, enabling the experienced analyst to conduct on-line sensitivity analysis.The paper describes three extensions of a conceptual model and system into a practical tool for evaluation of existing or proposed database designs: batched transactions, multi-access interference due to shared secondary storage, and variable record size. Case studies of real systems illustrate the potential of the File Design Analyzer to provide insight regarding the optimal choice of physical parameters within a specified storage structure and to effectively compare alternative storage structures for a particular set of applications.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {9–19},
numpages = {11},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509387,
author = {Welch, James W. and Graham, J. Wesley},
title = {Retrieval Using Ordered Lists in Inverted and Multilist Files},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509387},
doi = {10.1145/509383.509387},
abstract = {In several file systems, the data in a file is described by constructing lists of records. Each list contains exactly those records for which some property is true. The motivation for constructing and maintaining these lists is to facilitate the processing of retrieval requests -- in many situations only a subset of the file need be searched in order to determine those records from which information is to be retrieved.When each list is ordered (by, for example, the addresses of the records which occur on it) efficient retrieval algorithms may be devised. Specifically, we shall develop retrieval algorithms for inverted files and multilist files. The algorithms can be used to determine exactly those records which occur on a Boolean expression of lists. These algorithms are controlled by a "trace function" which is used iteratively to select the next candidate.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {21–29},
numpages = {9},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509388,
author = {Sherman, S. W. and Brice, R. S.},
title = {Performance of a Data Base Manager in a Virtual Memory System},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509388},
doi = {10.1145/509383.509388},
abstract = {Buffer pools are created and managed in data base systems in order to reduce the total amount of accesses to the I/O devices. The use of the buffer pool in a virtual storage system may cause an increase in the page fault rate. We examine this phenomenon through the analysis of empirical data gathered in a multifactor experiment. The factors we considered were memory size, buffer size, replacement algorithm for memory and buffer management algorithm.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {31},
numpages = {1},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/3253237,
author = {Stonebraker, Michael},
title = {Session Details: Session II - Recovery, Concurrency and Protection},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253237},
doi = {10.1145/3253237},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509390,
author = {Giordano, Nicholas J. and Schwartz, Marvin S.},
title = {Data Base Recovery at CMIC},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509390},
doi = {10.1145/509383.509390},
abstract = {Several techniques have been combined to provide for data base recovery at CMIC. The CMIC environment is presented first in order to identify the constraints which data base recovery must satisfy.A technique is described for updating mass-storage structures (a B-tree in this case) in such a way that all information already addressable through the mass-storage structure can always be addressed through the mass-storage structure, even while the mass-storage structure is being updated. Audit trail recovery points are defined to be records on the audit trail tape with the property that all preceeding data base updates have been written to mass storage. Because of the mass-storage updating technique, any data base update not addressable through the data base mass-storage B-tree could not have been written to mass storage. Therefore, by the definition of a recovery point, the update must have occurred after the most recent recovery point.The audit trail is always updated before the data base. In the event of a failure which does not destroy mass storage (a soft crash), the data base mass-storage allocation is recovered by a tree walk through the B-tree ("hot start"). Then any updates which occurred after the last recovery point on the audit trail are restored from the audit trail.Finally, the problem of program restart after data base recovery is discussed. The question of whether deadlock is a reasonable price to pay for data base rollback is explained, but not answered. This question will have to be addressed as more data base systems try to support concurrent transaction and batch updates, distributed data bases, or data bases shared by independent host computers.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {33–42},
numpages = {10},
keywords = {VSAM, B-tree, hard crash, transaction, soft crash, "hot start", audit trail, reload and restore, on-line data base, Leaf-First Rule, data base recovery, track splitting, program restart},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509391,
author = {Severance, D. G. and Lohman, G. M.},
title = {Differential Files: Their Application to the Maintenance of Large Data Bases},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509391},
doi = {10.1145/509383.509391},
abstract = {The representation of a collection of data in terms of its differences from some pre-established point of reference is a basic compaction technique which finds wide applicability. This paper describes a differential database representation which is shown to be an efficient method for storing large and volatile databases. The technique confines database modifications to a relatively small area of physical storage and as a result offers two significant operational advantages. First, because the "reference point" for the database is inherently static, it can be simply and efficiently stored. Moreover, since all modifications to the database are physically localized, the process of backup and the process of recovery are relatively fast and inexpensive.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {43},
numpages = {1},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509392,
author = {Macri, Philip P.},
title = {Deadlock Detection and Resolution in a CODASYL Based Data Management System},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509392},
doi = {10.1145/509383.509392},
abstract = {In a multi-task computer system many different types of situations may occur in which productive computation may be brought to a standstill. One of these is deadlock or "deadly embrace". Some of the earliest investigation into this problem was undertaken by Dijkstra [1], Habermann [2] and Havender [3]. A detailed presentation of the deadlock problem and its ramifications may be found in [1, 2, 3, 4, 5].Because deadlock is so costly, modern computer system software is designed so that deadlock is either impossible [6, 7] or the probability of its occurrence is minimized at the system level. For example, the INGRES data base management system [7] accomplishes deadlock prevention without compromising data base integrity. Unfortunately, the CODASYL design [8] does not preclude the possibility of deadlock. It leaves the burden of minimizing the probability of its occurrence to the design of the application. There are two parts to the application design: the database design and the software design. Judicious design of both parts can sometimes minimize deadlock. However, deadlock cannot be prevented in all cases. Therefore, deadlock detection and resolution mechanisms are essential for operation in a multi-thread environment. Initially, the CODASYL based data management system employed (DMS 1100 [11]) had very simple deadlock detection and resolution mechanisms. The deadlock detection mechanism was based on the sufficient condition that deadlock exists when the number of transactions registered with the data management system equals the number of transactions locked out of resources. A least number of page alterations criterion was used by the deadlock resolution mechanism to resolve deadlock. That is, the transaction with the least number of altered pages was rolled back in an attempt to resolve deadlock. If this failed to resolve deadlock, the roll back selection process was repeated until deadlock was resolved. It was discovered that these mechanisms seriously degraded throughput on our system and a new approach was needed. This paper contains a description of the deadlock detection algorithm and the deadlock resolution algorithm which was implemented to overcome this defficiency. The former detects deadlock and the latter resolves deadlock in a manner consistent with maximum system throughput.In order to establish a common framework for discussion, the concepts of lock out and deadlock will be defined before proceeding.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {45–49},
numpages = {5},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509393,
author = {Griffiths, P. P. and Wade, B. W.},
title = {An Authorization Mechanism for a Relational Data Base System},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509393},
doi = {10.1145/509383.509393},
abstract = {A multi-user data base system must permit users to selectively share data, while retaining the ability to restrict data access. There must be a mechanism to provide protection and security, permitting information to be accessed only by properly authorized users. Further, when tables or restricted views of tables are created and destroyed dynamically, the granting, authentication, and revocation of authorization to use them must also be dynamic. We discuss each of these issues and their solutions in the context of the relational data base management system, System R.When a data base user creates a table, he is fully and solely authorized to perform actions upon it such as read, insert, update, and delete. If he wishes, he may explicitly grant to any other user any or all of his privileges on the table. In addition, he may specify that that user is authorized to further grant these privileges to other users. The result is a directed graph of granted privileges originating from the table creator.At some later time, a user A may revoke some or all of the privileges which he previously granted to another user B. This action usually revokes the entire subgraph of the grants originating from A's grant to B. It may be, however, that B will still possess the revoked privileges by means of a grant from another user C, and therefore some or all of B's grants should not be revoked. We discuss this problem in detail and present an algorithm for detecting exactly which of B'S grants should be revoked.Because revocation may be performed dynamically, a user's authorization for a table must be checked dynamically. We present a scheme which attempts to minimize the cost of such revalidation.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {51},
numpages = {1},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/3253238,
author = {Hardgrave, Terry},
title = {Session Details: Session III - Logical Design},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253238},
doi = {10.1145/3253238},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509395,
author = {Kahn, Beverly K.},
title = {A Method for Describing Information Required by the Database Design Process},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509395},
doi = {10.1145/509383.509395},
abstract = {Current research in the area of database design has been directed towards the development of structured or automated database design techniques. The first phase of the database design process, information requirements specification and analysis, is unfortunately ignored. The lack of concern for whether or not the input to the design techniques can be collected in the real world and for wheather or not the input is an adequate and complete representation can only result in an inadequate and possible useless database design.Most database models and design techniques utilize only process-oriented information. Other techniques utilize non process-oriented information whose foundation may not be clearly identifiable. The use of only process-oriented information may result in a narrowly defined unimaginative database design which may be unresponsive to the changing needs of the organization. To overcome the shortcomings of this traditional approach, it is necessary to complement it with an additional approach.This can be accomplished in three steps. First, the description and use of the information required for the database design process must be clearly stated. Second, two independent perspectives for viewing the required information must be considered: the information structure perspective and the usage perspective. The information perspective depicts the natural characteristics of data, inherent groupings and relationships. This perspective is not bound to existing or future applications; hence it is a more general and flexible view of information than one which is process oriented. The usage perspective describes how data items are utilized by the system in order to accomplish its processing requirements. Third, a vehicle for aiding the specification itegration of these two independent perspectives must be considered.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {53–64},
numpages = {12},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509396,
author = {Minsky, N.},
title = {Files with Semantics},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509396},
doi = {10.1145/509383.509396},
abstract = {The conventional concept of file is reexamined, and found to be unsatisfactory, both as a linguistic concept in a programming language and as a tool for data processing. A new file concept is proposed which unlike the conventional file attempts to simulate an intelligent archivist rather than a filing cabinet.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {65–73},
numpages = {9},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509397,
author = {Schneider, L. S.},
title = {A Relational View of the Data Independent Accessing Model},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509397},
doi = {10.1145/509383.509397},
abstract = {Efficiency is of paramount importance in very large databases. A principal technique for increasing efficiency is to define the user's view of the data independently of the storage structure so that the storage structure can be varied at will to improve performance. A widely accepted user view for this purpose is the relational model [3] and substantial progress has been made since its introduction. Far less research has been devoted to fundamental models of storage structures and the only comprehensive treatment is the Data Independent Accessing Model (DIAM) [1]. The DIAM, however, has seen limited application due, at least in part, to its use of the (less popular) entity set view of data. And despite the close correspondence between the relational and entity set views [2], little has been done to exploit their similarities. This paper attempts to show that the DIAM's relevance to contemporary research in database systems can be enhanced by viewing it through n-ary relations. To accomplish this, the paper first develops a redefinition of the DIAM String Level in terms of n-ary relations. It then appeals to the remaining levels of the DIAM to describe various relational implementation alternatives. The paper concludes that the utility of both the DIAM and the relational model is enhanced by this approach.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {75–90},
numpages = {16},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509398,
author = {Sharman, G C H},
title = {A Constructive Definition of Third Normal Form},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509398},
doi = {10.1145/509383.509398},
abstract = {The concept of normalisation and the definition of third normal form occupy a central place in the relational model of database. Normalisation has been described as an analytic process in which an initially unconstrained collection of relations is successively decomposed into a collection of smaller relations satisfying the constraints of the three normal forms. Normalised relations constitute the basis on which data manipulation languages - relational algebra, relational calculus and others - have been defined. As yet, however, there is no generally recognised data definition language for the relational model. A pre-requisite for this would be a constructive definition of third normal form, that is, a definition in terms of rules for building normalised relations from simple domains. This paper considers how such a definition may be achieved by applying two ideas derived from the study of programming languages; the notion of data type, and the notion of a selector as used in formal language definition. The result is an abstract syntax of relations. This is compared with the standard definition of normalisation and its completeness is critically examined.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {91–99},
numpages = {9},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/3253239,
author = {Chamberlin, Donald},
title = {Session Details: Session IV - Languages},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253239},
doi = {10.1145/3253239},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509400,
author = {Date, C. J.},
title = {An Architecture for High-Level Language Database Extensions},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509400},
doi = {10.1145/509383.509400},
abstract = {This paper describes an architecture for a set of database extensions to the existing high-level languages. The scheme described forms an architecture in the sense that it is not based on any particular language: its constructs and functions, or some suitable subset of them, may be mapped into the concrete syntax of a number of distinct languages, among them COBOL and PL/I. The architecture includes both the means for specifying the programmer's view of a database (i.e. for defining the external schema) and the means for manipulating that view. A significant feature is that the programmer is provided with the ability to handle all three of the well-known database structures (relational, hierarchical, network), in a single integrated set of language extensions. Another important aspect is that both record- and set-level operations are provided, again in an integrated fashion. The objectives of the architecture are to show that it is possible for relational, hierarchical and network support to co-exist within a single language, and also, by providing a common framework and treating the three structures in a uniform manner, to shed some new light on the continuing debate on the relative merits of each.The paper is intended as an informal introduction to the architecture, and to this end includes several illustrative examples which make use of a PL/I-based concrete syntax.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {101–122},
numpages = {22},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509401,
author = {Tsichritzis, D.},
title = {LSL: A Link and Selector Language},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509401},
doi = {10.1145/509383.509401},
abstract = {This paper presents the main ideas behind the language LSL. The purpose of LSL is to provide a compromise between different data base approaches and attitudes. The hierarchical, network and relational models of data can coexist within the LSL environment. LSL is being implemented on a PDP-11/45 running the UNIX operating system. It will be interfaced both to a host language and a conversational graphical facility.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {123–133},
numpages = {11},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509402,
author = {Deheneffe, Claude and Hennebert, Henri},
title = {NUL: A Navigational User's Language for a Network Structured Data Base},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509402},
doi = {10.1145/509383.509402},
abstract = {This paper presents an end-user's language which tries to solve the problem of an easy navigation through a DBTG-like data base structure. A request is expressed in a nonprocedural and hierarchically structured fashion. The dialogue is split into two main parts : first a data context definition, then the manipulations of this context.A context is a part of the data base that the user is concerned with. A context definition is formed by a set of labelled lines; each line is a condition declaration on one entity-set. By means of labels and link names declared in the data structure, a line may be connected to another one; this expresses a 'join', by the named link, between the two entity-sets involved in the two lines.The originality of the language lies in the fact that it permits the user to navigate easily and fairly naturally from one entity-set to another through a link; in fact, this navigation is mapped into a hierarchical structure which appears more comprehensible to the user.On the other hand, a manipulation is a command such as print, update, insert or other standard actions the user may want to execute on the context.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {135–142},
numpages = {8},
keywords = {data manipulation language, network model, query language, entity-relationship model, data base management systems, casual user, navigation},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

@inproceedings{10.1145/509383.509403,
author = {Carlson, C. Robert and Kaplan, Robert S.},
title = {A Generalized Access Path Model and Its Application to a Relational Data Base System},
year = {1976},
isbn = {9781450347297},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/509383.509403},
doi = {10.1145/509383.509403},
abstract = {An Access Path Producing LanguagE (APPLE) has been developed which permits users to formulate completely non-procedural queries expressed solely in terms of attribute names. The responsibility for programming or specifying the access path by which a query is resolved has thus been shifted from the user to the system. Examples are presented which illustrate the procedures by which the system determines an access path. The problems to be found in this approach are also described, and techniques required to solve these problems are presented.},
booktitle = {Proceedings of the 1976 ACM SIGMOD International Conference on Management of Data},
pages = {143–154},
numpages = {12},
location = {Washington, D.C.},
series = {SIGMOD '76}
}

