@inproceedings{10.1145/3253370,
author = {Edelberg, Murray},
title = {Session Details: Database System Implementation},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253370},
doi = {10.1145/3253370},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582097,
author = {Hawthorn, Paula and Stonebraker, Michael},
title = {Performance Analysis of a Relational Data Base Management System},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582097},
doi = {10.1145/582095.582097},
abstract = {The effect on the performance of data management systems of the use of extended storage devices, multiple processors and prefetching data blocks is analyzed with respect to one system, INGRES. Benchmark query streams, derived from user queries, were run on the INGRES system and their CPU usage and data reference patterns traced. The results show that the performance characteristics of two query types: data-intensive queries and overhead-intensive queries, are so different that it may be difficult to design a single architecture to optimize the performance of both types. It is shown that the random access model of data references holds only for overhead-intensive queries, and then only if references to system catalogs are not considered data references. Significant sequentiality of reference was found in the data-intensive queries. It is shown that back-end data management machines that distribute processing toward the data may be cost effective only for data-intensive queries. It is proposed that the best method of distributing the processing of the overhead-intensive query is through the use of intelligent terminals. A third benchmark set, multi-relation queries, was devised, and proposals are made for taking advantage of the locality of reference which was found.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {1–12},
numpages = {12},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582098,
author = {DeWitt, David J.},
title = {Query Execution in DIRECT},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582098},
doi = {10.1145/582095.582098},
abstract = {In this paper query organization, execution, and optimization in the database machine DIRECT are discussed. We demonstrate that the use of a monitor for each relation referenced by a query along with the use of the NEXT PAGE construct permits the DIRECT back-end controller to assign a query to any number of processors for execution. Furthermore, these constructs also permit the controller to balance the load in the back-end by dynamically adjusting how many processors are assigned to each executing query.We also identify the problem of relation fragmentation which occurs when a query is executed by several processors in parallel and develop a technique for estimating the optimal number of processors to compress a relation so that the execution time of the entire query is minimized. These results appear to be applicable to all database machines which employ parallel processing techniques to enhance query execution.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {13–22},
numpages = {10},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582099,
author = {Selinger, P. Griffiths and Astrahan, M. M. and Chamberlin, D. D. and Lorie, R. A. and Price, T. G.},
title = {Access Path Selection in a Relational Database Management System},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582099},
doi = {10.1145/582095.582099},
abstract = {In a high level query and data manipulation language such as SQL, requests are stated non-procedurally, without reference to access paths. This paper describes how System R chooses access paths for both simple (single relation) and complex queries (such as joins), given a user specification of desired data as a boolean expression of predicates. System R is an experimental database management system developed to carry out research on the relational model of data. System R was designed and built by members of the IBM San Jose Research Laboratory.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {23–34},
numpages = {12},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/3253371,
author = {Fagin, Ronald},
title = {Session Details: B-Trees},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253371},
doi = {10.1145/3253371},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582101,
author = {Lomet, David B.},
title = {Multi-Table Search for B-Tree Files},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582101},
doi = {10.1145/582095.582101},
abstract = {A new method of organizing index entries in nodes of a B-tree is presented. The method is designed specifically to work with variable length keys. Thus it is particularly suited to take advantage of the variable length entries that result when key compression techniques are used. The paper analyses the characteristics of compressed keys. Based on this analysis, it is shown that the method results in significant space savings, leading to reduced disk accesses during random searches of a B-tree organized file. The search algorithms are shown to be competitive with the best of previous methods for treating variable length entries.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {35–42},
numpages = {8},
keywords = {B-trees, variable length, key compression, searching},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582102,
author = {Rosenberg, Arnold L. and Snyder, Lawrence},
title = {Compact B-Trees},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582102},
doi = {10.1145/582095.582102},
abstract = {A B-tree is compact if it is minimal in number of nodes, hence has optimal space utilization, among equally capacious B-trees of the same order. The space utilization of compact B-trees is analyzed and is compared with that of noncompact B-trees and of (node)-visit-optimal B-trees, which minimize the expected number of nodes visited per key access. Compact B-trees can be as much as a factor of 2.5 more space-efficient than visit-optimal B-trees; and the node-visit cost of a compact tree is never more than 1 + the node-visit cost of an optimal tree. Finally, an in-place compactification algorithm is presented which operates in linear time in the size of the file.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {43–51},
numpages = {9},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/3253372,
author = {Date, C. J.},
title = {Session Details: User Interfaces},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253372},
doi = {10.1145/3253372},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582104,
author = {Buneman, Peter and Frankel, Robert E.},
title = {FQL: A Functional Query Language},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582104},
doi = {10.1145/582095.582104},
abstract = {An applicative language based upon recent ideas by John Backus has been developed. The language provides a powerful formalism for the expression of complex database queries. Though currently implemented with an interface to a CODASYL system, the language employs a sufficiently general data model that use with other database management systems is possible. This paper describes the language through a number of examples and outlines its implementation.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {52–58},
numpages = {7},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582105,
author = {Shipman, David W.},
title = {The Functional Data Model and the Data Language DAPLEX},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582105},
doi = {10.1145/582095.582105},
abstract = {This paper discusses the advantages of a functional approach to data modelling. This approach forms the basis for DAPLEX, a high-level language for data description and manipulation. We describe the DAPLEX language and the functional data model and examine the benefits they provide as tools for expressing and solving problems in database management.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {59},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582106,
author = {Wasserman, Anthony I.},
title = {The Data Management Facilities of PLAIN},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582106},
doi = {10.1145/582095.582106},
abstract = {The programming language PLAIN has been designed to support the construction of interactive information systems within the framework of a systematic programming methodology. One of the key goals of PLAIN has been to achieve an effective integration of programming language and database management concepts, rather than either the functional interface to database operations or the low-level database navigation operations present in other schemes. PLAIN incorporates a relational database definitional facility, along with low-level and high-level operations on relations. This paper describes those features informally, showing how the database operations are combined with programming language notions such as type checking, block structure, expression evaluation, and iteration. A brief description of the implementation status is included.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {60–70},
numpages = {11},
keywords = {database management, interactive programs, information systems, programming language design, relational algebra, type checking, relations, abstract data types},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582107,
author = {Rowe, Lawrence A. and Shoens, Kurt A.},
title = {Data Abstraction, Views and Updates in RIGEL},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582107},
doi = {10.1145/582095.582107},
abstract = {Language constructs to support the development of data base applications provided in the programming language rigel are described. First, the language type system includes relations, views, and tuples as built-in types. Tuple-values are introduced to provide more flexibility in writing procedures that update relations and views.Second, an expression that produces sequences of values, called a generator, is defined which integrates relational query expressions with other iteration constructs found in general-purpose programming languages. As a result, relational expressions can be used in new contexts (e.g., as parameters to procedures) to provide new capabilities (e.g., programmer-defined aggregate functions).Lastly, a data abstraction facility, unlike those proposed for other data base programming languages, is described. It provides a better notation to specify the interface between a program and a data base and to support the disciplined use of views.All of these constructs are integrated into a sophisticated programming environment to enhance the development of well-structured programs.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {71–81},
numpages = {11},
keywords = {relational data base systems, programming languages, generators, data abstraction, views},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/3253373,
author = {Yao, S. Bing},
title = {Session Details: Performance Issues},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253373},
doi = {10.1145/3253373},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582109,
author = {Yu, C. T. and Siu, M. K. and Lam, K. and Ozsoyoglu, M.},
title = {Performance Analysis of Three Related Assignment Problems},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582109},
doi = {10.1145/582095.582109},
abstract = {The relative placement of records in a database has a significant impact on the overall system performance. In this paper we study three related assignment problems. They are (1) the assignment of records to devices so as to minimize the expected completion time and to maximize the expected utilization of the devices, (2) the assignment of records to pages or blocks in secondary memory so as to minimize the number of blocks to be accessed, and (3) the analysis of the performance of a hashing scheme under the assumption that the record-to-bucket probability varies from one bucket to another. The solutions to these problems are obtained by studying an occupancy problem. In each case, an optimal solution is obtained.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {82–92},
numpages = {11},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582110,
author = {Hammer, Michael and Niamir, Bahram},
title = {A Heuristic Approach to Attribute Partitioning},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582110},
doi = {10.1145/582095.582110},
abstract = {One technique that is sometimes employed to enhance the performance of a database management system is known as attribute partitioning. This is the process of dividing the attributes of a file into separately stored subfiles. By storing together those attributes that are frequently requested together by transactions, and by separating those that are not, attribute partitioning can reduce the number of pages that are transferred from secondary storage to primary memory in the processing of a transaction.The goal of this work is to design mechanisms that can automatically select a near-optimal attribute partition of a file's attributes, based on the usage pattern of the file and on the characteristics of the data in the file. The approach taken to this problem is based on the use of an accurate partition evaluator and of a heuristic that guides a search through the large space of possible partitions. The heuristics propose a small set of promising partitions to submit for detailed analysis. The evaluator assigns a figure of merit to any proposed partition that reflects the cost that would be incurred in processing the transactions in the usage pattern if the file were partitioned in the proposed way.We have implemented an evaluator for a particular model database system and have developed a heuristic search technique. A series of experiments has demonstrated the accuracy and efficiency of this heuristic.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {93–101},
numpages = {9},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582111,
author = {Pelagatti, G. and Schreiber, F. A.},
title = {Evaluation of Transmission Requirements in Distributed Database Access},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582111},
doi = {10.1145/582095.582111},
abstract = {The problem of designing global applications in a Distributed Database is considered, and a multilevel model is developed in order to evaluate different access strategies. File manipulation operations are considered with respect to their possibility of distributed execution and their transmission requirements are defined. The need of an analysis of data is shown in order to quantitatively evaluate costs and delays of transmission operations.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {102–108},
numpages = {7},
keywords = {operator tree, distribution strategy, distributed applications design, distribution constraints, distributed access, distributed databases, correspondences analysis, transmission strategy, computer networks, analysis of data},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582112,
author = {Badal, D. Z. and Popek, G. J.},
title = {Cost and Performance Analysis of Semantic Integrity Validation Methods},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582112},
doi = {10.1145/582095.582112},
abstract = {A principal problem with dynamic validation of transactions with respect to a set of integrity assertions is the cost associated with the evaluation of such assertions. Although several methods of dynamic validation of transactions have been proposed there has been little attempt to analyze and to compare the performance of different validation methods. In this paper we evaluate compile time, run time, postexecution time, and mixed (run time --- postexecution time) validation methods for two semantic integrity subsystem designs. In one case we assume that the arguments of all integrity assertions are stored in secondary slow access memory and in the second we assume that the database is partitioned so that some data used for transaction validation are stored in fast access form.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {109–115},
numpages = {7},
keywords = {database management, performance analysis, integrity assertions, semantic integrity, cost analysis},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/3253374,
author = {Shipman, David B.},
title = {Session Details: Database Concurrency Control},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253374},
doi = {10.1145/3253374},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582114,
author = {Kung, H. T. and Papadimitriou, C. H.},
title = {An Optimality Theory of Concurrency Control for Databases},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582114},
doi = {10.1145/582095.582114},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {116–126},
numpages = {11},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582115,
author = {Hunt, Harry B. and Rosenkrantz, Daniel J.},
title = {The Complexity of Testing Predicate Locks},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582115},
doi = {10.1145/582095.582115},
abstract = {The problem of testing predicates for satisfiability arises in several aspects of database systems such as the use of predicate locks in concurrency control [7]. Such problems are NP-complete even for "simple predicates", i.e. predicates consisting of Boolean combinations of comparisons between a field of a tuple and a constant. However, when the relations referred to by the predicates are of fixed degree, there is an algorithm whose runtime is bounded by a polynomial in the length of the predicate. This is true not only for "simple predicates" but also for predicates containing comparisons between a field and another field, possibly offset by a constant. The proofs involve showing that if a predicate is satisfiable, then it is satisfiable by a tuple whose field values are related to constants occurring in the predicate.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {127–133},
numpages = {7},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582116,
author = {Irani, Keki B. and Lin, Hing-Lung},
title = {Queueing Network Models for Concurrent Transaction Processing in a Database System},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582116},
doi = {10.1145/582095.582116},
abstract = {This paper presents two queueing network models which correspond to different implementations of the lock management algorithm for concurrent transaction processing in a database system. These models are developed to investigate the effects of varying the granularity of locks and the degree of multiprogramming on the performance of a database system. A numerical example is presented for a set of apparently realistic parameters and its results are discussed. In addition to other conclusions, these results also confirm the result of Ries and Stonebraker, using a simulation model [9], that a relatively coarse granularity is sufficient to allow enough parallelism for efficient resource utilization. In contrast with simulation models, the queueing network models presented in this paper allow us to examine more closely the cause-effect relationships of concurrent transaction processing in a database system at less cost.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {134–142},
numpages = {9},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/3253375,
author = {Aho, A. V.},
title = {Session Details: Database Dependency Theory},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253375},
doi = {10.1145/3253375},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582118,
author = {Biskup, Joachim and Dayal, Umeshwar and Bernstein, Philip A.},
title = {Synthesizing Independent Database Schemas},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582118},
doi = {10.1145/582095.582118},
abstract = {We study the following database design problem. Given a universal relation scheme 〈U, F〉 where F is a set of functional dependencies, find an in some way normalized database schema D = {〈X1, F1〉,..., 〈Xn, Fn〉} where Xi ⊂ U and Fi is inherited from F, such that D is an independent representation of the universal scheme 〈U, F〉. This means that D has both the lossless join property and the faithful closure property, (***** Fi)+ = F+, where + denotes the closure of a set of functional dependencies. We show that this goal can easily be achieved by an extension of the well-known synthetic approach of Bernstein and others to database design. We merely have to check whether the usual synthesis procedure has produced a key component 〈Xi, Fi〉 such that Xi → U ε F+; in case this is true the output of the synthesis procedure is actually an independent (and not only faithful) representation, otherwise we only have to add one further component, namely just a key. These claims are proved by a careful inspection of the Aho/Beeri/Ullman algorithm to test for losslessness. Finally, we show how to use our method to synthesize minimal independent third normal form schemas.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {143–151},
numpages = {9},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582119,
author = {Maier, David and Mendelzon, Alberto and Sagiv, Yehoshua},
title = {Testing Implications of Data Dependencies},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582119},
doi = {10.1145/582095.582119},
abstract = {We present a computation method---the chase---for testing implication of data dependencies by a set of data dependencies. The chase operates on tableaux similar to those of Aho, Sagiv, and Ullman. The chase includes previous tableau computation methods as special cases. By interpreting tableaux alternately as mappings or as templates for instances, we can test implication of functional and join dependencies. This information is useful in determining when a relational database scheme accurately represents the information it is intended to. The chase can also be used to test equivalence of database schemes and as part of the test of whether the relation schemes in a database scheme are independent components.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {152},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582120,
author = {Fagin, Ronald},
title = {Normal Forms and Relational Database Operators},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582120},
doi = {10.1145/582095.582120},
abstract = {We discuss the relationship between normal forms in a relational database and an allowed set of relational operators. We define "projection-join normal form" (PJ/NF), which is the ultimate normal form when only projection and join are allowed. Aho, Beeri and Ullman made the counterintuitive discovery that there is a relation schema with a valid decomposition into three of its projections without the decomposition being equivalent to a cascade of decompositions, each into two projections. Because of this possibility, there exist bizarre relation schemata that are in fourth normal form but not in PJ/NF. We also discuss issues associated with allowing the union operator.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {153–160},
numpages = {8},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/3253376,
author = {Yormark, Beatrice},
title = {Session Details: Database Semantics I},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253376},
doi = {10.1145/3253376},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582122,
author = {Codd, E. F.},
title = {Extending the Data Base Relational Model to Capture More Meaning},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582122},
doi = {10.1145/582095.582122},
abstract = {During the last three or four years several investigators have been exploring 'semantic models' for formatted data bases. The intent is to capture (in a more or less formal way) more of the meaning of the data, so that data base design can become more systematic and the data base system itself can behave more intelligently. Two major thrusts are clear:1) the search for meaningful units that are as small as possible --- atomic semantics2) the search for meaningful units that are larger than the usual n-ary relation --- molecular semantics.In this paper we propose extensions to the relational model to support certain atomic and molecular semantics. These extensions represent a synthesis of many ideas from the published work in semantic modeling.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {161},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582123,
author = {Vassiliou, Yannis},
title = {Null Values in Data Base Management a Denotational Semantics Approach},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582123},
doi = {10.1145/582095.582123},
abstract = {We start with a very brief description of the many-valued logic approach to the formal treatment of null values in data bases and show some problems that are encountered. In the second part of the paper we present our approach, based on the Denotational Semantics Theory. An informal introduction to the theory is given and then the relational model is described in terms of the theory. Query evaluations are defined as continuous functions and several examples are presented. The formalization in the framework of Denotational Semantics allows for a better understanding of the semantic problems with null values. It also gives flexibility for alternatives in acceptable semantic interpretations. We conclude with a presentation of an algorithm for the evaluation of simple queries. This algorithm uses symbolic manipulations and it is more economical than the strict application of the definition of query evaluations.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {162–169},
numpages = {8},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582124,
author = {Sciore, Edward},
title = {Improving Semantic Specification in a Relational Database},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582124},
doi = {10.1145/582095.582124},
abstract = {Standard semantics for the relational model considers domain values to be objects, which assume the roles indicated by the name of its associated attribute. Entities are related to each other to form tuples in a relation; attributes are also interrelated, but in this case the exact relationships have always been left implied or "intuitive." This paper introduces renaming rules, which are a way to formally specify these relationships. Properties of these rules are discussed, and a complete axiomatization is presented.Renaming rules allow meaningful equi-joins to be couched in terms of natural joins. They are intimately associated with the abstraction concept of generalization, and provide a natural semantics and theory for the relational algebraic operatiors select and union. These operators in turn use Smith's subcategory functional dependencies to achieve a better decomposition of a database scheme; to this end, a general normal form algorithm is presented.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {170–178},
numpages = {9},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/3253377,
author = {Smith, John M.},
title = {Session Details: Database Semantics II},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3253377},
doi = {10.1145/3253377},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
numpages = {1},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582126,
author = {Zaniolo, Carlo},
title = {Design of Relational Views over Network Schemas},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582126},
doi = {10.1145/582095.582126},
abstract = {An algorithm is presented for designing relational views over network schemas to: (1) support general query and update capability, (2) preserve the information content of the data base and (3) provide independence from its physical organization. The proposed solution is applicable to many existing CODASYL databases without data or schema conversion. The particular declarations of a CODASYL schema which supply sources of logical data definition are first identified. Then the view design algorithm is derived on the basis of a formal analysis of the semantic constraints established by these declarations. A new form of data structure diagram is also introduced to visualize these constraints.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {179–190},
numpages = {12},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

@inproceedings{10.1145/582095.582127,
author = {El-Masri, Ramez and Wiederhold, Gio},
title = {Data Model Integration Using the Structural Model},
year = {1979},
isbn = {089791001X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/582095.582127},
doi = {10.1145/582095.582127},
abstract = {One approach to the design of a logical model for an integrated database requires each potential user or application to specify its view as a data model. An integration phase follows, where these user data models are integrated into a global database model. We address the problem of view integration when user data models are expressed using the structural model [Wi77, WE79].The structural model is built from relations in Boyce-Codd normal form [Co74]. A basic set of integrity assertions is implicit in the model. The integrity assertions are defined by classification of relations into types, and are represented by connections between relations. We will show how to integrate different representations of two related real-world entity classes.},
booktitle = {Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data},
pages = {191–202},
numpages = {12},
keywords = {relational model, data model integration, entity classes and relationships, structural model, data semantics, conceptual and external schema, ansi/sparc dbms architecture, logical database design},
location = {Boston, Massachusetts},
series = {SIGMOD '79}
}

