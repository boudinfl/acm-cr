@inproceedings{10.1145/500080.500082,
author = {Rappaport, Robert L.},
title = {File Structure Design to Facilitate On-Line Instantaneous Updating},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500082},
doi = {10.1145/500080.500082},
abstract = {Data base management systems which permit on-line manipulation and modification of records, present a unique class of problems whose solution require facilities that can guarantee reliability, consistency and flexibility. This paper presents the design of an implemented file structure which attacks these problems systematically and achieves highly satisfactory results.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {1–14},
numpages = {14},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500083,
author = {Cook, Thomas J.},
title = {A Data Base Management System Design Philosophy},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500083},
doi = {10.1145/500080.500083},
abstract = {The separation of all representations of structural properties from data is proposed as a stratagem for data base management system (DBMS) design. The DBMS operates by creating for each user an interpreted user-oriented data base machine which utilizes the separated structure representations as an instruction stream. An example of the user data base machine is considered, and a proposed implementation of the DBMS is outlined. The advantages of such a DBMS are discussed.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {15–22},
numpages = {8},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500084,
author = {Fern\'{a}ndez, E. B. and Summers, R. C. and Coleman, C. D.},
title = {An Authorization Model for a Shared Data Base},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500084},
doi = {10.1145/500080.500084},
abstract = {An authorization model is presented, applicable to a shared data base with well defined data structures. Access to this data base is made through a high level language, which is extended to permit data manipulation and to provide data views for different applications. The authorization model includes: 1) the explicit introduction of the concept of application into the definition of user rights; and 2) the use of predicates that can depend on any data in the system to control access at the data field level. Enforcement of authorization is distributed along time (mostly at compile time), and uses the view mechanism to make evident the application program data requests, which are checked by a centralized procedure that consults the access matrix. The system is shown to provide comprehensive authorization, including implementation of levels and compartments, special access restrictions, content-dependent, context-dependent and functional access.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {23–31},
numpages = {9},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500085,
author = {McGee, W. C.},
title = {File-Level Operations on Network Data Structures},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500085},
doi = {10.1145/500080.500085},
abstract = {The time and cost of implementing data processing applications can be greatly reduced through the use of software systems which provide language for the expression of file-level operations on data, i.e., operations whose operands are sets of records or entire files, such as report generation and sorting. Such systems, which have been referred to as self-contained systems or generalized file management systems, have characteristically been restricted to logical data structure classes no richer than hierarchies. This paper explores the extension of the concept of file-level operations to network structures, as exemplified by the CODASYL DDLC data structure class, on the assumption that such a facility will prove useful to certain types of users (e.g., data administrators) for certain types of data manipulation (e.g., data base creation and updating). The paper first outlines the general requirements which must be met in such a facility, and then describes a specific approach to the development of a language for such a facility.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {32–47},
numpages = {16},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500086,
author = {Chang, Shi-Kuo},
title = {Data Base Decomposition in a Hierarchical Computer System},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500086},
doi = {10.1145/500080.500086},
abstract = {The design of a distributed data base for a hierarchical computer system is investigated. If the transmission cost and storage cost can be calculated from linear cost functions, a data base can be decomposed based upon a simple figure of merit. Moreover, each file can be allocated individually. When the cost functions are nonlinear, a file allocation algorithm is proposed to allocate files which again is based upon a simple figure of merit. The decomposition problem for completely decentralized data bases is also considered.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {48–53},
numpages = {6},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500088,
author = {Astrahan, Morton M. and Chamberlin, Donald D.},
title = {Implementation of a Structured English Query Language},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500088},
doi = {10.1145/500080.500088},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {54},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500089,
author = {Gotlieb, Leo R.},
title = {Computing Joins of Relations},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500089},
doi = {10.1145/500080.500089},
abstract = {Little has appeared on the problems of efficiently storing, accessing, and manipulating relations. These are of considerable interest, both to implementors and those seeking comparison with other database models. In this paper we examine how one relational operation, the join, can be efficiently computed. Algorithms are presented, and evaluated with respect to storage use and computing time.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {55–63},
numpages = {9},
keywords = {data bases, relational systems, joins},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500090,
author = {Smith, John Miles and Chang, Philip Yen-Tang},
title = {Optimizing the Performance of a Relational Algebra Data Base Interface},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500090},
doi = {10.1145/500080.500090},
abstract = {An approach for implementing a "smart" interface to support a relational view of data is proposed. The basic idea is to employ automatic programming techniques so that the interface analyzes and efficiently refines the high level query specification supplied by the user. An interface called SQUIRAL (Smart Query Interface for a Relational Algebra), which was designed using this approach, is described in detail. Several optimization techniques that derive from this approach are discussed.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {64},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500091,
author = {Stonebraker, Michael},
title = {Implementation of Integrity Constraints and Views by Query Modification},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500091},
doi = {10.1145/500080.500091},
abstract = {Because the user interface in a relatonal data base management system may be decoupled from the storage representation of data, novel, powerful and efficient integrity control schemes are possible. This paper indicates the mechanism being implemented in one relational system to prevent integrity violations which can result from improper updates by a process. Basically each interaction with the data is immediately modified at the query language level to one guaranteed to have no integrity violations. Also, a similar modification technique is indicated to support the use of "views," i.e. relations which are not physically present in the data base but are defined in terms of ones that are.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {65–78},
numpages = {14},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500092,
author = {Minker, Jack},
title = {Performing Inferences over Relation Data Bases},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500092},
doi = {10.1145/500080.500092},
abstract = {In a relational data base, if a relation is listed explicitly in the data base, then questions asking whether the relation exists can be retrieved readily. There are questions that may be posed to such a system in which, although the answer is not listed in an explicit form, nonetheless, the answer is implicit within the system. In this paper, an algorithm is presented which will permit questions to be answered where the answer is implicit within the data base. One must infer the answer from the given relations. The problem of performing inferences is related to developments in the field of artificial intelligence: state-space, problem-reduction, and theorem-proving techniques all apply. It is shown how the answer to the question may be extracted, and the reasons for the deduction may be given. Developments required to construct an operational relational system for large data base problems with an inferential capability are discussed.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {79–91},
numpages = {13},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500093,
author = {Welch, James W. and Graham, J. Wesley},
title = {Information Retrieval in Files Described Using Sets},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500093},
doi = {10.1145/500080.500093},
abstract = {A number of file structures (e.g., inverted files and multilist files) can be modelled as a collection of records whose contents are described using sets. With each of these sets is associated a definition which is stated as a Boolean expression of attributes. The contents of a set logically consist of all records in the file for which the associated definition is true. A common application is to determine all records in the file which satisfy a given query (stated as a Boolean expression of attributes).We consider this retrieval problem in a general manner. A method is developed whereby the descriptive sets are combined, using the conventional set-theoretic operations, to obtain a superset of the required collection of records. This superset can be shown to minimal, with regard to the given query and the given collection of descriptive sets. For an arbitrary query, some of the descriptive sets may be irrelevant and can be ignored when constructing this superset. We present a method whereby the descriptive sets can be partitioned into classes and we show how some of these partitions need not be considered when constructing the superset.A general model of the file structure, called Set-Theoretical Descriptive Storage (SeTDS), is formulated and used to analyze the retrieval problem. The minimal superset, obtained in the basic construction, may not be the best superset to process in order to determine the exact collection of records (complementation, for example, may be a prohibitively expensive operation). Because of these considerations we present a number of methods to construct supersets which are constrained in different ways (e.g., complementation of sets is not allowed).},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {92–98},
numpages = {7},
keywords = {attributes, retrieval, boolean functions, boolean queries, file organization, information retrieval, inverted file, multilist file},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500095,
author = {Bakkom, David E. and Behymer, James A.},
title = {Implementation of a Prototype Generalized File Translator},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500095},
doi = {10.1145/500080.500095},
abstract = {The design of generalized data translators, particularly in the area of data base translation, has been the subject of much research in recent years. The practical application of this research has been limited and conducted primarily at the university level. This article outlines the research and development of a prototype generalized file translator by Honeywell.The Honeywell file translator is driven by descriptions of the input file, the output file and the file transformation to take place. These descriptions are provided using a straight-forward, data definition language (FDDL), which can easily be used by an applications programmer accustomed to working with a high level language. Techniques are discussed that attack many problems fundamental to a practical implementation of a generalized file translator. These problems include creating a DDL environment with which the user is familiar, and which includes simple data attribute descriptions; providing adequate performance; and supplying error detection and control at translation time.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {99–110},
numpages = {12},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500096,
author = {Shu, Nan C. and Housel, Barron C. and Lum, Vincent Y.},
title = {CONVERT: A High Level Translation Definition Language for Data Conversion},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500096},
doi = {10.1145/500080.500096},
abstract = {This paper describes in detail a translation definition language, CONVERT, for specifying the mapping of the instances of source items, which may be components of one or more files, into instances of target data, which may constitute multiple files.The language is designed for the class of users who are familiar with the logical aspects of their data, know what they want to be done, but do not want to be concerned with the details of how to accomplish it. It is high level and non-procedural according to current standards.The language provides very powerful and highly flexible restructuring capability. Although primarily designed for hierarchically structured data, it is applicable to other kinds of data structures as well. It is believed that the language can handle all common processes required in a data translation. Furthermore, the simple underlying concepts enable the users to visualize the translation processes, thus making data conversion a much simpler task. Examples to illustrate the languages' applications are included.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {111},
numpages = {1},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500097,
author = {Shoshani, Arie},
title = {A Logical-Level Approach to Data Base Conversion},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500097},
doi = {10.1145/500080.500097},
abstract = {In this paper we describe an ongoing project which is addressing the problem of converting and transferring data bases among disparate data management systems (DMSs). The difficulties in converting a data base from one DMS to another stem from the fact that data base structures are system and application dependent. As a result, data base structures embed constraints of three types: (1) logical-level constraints, such as hierarchies, networks, size and type of fields; (2) storage-level constraints, such as inversion capabilities, access paths, and indexing organization; and (3) physical-level constraints, such as physical devices and block/record structures.The approach taken by this project is based on the concept that the data conversion process can depend basically on conversion at the logical level only. Conversion at this level can be achieved by using existing query and generate capabilities of DMSs to move data from their physical representation to the logical level and vice versa. Detailed descriptions of the system components and the languages supporting them are given.An important aspect of the work is in the area of semantics of logical data conversion. We choose to restrict the basic conversion types to field-to-field mappings. Then, semantic analysis determines which combinations of conversion types are permissible. This approach allows for conversion tools that are powerful yet simple to specify.Finally, some observations on the implications of data conversion needs for the design of data management systems are suggested.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {112–122},
numpages = {11},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500098,
author = {Navathe, Shamkant B. and Merten, Alan G.},
title = {Investigations into the Application of the Relational Model to Data Translation},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500098},
doi = {10.1145/500080.500098},
abstract = {Experience with data translation over the last two years has resulted in a definite set of requirements for the normalized representation of data when used as an intermediate form during the process. The logical requirements pertain to the ability to represent a class of data structures including networks. The implementation requirements include the specification of two physical representations termed as the Restructurer Internal Form and the Interchange Form.Recent investigations with the Normal Forms of the relational model have shown that1. they satisfy the logical requirements2. a complete normalization to the third Normal Form requires excessive dependency data and results in reducing the restructuring operation to an identity transformation.3. normalization is not conducive to localizing the restructuring operations in the translator4. the first Normal Form used as a vehicle for translation poses problems with specification of keys and in handling networks.To alleviate the difficulties of normalization, a Modified Normal Form, similar to the First Normal Form, was designed and investigated. On the basis of the accessing, manipulation and processing requirements in the current model of data translation, it is concluded that a software system must be designed to work with the relational Normal Forms and their modified versions.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {123–138},
numpages = {16},
keywords = {relational model of data, data restructuring, normal forms of data, data base, data definition, data translation},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500099,
author = {Schneider, G. Michael},
title = {DSCL: A Data Specification and Conversion Language for Networks},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500099},
doi = {10.1145/500080.500099},
abstract = {The rapid growth of large, heterogeneous, resource-sharing computer networks has created a serious problem in the sharing of information between incompatible systems. These incompatibilities can be categorized as either physical or logical in nature. Physical incompatibilities are problems caused by the way that the individual binary digits, regardless of what information they represent, are generated or stored internally. This would include character, word, and record size differences, blocking factors, and parity checking. Logical incompatibilities are differences in the way the meaning of information itself is represented. This could include internal code set, numeric data type representation, text compression, the addition or deletion of fields, resequencing and specially assigned bit patterns. This paper describes the initial work on a processor for supporting the real-time translation and transmission of data streams between nodes of a computer network. The processor, which will address itself to all the problem areas mentioned above, will contain as its primary component a Data Specification and Conversion Language (DSCL) for 1) specifying the physical and logical structure of the data streams at the sending and receiving sites and 2) describing and implementing the translation processes required for conversion of the source stream into the desired target stream. DSCL is implemented in the framework of a very high-level, special-purpose language with a wide range of automatic (i.e. transparent) services performed on behalf of a user. The execution of the resulting DSCL program by the DSCL processor will actually effect the transmission and translation of a specified data stream between network nodes.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {139–148},
numpages = {10},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500101,
author = {Steel, Thomas B.},
title = {Data Base Standardization: A Status Report},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500101},
doi = {10.1145/500080.500101},
abstract = {This paper is a report on the current (1975 May) status of the Study Group on Data Base Management Systems in the United States. While the official purpose of this Study Group is an investigation of standardization potential in the area of data base management systems, an important by-product of the work of the Group has been the development of a set of requirements for effective data base management systems. As no existing or proposed implementation of a data base management system satsified these requirements, nor comprehends more than a fraction of the concepts involved, it is appropriate to explicate these ideas in the present forum.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {149–156},
numpages = {8},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500103,
author = {Mommens, J. H. and Smith, S. E.},
title = {Automatic Generation of Physical Data Base Structures},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500103},
doi = {10.1145/500080.500103},
abstract = {This paper addresses a problem which arises during the design of an integrated data base: this is to generate a set of physical data structures capable of supporting a desired set of logical data structures. A prototype design aid which generates physical data structures for IMS is described. A state diagram is used to represent the constraints imposed by IMS, and a modified depth first tree search is used to find the physical data structures. One can force the solution to either satisfy bounds on one or more objective functions, and/or optimize a single objective function.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {157–165},
numpages = {9},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500104,
author = {Gerritsen, Rob},
title = {A Preliminary System for the Design of DBTG Data Structures},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500104},
doi = {10.1145/500080.500104},
abstract = {The functional approach to data base design is introduced. In this approach the goal of design is to derive a data structure which is capable of supporting a set of anticipated queries rather than a structure which "models the business" in some other way. An operational computer program is described which utilizes the functional approach to design data structures conforming to the Data Base Task Group specifications. The automatic programming technology utilized by this program, although typically used to generate procedure, is here used to generate declaratives.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {166},
numpages = {1},
keywords = {data structure, data base task group, translation, data base design, non-procedural languages, automatic programming, network model of data bases},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500105,
author = {Schneider, L. S. and Spath, C. R.},
title = {Quantitative Data Description},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500105},
doi = {10.1145/500080.500105},
abstract = {Quantitative descriptions of data populations have played an important role in the data base design process, particularly where simulation has been employed. The new levels of fidelity and representation-independence made possible by recent advances in data description languages warrant a renewed interest in this technique. This paper presents a new approach to describing the quantitative characteristics of a data base at the representation-independent level. The terminology is based on the Entity Set level of the Data Independent Accessing Model (DIAM I), but the concept is applicable to the Relational Model or the Concept Class Model of DIAM II. The first section discusses the concepts of the approach. Beginning with the simple case of a steady-state system with independent probabilities, the discussion proceeds to introduce constant-change and variable-change dynamics and several orders of conditional biases. Section two presents a highly simplified but illustrative example to show the technique's ease of application and give some insight to its potential in a problem solving environment. Finally, an appendix is provided which reduces the technique to practicality through a comprehensive set of data collection forms that could be used as the basis for a powerful data dictionary facility.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {167–185},
numpages = {19},
keywords = {data base design requirements, data base simulation, data description, data dictionaries, entity set model},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500106,
author = {Schkolnick, Mario},
title = {Secondary Index Optimization},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500106},
doi = {10.1145/500080.500106},
abstract = {A major problem to be considered in the design of a data base is that of index selection. In this paper we present a model of a data base together with a probabilistic model for the transactions conducted with the data base: queries and updates. We obtain characterizations of the optimal solution to the best choice of indices. An algorithm is shown to solve this problem, which, in a number of cases, has a running time of O(m log m), where m is the number of attributes of the file.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {186–192},
numpages = {7},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500107,
author = {Bandurski, Ann Ellis and Jefferson, David K.},
title = {Data Description for Computer-Aided Design},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500107},
doi = {10.1145/500080.500107},
abstract = {Data Description Languages (DDLs) usually are discussed in terms of business data processing applications. This paper describes the importance of DDLs in computer-aided design (CAD). Users of CAD systems are compared with users of business data processing systems, and are shown to have radically different skills, view data in different ways, and perform different operations upon data. Users of CAD systems are concerned not so much with frequent update or casual interrogation as with powerful and flexible representation of interconnections and mathematical constraints among components. The implications of CAD requirements for the relational and network models are discussed.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {193–202},
numpages = {10},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500109,
author = {Fadous, Raymond and Forsyth, John},
title = {Finding Candidate Keys for Relational Data Bases},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500109},
doi = {10.1145/500080.500109},
abstract = {The candidate keys, as defined by E. F. Codd [4], are important in the process of reducing a normalized relation into second and third normal forms.Given a set of functional relations, Delobel and Casey [6] transformed this set into a Boolean function and it was shown that the set of all prime implicants of this function that have no primed variables are the only candidate keys.Starting only with the functional relations (dependencies), a new approach is proposed for finding all the candidate keys of a normalized relation without using a Boolean function. The algorithm depends on an implication matrix, its transitive closure and a systematic method for introducing attributes to form keys.This algorithm is suitable for hand computation as well as computer implementation.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {203–210},
numpages = {8},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500110,
author = {Schmid, Hans Albrecht and Swenson, J. Richard},
title = {On the Semantics of the Relational Data Model},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500110},
doi = {10.1145/500080.500110},
abstract = {The relational model for data base organization introduced clearly defined basic algebraic concepts whose properties are well understood. As a consequence, questions of a semantic nature arise. Due to the mathematical nature of the relational model, these questions cannot be answered completely by it. Therefore, a data model is discussed that takes into account basic semantic properties that object types and relationships among them apparently have in the real world. The model permits a data base to be partitioned into independent object types which are natural insertion and deletion units, and associations among them. Independent object types are described by characteristics which are meaningful modification units.This data model permits us to analyze the ideas behind the relational theory more precisely, in particular the meaning of functional dependency and normalization. Insertion-deletion rules for relations in third normal form are developed, and proposals are made to avoid some drawbacks that exist even when relations in third normal form are used as the user interface to a data base.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {211–223},
numpages = {13},
keywords = {data base design, users view of data, relational data base management systems, data structures},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500111,
author = {Deutscher, R. F. and Sorenson, P. G. and Tremblay, J. P.},
title = {Distribution-Dependent Hashing Functions and Their Characteristics},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500111},
doi = {10.1145/500080.500111},
abstract = {In this paper procedures are studied for storing, accessing, updating, and reorganizing data in large files whose organization is direct, an organization used when a fast response time is required. "Distribution-dependent" hashing functions and the division method are compared as methods of indirect addressing."Distribution-dependent" hashing functions are characterized. These hashing functions generate addresses from a set of keys by using knowledge of the distribution of that key set within the key space or range of keys. A study of the performance measures obtained during tests of these functions on several key sets indicates that in certain cases, distribution-dependent methods perform better than the division method. This result is extended by a demonstration that distribution-dependent hashing functions can accommodate a change in the distribution of keys without being redefined. A number of insertions to and deletions from the key set can be made before a distribution-dependent hashing function gives poorer performance than the division method under identical circumstances.If many additions are made to a set of keys, it becomes necessary to reorganize, in a larger storage area, the direct file of records identified by that key set. Although processor time must be sacrificed in order to redefine a distribution-dependent hashing function, the division method requires substantially greater access time in a reorganizational situation.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {224–236},
numpages = {13},
keywords = {hashing functions, data base reorganization, data base design},
location = {San Jose, California},
series = {SIGMOD '75}
}

@inproceedings{10.1145/500080.500112,
author = {Bernstein, P. A. and Swenson, J. R. and Tsichritzis, D. C.},
title = {A Unified Approach to Functional Dependencies and Relations},
year = {1975},
isbn = {9781450373289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500080.500112},
doi = {10.1145/500080.500112},
abstract = {In Codd's relational model, the relation name groups together a family of functional dependencies over a set of attributes. For integrity and for maintenance purposes it is important to eliminate inherent redundancy within a relation due to the repetition of instances of a functional connection between attributes. This led Codd to propose a series of three normalizations. The manipulation of normal forms is governed by functional dependencies that are explicitly declared to exist within the relation. Since functional dependencies completely govern the decomposition rules of normalization, perhaps it is more sensible to take them as the elementary notions to be later synthesized into more complex structures, such as relations. Our goals, then are twofold. First, we will discuss how the use of functional dependencies lends itself to a rigorous and correct, yet clear and simple description of complex data relationships. Second, we will outline some new computational techniques to map functional dependencies into normal form relations algorithmically, thus allowing us to use the dependencies as a basic unit on the implementation as well as conceptual level.},
booktitle = {Proceedings of the 1975 ACM SIGMOD International Conference on Management of Data},
pages = {237–245},
numpages = {9},
location = {San Jose, California},
series = {SIGMOD '75}
}

