@inproceedings{10.1145/192426.192428,
author = {Weiser, Mark},
title = {Creating the Invisible Interface: (Invited Talk)},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192428},
doi = {10.1145/192426.192428},
abstract = {For thirty years, most interface design, and most computer design, has been headed down the path of the “dramatic” machine.  Its highest ideal is to make a computer so exciting, so wonderful so interesting, that we never want to be without it.  A less-traveled path I call the “invisible”; its highest ideal is to make a computer so imbedded, so fitting, so natural, that we use it without even thinking about it.  (I have also called this notion “Ubiquitous Computing.”) I believe that in the next twenty years the second path will come to dominate.  But this will not be easy; very little of our current systems infrastructure will survive.  We have been building versions of the infrastructure-to-come at PARC for the past four years, in the form of inch-, foot-, and yard-sized computers we call Tabs, Pads, and Boards.  In this talk I will describe the humanistic origins of the “invisible” ideal in post-modernist thought.  I will then describe some of our prototypes, how they succeed and fail to be invisible, and what we have learned.  I will illustrate new systems issues that user interface designers will face when creating invisibility.  And I will indicate some new directions we are now exploring, including the famous “dangling string” display.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {1},
numpages = {1},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192429,
author = {Rennison, Earl},
title = {Galaxy of News: An Approach to Visualizing and Understanding Expansive News Landscapes},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192429},
doi = {10.1145/192426.192429},
abstract = {The Galaxy of News system embodies an approach to visualizing large quantities of independently authored pieces of information, in this case news stories.  At the heart of this system is a powerful relationship construction engine that constructs an associative relation network to automatically build implicit links between related articles.  To visualize these relationships, and hence the news information space, the Galaxy of News uses pyramidal structuring and visual presentation, semantic zooming and panning, animated visual cues that are dynamically constructed to illustrate relationships between articles, and fluid interaction in a three dimensional information space to browse and search through large databases of news articles.  The result is a tool that allows people to quickly  gain a broad understanding of a news base by providing an abstracted presentation that covers the entire information base, and through interaction, progressively refines the details of the information space.  This research has been generalized into a model for news access and visualization to provide automatic construction of news information spaces and derivation of an interactive news experience.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {3–12},
numpages = {10},
keywords = {abstracted information spaces, pyramidal information structures, information interaction design, information space design, 3D interactive graphics, information visualization},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192430,
author = {Lamping, John and Rao, Ramana},
title = {Laying out and Visualizing Large Trees Using a Hyperbolic Space},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192430},
doi = {10.1145/192426.192430},
abstract = {We present a new focus+context (fisheye) scheme for visualizing and manipulating large hierarchies.  The essence of our approach is to lay out the hierarchy uniformly on the hyperbolic plane and map this plane onto a circular display region.  The projection onto the disk provides a natural mechanism for assigning more space to a portion of the hierarchy while still embedding it in a much larger context.  Change of focus is accomplished by translating the structure on the hyperbolic plane, which allows a smooth transition without compromising the presentation of the context.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {13–14},
numpages = {2},
keywords = {hierarchy display, focus+context technique, fisheye display, information visualization},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192434,
author = {Lieberman, Henry},
title = {Powers of Ten Thousand: Navigating in Large Information Spaces},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192434},
doi = {10.1145/192426.192434},
abstract = {How would you interactively browse a very large display space, for example, a street map of the entire United States?  The traditional solution is zoom and pan.  But each time a zoom-in operation takes place, the context from which it came is visually lost.  Sequential applications of the zoom-in and zoom-out operations may become tedious.  This paper proposes an alternative technique, the macroscope, based on zooming and planning in multiple translucent layers.  A macroscope display should comfortably permit browsing continuously on a single image, or set of images in multiple resolutions, on a scale of at least 1 to 10,000.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {15–16},
numpages = {2},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192435,
author = {Bederson, Benjamin B. and Hollan, James D.},
title = {Pad++: A Zooming Graphical Interface for Exploring Alternate Interface Physics},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192435},
doi = {10.1145/192426.192435},
abstract = {We describe the current status of Pad++, a zooming graphical interface that we are exploring as an alternative to traditional window and icon-based approaches to interface design.  We discuss the motivation for Pad++, describe the implementation, and present prototype applications.  In addition, we introduce an informational physics strategy for interface design and briefly compare it with metaphor-based design strategies.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {17–26},
numpages = {10},
keywords = {information physics, interactive user interfaces, hypertext, zooming interfaces, multiscale interfaces, information navigation, information visualization, authoring},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192437,
author = {Lunzer, Aran},
title = {Reconnaissance Support for Juggling Multiple Processing Options},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192437},
doi = {10.1145/192426.192437},
abstract = {A large proportion of computer-supported tasks—such as design exploration, decision analysis, data presentation, and many kinds of retrieval—can be characterised as user-driven processing of a body of data in search of an outcome that satisfies the user.  Clearly such tasks can never be automated fully, but few existing tools offer support for mechanising more than the simplest repetitive aspects of the search.  Reconnaissance facilities, in which the computer produces summary reports from exploration in directions suggested by the user, can save the user time and effort by revealing which areas are the most deserving of detailed investigation.  The time users are prepared to spend on searching will be more effectively used, improving the likelihood of finding solutions that really meet their needs rather than merely being the first to appear satisfactory.  This note describes an implemented example of reconnaissance, based on the parallel coordinates presentation technique.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {27–28},
numpages = {2},
keywords = {direct manipulation, visual programming, dynamic query, interaction techniques, graphical user interfaces, data visualisation},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192439,
author = {Marx, Matt and Schmandt, Chris},
title = {Putting People First: Specifying Proper Names in Speech Interfaces},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192439},
doi = {10.1145/192426.192439},
abstract = {Communication is about people, not machines.  But as firms and families alike spread out geographically, we rely increasingly on telecommunications tools to keep us “connected”. The challenge of such systems is to enable conversation between individuals without computational infrastructure getting in the way.  This paper compares two speech-based communication systems, Phoneshell and Chatter, in how they deal with the keys to communication: proper names.  Chatter, a conversational system using speech-recognition, improves upon the hierarchical nature of the touch-tone based Phoneshell by maintaining context and enabling use of anaphora.  Proper names can present particular problems for speech recognizers, so an interface algorithm for reliable name specification by  spelling is offered.  Since individual letter recognition is non-robust, Chatter implicitly disambiguates strings of letters based on context.  We hypothesize that the right interface can make faulty speech recognition as usable as TouchTones—even more so.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {29–37},
numpages = {9},
keywords = {conversational systems, error-repair, speech recognition, user interface},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192443,
author = {Edwards, W. Keith and Mynatt, Elizabeth D.},
title = {An Architecture for Transforming Graphical Interfaces},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192443},
doi = {10.1145/192426.192443},
abstract = {While graphical user interfaces have gained much popularity in recent years, there are situations when the need to use existing applications in a nonvisual modality is clear. Examples of such situations include the use of applications on hand-held devices with limited screen space (or even no screen space, as in the case of telephones), or users with visual impairments.We have developed an architecture capable of transforming the graphical interfaces of existing applications into powerful intuitive nonvisual interfaces. Our system, called Mercator, provides new input and output techniques for working in the nonvisual domain. Navigation is accomplished by traversing a hierarchical tree representation of the interface structure. Output is primarily auditory, although other output modalities (such as tactile) can be used as well. The mouse, an inherently visually-oriented device, is replaced by keyboard and voice interaction.Our system is currently in its third major revision. We have gained insight into both the nonvisual interfaces presented by our system and the architecture necessary to construct such interfaces. This architecture uses several novel techniques to efficiently and flexibly map graphical interfaces into new modalities.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {39–47},
numpages = {9},
keywords = {multimodal interfaces, GUIs, visual impairment, X, auditory interfaces},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192446,
author = {Beaudouin-Lafon, Michel and Gaver, William W.},
title = {ENO: Synthesizing Structured Sound Spaces},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192446},
doi = {10.1145/192426.192446},
abstract = {ENO is an audio server designed to make it easy for applications in the Unix environment to incorporate non-speech audio cues. At the physical level, ENO manages a shared resource, namely the audio hardware. At the logical level, it manages a sound space that is shared by various client applications. Instead of dealing with sound in terms of its physical description (i.e., sampled sounds), ENO allows sounds to be presented and controlled in terms of higher-level descriptions of sources, interactions, attributes, and sound space. Using this structure, ENO can facilitate the creation of consistent, rich systems of audio cues. In this paper, we discuss the justification, design, and implementation of ENO.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {49–57},
numpages = {9},
keywords = {client-server architecture, non-speech audio, auditory interfaces, multimodal interfaces, sound},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192449,
author = {Stevens, Marc P. and Zeleznik, Robert C. and Hughes, John F.},
title = {An Architecture for an Extensible 3D Interface Toolkit},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192449},
doi = {10.1145/192426.192449},
abstract = {This paper presents the architecture for an extensible toolkit used in construction and rapid prototyping of three dimensional interfaces, interactive illustrations, and three dimensional widgets. The toolkit provides methods for the direct manipulation of 3D primitives which can be linked together through a visual programming language to create complex constrained behavior. Features of the toolkit include the ability to visually build, encapsulate, and parameterize complex models, and impose limits on the models. The toolkit's constraint resolution technique is based on a dynamic object model similar to those in prototype delegation object systems. The toolkit has been used to rapidly prototype tools for mechanical modelling, scientific visualization, construct 3D widgets, and build mathematical illustrations.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {59–67},
numpages = {9},
keywords = {user interface toolkits, visual programming, direct manipulation, interaction techniques, constraints, delegation},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192451,
author = {Herndon, Kenneth P. and Meyer, Tom},
title = {3D Widgets for Exploratory Scientific Visualization},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192451},
doi = {10.1145/192426.192451},
abstract = {Scientists use a variety of visualization techniques to help understand computational fluid dynamics (CFD) datasets, but the interfaces to these techniques are generally two-dimensional and therefore are separated from the 3D view. Both rapid interactive exploration of datasets and precise control over the parameters and placement of visualization techniques are required to understand complex phenomena contained in these datasets. In this paper, we present work in progress on a 3D user interface for exploratory visualization of these datasets.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {69–70},
numpages = {2},
keywords = {scientific visualization, 3D user interface},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192454,
author = {Bharat, Krishna and Brown, Marc H.},
title = {Building Distributed, Multi-User Applications by Direct Manipulation},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192454},
doi = {10.1145/192426.192454},
abstract = {This paper describes Visual Obliq, a user interface development environment for constructing distributed, multi-user applications. Applications are created by designing the interface with a GUI-builder and embedding callback code in an interpreted language, in much the same way as one would build a traditional (non-distributed, single-user) application with a modern user interface development environment. The resulting application can be run from within the GUI-builder for rapid turnaround or as a stand-alone executable. The Visual Obliq runtime provides abstractions and support for issues specific to distributed computing, such as replication, sharing, communication, and session management. We believe that the abstractions provided, the simplicity of the programming model, the rapid turnaround time, and the applicability to heterogeneous environments, make Visual Obliq a viable tool for authoring distributed applications and groupware.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {71–80},
numpages = {10},
keywords = {distributed applications, CSCW, groupware, GUI-builders, UIMS, application builders},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192458,
author = {Bartlett, Joel F.},
title = {Ramonamap—an Example of Graphical Groupware},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192458},
doi = {10.1145/192426.192458},
abstract = {Ramonamap is an iterative map for database and communication services within our workgroup. Resources are represented as icons on the map, which preserves their actual (or implied) physical location and capitalizes on a user's understanding of maps. The map is interactive, giving the user control over the level of detail visible, allowing more information and services to appear than could be placed on a static map. The interactivity also allows users to change the map and add icon annotations. Since the map is continuously derived from an on-line database, changes and annotations are immediately shared by all users. As the database contains a wealth of information about the group, it also serves as a source for static maps for other purposes.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {83–84},
numpages = {2},
keywords = {maps, groupware, simulated annealing},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192462,
author = {Miyashita, Ken and Matsuoka, Satoshi and Takahashi, Shin and Yonezawa, Akinori},
title = {Interactive Generation of Graphical User Interfaces by Multiple Visual Examples},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192462},
doi = {10.1145/192426.192462},
abstract = {The construction of application-specific Graphical User Interfaces (GUI) still needs considerable programming partly because the mapping between application data and its visual representation is complicated. This study proposes a system which generates GUIs by generalizing multiple sets of application data and its visualization examples. The most notable characteristic of the system is that programmers can interactively modify the mapping by “correcting” the system-generated visualization examples that represent the system's current notion of programmer's intentions. Conflicting mappings are automatically resolved via the use of constraint hierarchies.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {85–94},
numpages = {10},
keywords = {graphical user interfaces, constraint hierarchies, visual parsing, visualization, programming by example},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192466,
author = {Frank, Martin R. and Foley, James D.},
title = {A Pure Reasoning Engine for Programming by Demonstration},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192466},
doi = {10.1145/192426.192466},
abstract = {We present an inference engine that can be used for creating Programming By Demonstration systems. The class of systems addressed are those which infer a state change description from examples of state [9, 11].The engine can easily be incorporated into an existing design environment that provides an interactive object editor.The main design goals of the inference engine are responsiveness and generality. All demonstrational systems must respond quickly because of their interactive use. They should also be general—they should be able to make inferences for any attribute that the user may want to define by demonstration, and they should be able to treat any other attributes as parameters of this definition.The first goal, responsiveness, is best accommodated by limiting the number of attributes that the inference engine takes into consideration. This, however, is in obvious conflict with the second goal, generality.This conflict is intrinsic to the class of demonstrational system described above. The challenge is to find an algorithm which responds quickly but does not heuristically limit the number of attributes it looks at. We present such an algorithm in this paper.A companion paper describes Inference Bear [4], an actual demonstrational system that we have built using this inference engine and an existing user interface builder [5].},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {95–101},
numpages = {7},
keywords = {programming by demonstration},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192468,
author = {Masui, Toshiyuki},
title = {Evolutionary Learning of Graph Layout Constraints from Examples},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192468},
doi = {10.1145/192426.192468},
abstract = {We propose a new evolutionary method of extracting user preferences from examples shown to an automatic graph layout system. Using stochastic methods such as simulated annealing and genetic algorithms, automatic layout systems can find a good layout using an evaluation function which can calculate how good a given layout is. However, the evaluation function is usually not known beforehand, and it might vary from user to user. In our system, users show the system several pairs of good and bad layout examples, and the system infers the evaluation function from the examples using genetic programming technique. After the evaluation function evolves to reflect the preferences of the user, it is used as a general evaluation function for laying out graphs. The same technique can be used for a wide range of adaptive user interface systems.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {103–108},
numpages = {6},
keywords = {genetic algorithms, graphic object layout, genetic programming, programming by example, adaptive user interface, graph layout},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192470,
author = {Mackinlay, Jock D. and Robertson, George G. and DeLine, Robert},
title = {Developing Calendar Visualizers for the Information Visualizer},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192470},
doi = {10.1145/192426.192470},
abstract = {The increasing mass of information confronting a business or an individual have created a demand for information management applications. Time-based information, in particular, is an important part of many information access tasks. This paper explores how to use 3D graphics and interactive animation to design and implement visualizers that improve access to large masses of time-based information. Two new visualizers have been developed for the Information Visualizer: 1) the Spiral Calendar was designed for rapid access to an individual's daily schedule, and 2) the Time Lattice was designed for analyzing the time relationships among the schedules of groups of people. The Spiral Calendar embodies a new 3D graphics technique for integrating detail and context by placing objects in a 3D spiral. It demonstrates that advanced graphics techniques can enhance routine office information tasks. The Time Lattice is formed by aligning a collection of 2D calendars. 2D translucent shadows provide views and interactive access to the resulting complex 3D object. The paper focuses on how these visualizations were developed. The Spiral Calendar, in particular, has gone through an entire cycle of development, including design, implementation, evaluation, revision and reuse. Our experience should prove useful to others developing user interfaces based on advanced graphics.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {109–118},
numpages = {10},
keywords = {interactive animation, information retrieval, information visualization, translucent shadows, detail+context technique, graphical representations, 3D graphics, calendars},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192472,
author = {Eick, Stephen G.},
title = {Data Visualization Sliders},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192472},
doi = {10.1145/192426.192472},
abstract = {Computer sliders are a generic user input mechanism for specifying a numeric value from a range. For data visualization, the effectiveness of sliders may be increased by using the space inside the slider as• an interactive color scale,• a barplot for discrete data, and• a density plot for continuous data.The idea is to show the selected values in relation to the data and its distribution. Furthermore, the selection mechanism may be generalized using a painting metaphor to specify arbitrary, disconnected intervals while maintaining an intuitive user-interface.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {119–120},
numpages = {2},
keywords = {dynamic graphics, information visualization, thresholding, high interaction, selection},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192474,
author = {Kramer, Axel},
title = {Translucent Patches—Dissolving Windows},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192474},
doi = {10.1145/192426.192474},
abstract = {This paper presents motivation, design, and algorithms for using and implementing translucent, non-rectangular patches as a substitute for rectangular opaque windows. The underlying metaphor is closer to a mix between the architects yellow paper and the usage of white boards, than to rectangular opaque paper in piles and folders on a desktop.Translucent patches lead to a unified view of windows, sub-windows and selections, and provide a base from which the tight connection between windows, their content, and applications can be dissolved. It forms one aspect of on-going work to support design activities that involve “marking” media, like paper and white boards, with computers. The central idea of that research is to allow the user to associate structure and meaning dynamically and smoothly to marks on a display surface.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {121–130},
numpages = {10},
keywords = {translucency, irregular shapes, interaction techniques, pen based interfaces, interface metaphors},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192477,
author = {Griswold, Ralph E. and Jeffery, Clinton L.},
title = {Nova: Low-Cost Data Animation Using a Radar-Sweep Metaphor},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192477},
doi = {10.1145/192426.192477},
abstract = {Nova is a simple technique for animating a data sequence whose elements include a primary numeric component and possibly one or more secondary dimensions. We use nova to visualize program behavior such as individual memory allocations, where the number of bytes in each allocation is a natural primary numeric dimension.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {131–132},
numpages = {2},
keywords = {software visualization, radial plots},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192479,
author = {Sukaviriya, Noi and Kovacevic, Srdjan and Foley, James D. and Myers, Brad A. and Olsen, Dan R. and Schneider-Hufschmidt, Matthias},
title = {Model-Based User Interfaces: What Are They and Why Should We Care?},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192479},
doi = {10.1145/192426.192479},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {133–135},
numpages = {3},
keywords = {model-based user interface, application modeling, design representation, user interface, design specification},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192485,
author = {Sannella, Michael},
title = {Skyblue: A Multi-Way Local Propagation Constraint Solver for User Interface Construction},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192485},
doi = {10.1145/192426.192485},
abstract = {Many user interface toolkits use constraint solvers to maintain geometric relationships between graphic objects, or to connect the graphics to the application data structures. One efficient and flexible technique for maintaining constraints is multi-way local propagation, where constraints are represented by sets of method procedures. To satisfy a set of constraints, a local propagation solver executes one method from each constraint.SkyBlue is an incremental constraint solver that uses local propagation to maintain a set of constraints as individual constraints are added and removed. If all of the constraints cannot be satisfied, SkyBlue leaves weaker constraints unsatisfied in order to satisfy stronger constraints (maintaining a constraint hierarchy). SkyBlue is a more general successor to the DeltaBlue algorithm that satisfies cycles of methods by calling external cycle solvers and supports multi-output methods. These features make SkyBlue more useful for constructing user interfaces, since cycles of constraints can occur frequently in user interface applications and multi-output methods are necessary to represent some useful constraints. This paper discusses some of applications that use SkyBlue, presents times for some user interface benchmarks and describes the SkyBlue algorithm in detail.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {137–146},
numpages = {10},
keywords = {user interface implementation, SkyBlue, constraint hierarchies, constraints, local propagation},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192488,
author = {Rau, Harald and Skiena, Stevens S.},
title = {Dialing for Documents: An Experiment in Information Theory},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192488},
doi = {10.1145/192426.192488},
abstract = {Standard telephone keypads are labeled with letters of the alphabet, enabling users to enter textual data for a variety of possible applications. However, the overloading of three letters on a single key creates a potential ambiguity as to which character was intended, which must be resolved for unambiguous text entry. Existing systems all use pairs of keypresses to spell out single key letters, but are extremely cumbersome and frustrating to use.Instead, we propose single-stroke text entry on telephone keypads, with the ambiguity resolved by exploiting information-theoretic constraints. We develop algorithms capable of correctly identifying up to 99% of the characters in typical English text, sufficient for such applications as telephones for the hearing impaired, E-mail without a terminal, and advanced voice-response systems.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {147–155},
numpages = {9},
keywords = {Viterbi algorithm, telephones for the hearing-impaired, information theory, telephone keypads},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192491,
author = {Vander Zanden, Bradley T.},
title = {Optimizing Toolkit-Generated Graphical Interfaces},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192491},
doi = {10.1145/192426.192491},
abstract = {Researchers have developed a variety of toolkits that support the development of highly interactive, graphical, direct manipulation applications such as animations, process monitoring tools, drawing packages, visual programming languages, games, and data and program visualization systems. These toolkits contain many useful features such as 1) structured graphics, 2) automatic display management, 3) constraints, and 4) high-level input-handling models. Despite a number of optimizations that have been described in the literature, most toolkit-generated applications run in a predominantly interpreted mode at runtime: they dynamically determine the set of constraints and objects that must be redisplayed, which requires the use of time consuming algorithms and data structures. The optimizations that do exist rely on semantic information that applies globally to all operations in an application. In this paper we identify a number of optimizations that require local, operation-specific semantic information about an application. For each operation, these optimizations pre-compute update plans that minimize the number of objects that are examined for redisplay, and pre-compute constraint plans that minimize the amount of dynamic scheduling and method dispatching that is performed for constraint satisfaction. We present performance measurements that suggest that these optimizations can significantly improve the performance of an application. We also discuss how a compiler might obtain from a programmer the information required to  implement these optimizations.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {157–166},
numpages = {10},
keywords = {constraints, optimization, automatic redisplay, structured graphics, development tools},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192493,
author = {Tang, Steven H. and Linton, Mark A.},
title = {Blending Structured Graphics and Layout},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192493},
doi = {10.1145/192426.192493},
abstract = {Conventional windowing environments provide separate classes of objects for user interface components, or “widgets,” and graphical objects. Widgets negotiate layout and can be resized as rectangles, while graphics may be shared, transformed, transparent, and overlaid. This presents a major obstacle to applications like user interface builders and compound document editors where the manipulated objects need to behave both like graphics and widgets.Fresco[1] blends graphics and widgets into a single class of objects. We have an implementation of Fresco and an editor called Fdraw that allows graphical objects to be composed like widgets, and widgets to be transformed and shared like graphics. Performance measurements of Fdraw show that sharing reduces memory usage without slowing down redisplay.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {167–173},
numpages = {7},
keywords = {user interface toolkit, object-oriented graphics, user interface builder, structured graphics},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192494,
author = {Saund, Eric and Moran, Thomas P.},
title = {A Perceptually-Supported Sketch Editor},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192494},
doi = {10.1145/192426.192494},
abstract = {The human visual system makes a great deal more of images than the elemental marks on a surface. In the course of viewing, creating, or editing a picture, we actively construct a host of visual structures and relationships as components of sensible interpretations. This paper shows how some of these computational processes can be incorporated into perceptually-supported image editing tools, enabling machines to better engage users at the level of their own percepts. We focus on the domain of freehand sketch editors, such as an electronic whiteboard application for a pen-based computer. By using computer vision techniques to perform covert recognition of visual structure as it emerges during the course of a drawing/editing session, a perceptually supported image editor gives users access to visual objects as they are perceived by the human visual system. We present a flexible image interpretation architecture based on token grouping in a multiscale blackboard data structure. This organization supports multiple perceptual interpretations  of line drawing data, domain-specific knowledge bases for interpretable visual structures, and gesture-based selection of visual objects. A system implementing these ideas, called PerSketch, begins to explore a new space of WYPIWYG (What You Perceive Is What You Get) image editing tools.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {175–184},
numpages = {10},
keywords = {interactive graphics, drawing tools, computer vision, token grouping, scale space blackboard WYSIWYG, PerSketch, perceptual grouping, sketch tools, image editing, machine vision, perceptual organization, gestures, pen computing, graphics editing},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192496,
author = {Baudel, Thomas},
title = {A Mark-Based Interaction Paradigm for Free-Hand Drawing},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192496},
doi = {10.1145/192426.192496},
abstract = {We propose an interaction technique for editing splines that is aimed at professional graphic designers. These users do not take full advantage of existing spline editing software because their mental representations of drawings do not match the underlying conceptual model of the software. Although editing splines by specifying control points and tangents may be appropriate for engineers, graphic designers think more in terms of strokes, shapes, and gestures appropriate for editing drawings. Our interaction technique matches the latter model: curves can be edited by means of marks, similar to the way strokes are naturally overloaded when drawing on paper. We describe this interaction technique and the algorithms used for its implementation.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {185–192},
numpages = {8},
keywords = {CAD, gestures, interaction models, graphic design, mark-based interaction, spline editing},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192498,
author = {Norman, Don},
title = {Trends in the Computer Industry: Life-Long Subscriptions, Magical Cures, and Profits along the Information Highway (Invited Talk)},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192498},
doi = {10.1145/192426.192498},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {193},
numpages = {1},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192500,
author = {Chatty, St\'{e}phane},
title = {Extending a Graphical Toolkit for Two-Handed Interaction},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192500},
doi = {10.1145/192426.192500},
abstract = {Multimodal interaction combines input from multiple sensors such as pointing devices or speech recognition systems, in order to achieve more fluid and natural interaction. Two-handed interaction has been used recently to enrich graphical interaction. Building applications that use such combined interaction requires new software techniques and frameworks. Using additional devices means that user interface toolkits must be more flexible with regard to input devices and event types. The possibility of parallel interactions must also be taken into account, with consequences on the structure of toolkits. Finally, frameworks must be provided for the combination of events and status of several devices. This paper reports on the extensions we made to the direct manipulation interface toolkit Whizz in order to experiment two-handed interaction. These extensions range from structural adaptations of the toolkit to new techniques for specifying the time-dependent fusion of events.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {195–204},
numpages = {10},
keywords = {direct manipulation, two-handed interaction, multimodal interaction, interaction styles, graphical toolkit},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.197517,
author = {Shaw, Chris and Green, Mark},
title = {Two-Handed Polygonal Surface Design},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.197517},
doi = {10.1145/192426.197517},
abstract = {This paper describes a Computer Aided Design system for sketching free-form polygonal surfaces such as terrains and other natural objects. The user manipulates two 3D position and orientation trackers with three buttons, one for each hand. Each hand has a distinct role to play, with the dominant hand being responsible for picking and manipulation, and the less-dominant hand being responsible for context setting of various kinds. The less-dominant hand holds the workpiece, sets which refinement level that can be picked by the dominant hand, and generally acts as a counterpoint to the dominant hand. In this paper, the architecture of the system is outlined, and a simple surface is shown.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {205–212},
numpages = {8},
keywords = {free-form surfaces, interactive 3D graphics, virtual reality, user interface software, geometric modeling, two handed interfaces},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

@inproceedings{10.1145/192426.192501,
author = {Hinckley, Ken and Pausch, Randy and Goble, John C. and Kassell, Neal F.},
title = {A Survey of Design Issues in Spatial Input},
year = {1994},
isbn = {0897916573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/192426.192501},
doi = {10.1145/192426.192501},
abstract = {We present a survey of design issues for developing effective free-space three-dimensional (3D) user interfaces. Our survey is based upon previous work in 3D interaction, our experience in developing free-space interfaces, and our informal observations of test users. We illustrate our design issues using examples drawn from instances of 3D interfaces.For example, our first issue suggests that users have difficulty understanding three-dimensional space. We offer a set of strategies which may help users to better perceive a 3D virtual environment, including the use of spatial references, relative gesture, two-handed interaction, multisensory feedback, physical constraints, and head tracking. We describe interfaces which employ these strategies.Our major contribution is the synthesis of many scattered results, observations, and examples into a common framework. This framework should serve as a guide to researchers or systems builders who may not be familiar with design issues in spatial input. Where appropriate, we also try to identify areas in free-space 3D interaction which we see as likely candidates for additional research.An extended and annotated version of the references list for this paper is available on-line through mosaic at address http://uvacs.cs.virginia.edu/~kph2q/.},
booktitle = {Proceedings of the 7th Annual ACM Symposium on User Interface Software and Technology},
pages = {213–222},
numpages = {10},
keywords = {ergonomics of virtual manipulation, two-handed input, haptic input, virtual reality, 3D interaction, spatial input},
location = {Marina del Rey, California, USA},
series = {UIST '94}
}

