@inproceedings{10.1145/800096.803132,
author = {Koll, Matthew B.},
title = {WEIRD: An Approach to Concept-Based Information Retrieval},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803132},
doi = {10.1145/800096.803132},
abstract = {WEIRD is an automatic document retrieval system designed and implemented at Syracuse University, which attempts to advance the art of computerized retrieval from word-matching to judging conceptual similarity. WEIRD uses a vector space model to represent the relations among terms and documents. Items in the space are located according to their “meaning”, which is their proximity to all other items in the data base as measured by co-occurrence frequencies. This is done without manipulating large matrices. The dimensions of the space are not used to define relations; items are defined solely by their position relative to the other items. Retrieval is determined by Euclidean distance from the plotted query. In the first section of the paper the basic characteristics of WEIRD are described. Second, the results of a preliminary evaluation are reported. Alternatives for further development of WEIRD are then considered.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {1},
numpages = {1},
series = {SIGIR '78}
}

@article{10.1145/1013234.803132,
author = {Koll, Matthew B.},
title = {WEIRD: An Approach to Concept-Based Information Retrieval},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803132},
doi = {10.1145/1013234.803132},
abstract = {WEIRD is an automatic document retrieval system designed and implemented at Syracuse University, which attempts to advance the art of computerized retrieval from word-matching to judging conceptual similarity. WEIRD uses a vector space model to represent the relations among terms and documents. Items in the space are located according to their “meaning”, which is their proximity to all other items in the data base as measured by co-occurrence frequencies. This is done without manipulating large matrices. The dimensions of the space are not used to define relations; items are defined solely by their position relative to the other items. Retrieval is determined by Euclidean distance from the plotted query. In the first section of the paper the basic characteristics of WEIRD are described. Second, the results of a preliminary evaluation are reported. Alternatives for further development of WEIRD are then considered.},
journal = {SIGIR Forum},
month = may,
pages = {1},
numpages = {1}
}

@inproceedings{10.1145/800096.803133,
author = {Tharp, Alan L.},
title = {Augmented Transition Networks as a Design Tool for Personalized Database Systems},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803133},
doi = {10.1145/800096.803133},
abstract = {This paper illustrates the use of Augmented Transition Networks (ATNs) as a design tool for constructing document retrieval systems for those personalized applications which are too small or specialized to attract a commercial vendor. ATNs, which are explained in the context of this application, are used not only to improve the human/computer interface with the retrieval system but also to conceptually organize its structure.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {2–13},
numpages = {12},
series = {SIGIR '78}
}

@article{10.1145/1013234.803133,
author = {Tharp, Alan L.},
title = {Augmented Transition Networks as a Design Tool for Personalized Database Systems},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803133},
doi = {10.1145/1013234.803133},
abstract = {This paper illustrates the use of Augmented Transition Networks (ATNs) as a design tool for constructing document retrieval systems for those personalized applications which are too small or specialized to attract a commercial vendor. ATNs, which are explained in the context of this application, are used not only to improve the human/computer interface with the retrieval system but also to conceptually organize its structure.},
journal = {SIGIR Forum},
month = may,
pages = {2–13},
numpages = {12}
}

@inproceedings{10.1145/800096.803134,
author = {Slonim, Jacob and Maryanski, Fred J. and Fisher, Paul S.},
title = {Mediator: An Integrated Approach to Information Retrieval},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803134},
doi = {10.1145/800096.803134},
abstract = { Mediator: An Integrated Approach to Information Retrieval The Mediator is a pseudo intelligent software controller which accomplishes two ends. First, it “mediates” between an Information Retrieval System and its end-user. On the assumption that the user of such a system will have at best a minimal knowledge of the operations of computers, it hides from him the internal complexities of the system, and presents to him a simplified “abstract” of the operations of the system. The Mediator allows the end-user to communicate with any application program in his own terms and to carry out operations of any degree of complexity which can be defined within those terms. Secondly, the controller enables a single system to extract unified information from data-banks of both data base management and textual environments. The Mediator is driven by a combination of hierarchically structured internal and external tables. The external tables contain a vocabulary selected by the user for his personal communication with the system; the internal tables contain directives which determine the appropriate path to be followed by the retrieval system in accomplishing the user's request.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {14–36},
numpages = {23},
keywords = {Data base management system textual information retrieval, Controller query language, Mediator},
series = {SIGIR '78}
}

@article{10.1145/1013234.803134,
author = {Slonim, Jacob and Maryanski, Fred J. and Fisher, Paul S.},
title = {Mediator: An Integrated Approach to Information Retrieval},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803134},
doi = {10.1145/1013234.803134},
abstract = { Mediator: An Integrated Approach to Information Retrieval The Mediator is a pseudo intelligent software controller which accomplishes two ends. First, it “mediates” between an Information Retrieval System and its end-user. On the assumption that the user of such a system will have at best a minimal knowledge of the operations of computers, it hides from him the internal complexities of the system, and presents to him a simplified “abstract” of the operations of the system. The Mediator allows the end-user to communicate with any application program in his own terms and to carry out operations of any degree of complexity which can be defined within those terms. Secondly, the controller enables a single system to extract unified information from data-banks of both data base management and textual environments. The Mediator is driven by a combination of hierarchically structured internal and external tables. The external tables contain a vocabulary selected by the user for his personal communication with the system; the internal tables contain directives which determine the appropriate path to be followed by the retrieval system in accomplishing the user's request.},
journal = {SIGIR Forum},
month = may,
pages = {14–36},
numpages = {23},
keywords = {Controller query language, Mediator, Data base management system textual information retrieval}
}

@inproceedings{10.1145/800096.803135,
author = {Hill, Edward},
title = {Analysis of an Inverted Data Base Structure},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803135},
doi = {10.1145/800096.803135},
abstract = {An inverted data base organization is analyzed. The inverted directory is viewed realistically as another large data base. Algorithms and formulations are derived to estimate the average number of accesses for insertion, retrieval and deletion of items from the data base. An average load time is also presented for the inverted data base.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {37–64},
numpages = {28},
keywords = {Data base performance, Inverted file organization, Information storage and retrieval},
series = {SIGIR '78}
}

@article{10.1145/1013234.803135,
author = {Hill, Edward},
title = {Analysis of an Inverted Data Base Structure},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803135},
doi = {10.1145/1013234.803135},
abstract = {An inverted data base organization is analyzed. The inverted directory is viewed realistically as another large data base. Algorithms and formulations are derived to estimate the average number of accesses for insertion, retrieval and deletion of items from the data base. An average load time is also presented for the inverted data base.},
journal = {SIGIR Forum},
month = may,
pages = {37–64},
numpages = {28},
keywords = {Information storage and retrieval, Data base performance, Inverted file organization}
}

@inproceedings{10.1145/800096.803136,
author = {Croft, W. Bruce},
title = {A File Organization for Cluster-Based Retrieval},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803136},
doi = {10.1145/800096.803136},
abstract = {A file organization for cluster-based retrieval is presented and tested. This file organization is based on the bottom-up search which, in contrast to the more usual top-down search, starts at the lowest level of a cluster hierarchy (the documents) and looks at progressively larger clusters. This approach enables most of the efficiency problems previously associated with clustered file organizations to be avoided. There are two parts to this file organization - a compact cluster hierarchy representation which does not store cluster representatives and a compact inverted file which is used to provide a starting point for the bottom-up search.Retrieval experiments show that the bottom-up search using this file organization can be more effective than a serial search, especially if high precision results are required.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {65–82},
numpages = {18},
series = {SIGIR '78}
}

@article{10.1145/1013234.803136,
author = {Croft, W. Bruce},
title = {A File Organization for Cluster-Based Retrieval},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803136},
doi = {10.1145/1013234.803136},
abstract = {A file organization for cluster-based retrieval is presented and tested. This file organization is based on the bottom-up search which, in contrast to the more usual top-down search, starts at the lowest level of a cluster hierarchy (the documents) and looks at progressively larger clusters. This approach enables most of the efficiency problems previously associated with clustered file organizations to be avoided. There are two parts to this file organization - a compact cluster hierarchy representation which does not store cluster representatives and a compact inverted file which is used to provide a starting point for the bottom-up search.Retrieval experiments show that the bottom-up search using this file organization can be more effective than a serial search, especially if high precision results are required.},
journal = {SIGIR Forum},
month = may,
pages = {65–82},
numpages = {18}
}

@inproceedings{10.1145/800096.803137,
author = {Yang, Chung-Shu},
title = {Record Block Allocation for Retrieval on Secondary Keys},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803137},
doi = {10.1145/800096.803137},
abstract = {Query retrieval based on secondary keys is an important operation in retrieval systems. Such a query generally retrieves more than one data record which satisfies the query criterion. This paper studies the problem of record address allocation in disk-like devices so as to facilitate the fast retrieval of a set of records which are jointly accessed by a query. A heuristic scheme, using the proposed minimal access retrieval property, is designed to assign records to blocks. Some experimental results are also presented.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {83–108},
numpages = {26},
series = {SIGIR '78}
}

@article{10.1145/1013234.803137,
author = {Yang, Chung-Shu},
title = {Record Block Allocation for Retrieval on Secondary Keys},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803137},
doi = {10.1145/1013234.803137},
abstract = {Query retrieval based on secondary keys is an important operation in retrieval systems. Such a query generally retrieves more than one data record which satisfies the query criterion. This paper studies the problem of record address allocation in disk-like devices so as to facilitate the fast retrieval of a set of records which are jointly accessed by a query. A heuristic scheme, using the proposed minimal access retrieval property, is designed to assign records to blocks. Some experimental results are also presented.},
journal = {SIGIR Forum},
month = may,
pages = {83–108},
numpages = {26}
}

@inproceedings{10.1145/800096.803138,
author = {Baxter, Anthony Q. and Johnson, Rowland R.},
title = {A Block Structured Query Language for Accessing a Relational Data Base},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803138},
doi = {10.1145/800096.803138},
abstract = {This paper describes a Block Structured Query Language (BSQL) to be used with relational data bases. The syntax of the language is presented and discussed. Facilities of the language are illustrated by examples of actual queries. In particular we demonstrate the ability of BSQL to obtain useful information from a relational data base that is incomplete. A relational calculus is then presented which forms a basis for a formalism which precisely describes the semantics of BSQL. Finally, comparative examples with other query languages are given.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {109–130},
numpages = {22},
keywords = {Data base languages, Query languages},
series = {SIGIR '78}
}

@article{10.1145/1013234.803138,
author = {Baxter, Anthony Q. and Johnson, Rowland R.},
title = {A Block Structured Query Language for Accessing a Relational Data Base},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803138},
doi = {10.1145/1013234.803138},
abstract = {This paper describes a Block Structured Query Language (BSQL) to be used with relational data bases. The syntax of the language is presented and discussed. Facilities of the language are illustrated by examples of actual queries. In particular we demonstrate the ability of BSQL to obtain useful information from a relational data base that is incomplete. A relational calculus is then presented which forms a basis for a formalism which precisely describes the semantics of BSQL. Finally, comparative examples with other query languages are given.},
journal = {SIGIR Forum},
month = may,
pages = {109–130},
numpages = {22},
keywords = {Data base languages, Query languages}
}

@inproceedings{10.1145/800096.803139,
author = {Eastman, Caroline M. and Weiss, Stephen F.},
title = {A Tree Algorithm for Nearest Neighbor Searching in Document Retrieval Systems},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803139},
doi = {10.1145/800096.803139},
abstract = {The problem of finding nearest neighbors to a query in a document collection is a special case of associative retrieval, in which searches are performed using more than one key. A nearest neighbors associative retrieval algorithm, suitable for document retrieval using similarity matching, is described. The basic structure used is a binary tree, at each node a set of keys (concepts) is tested to select the most promising branch. Backtracking to initially rejected branches is allowed and often necessary.Under certain conditions, the search time required by this algorithm is 0(log2N)k. N is the number of documents, and k is a system-dependent parameter. A series of experiments with a small collection confirm the predictions made using the analytic model; k is approximately 4 in this situation.This algorithm is compared with two other searching algorithms; sequential search and clustered search. For large collections, the average search time for this algorithm is less than that for a sequential search and greater than that for a clustered search. However, the clustered search, unlike the sequential search and this algorithm, does not guarantee that the near neighbors found are actually the nearest neighbors.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {131–149},
numpages = {19},
series = {SIGIR '78}
}

@article{10.1145/1013234.803139,
author = {Eastman, Caroline M. and Weiss, Stephen F.},
title = {A Tree Algorithm for Nearest Neighbor Searching in Document Retrieval Systems},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803139},
doi = {10.1145/1013234.803139},
abstract = {The problem of finding nearest neighbors to a query in a document collection is a special case of associative retrieval, in which searches are performed using more than one key. A nearest neighbors associative retrieval algorithm, suitable for document retrieval using similarity matching, is described. The basic structure used is a binary tree, at each node a set of keys (concepts) is tested to select the most promising branch. Backtracking to initially rejected branches is allowed and often necessary.Under certain conditions, the search time required by this algorithm is 0(log2N)k. N is the number of documents, and k is a system-dependent parameter. A series of experiments with a small collection confirm the predictions made using the analytic model; k is approximately 4 in this situation.This algorithm is compared with two other searching algorithms; sequential search and clustered search. For large collections, the average search time for this algorithm is less than that for a sequential search and greater than that for a clustered search. However, the clustered search, unlike the sequential search and this algorithm, does not guarantee that the near neighbors found are actually the nearest neighbors.},
journal = {SIGIR Forum},
month = may,
pages = {131–149},
numpages = {19}
}

@inproceedings{10.1145/800096.803140,
author = {Raghavan, Vijay V. and Yu, C. T.},
title = {Experiments on the Determination of the Relationships between Terms},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803140},
doi = {10.1145/800096.803140},
abstract = {The retrieval effectiveness of an automatic method that uses relevance judgements for the determination of positive as well as negative relationships between terms is evaluated. The term relationships are incorporated into the retrieval process by using a generalized similarity function that has a term match component, a positive term relationship component, and a negative term relationship component. Two strategies, query partitioning and query clustering, for the evaluation of the effectiveness of the term relationships are investigated. The latter appears to be more attractive from linguistic as well as economic points of view. The positive and the negative relationships are verified to be effective both when used individually, and in combination. The importance attached to the term relationship components relative to that of term match component is found to have a substantial effect on the retrieval performance. The usefulness of discriminant analysis as a technique for determining the relative importance of these components is investigated.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {150},
numpages = {1},
series = {SIGIR '78}
}

@article{10.1145/1013234.803140,
author = {Raghavan, Vijay V. and Yu, C. T.},
title = {Experiments on the Determination of the Relationships between Terms},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803140},
doi = {10.1145/1013234.803140},
abstract = {The retrieval effectiveness of an automatic method that uses relevance judgements for the determination of positive as well as negative relationships between terms is evaluated. The term relationships are incorporated into the retrieval process by using a generalized similarity function that has a term match component, a positive term relationship component, and a negative term relationship component. Two strategies, query partitioning and query clustering, for the evaluation of the effectiveness of the term relationships are investigated. The latter appears to be more attractive from linguistic as well as economic points of view. The positive and the negative relationships are verified to be effective both when used individually, and in combination. The importance attached to the term relationship components relative to that of term match component is found to have a substantial effect on the retrieval performance. The usefulness of discriminant analysis as a technique for determining the relative importance of these components is investigated.},
journal = {SIGIR Forum},
month = may,
pages = {150},
numpages = {1}
}

@inproceedings{10.1145/800096.803141,
author = {Williamson, Robert E.},
title = {Does Relevance Feedback Improve Document Retrieval Performance?},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803141},
doi = {10.1145/800096.803141},
abstract = {Many authors (1, 2, 3, 5, 6, 7) have suggested that overall performance of a document retrieval system is improved by relevance feedback. Relevance feedback denotes the last three steps in the following process: 1) the searcher enters a query, 2) the system prepares a ranked list of suggested documents, 3) the searcher judges some of the documents for relevancy, 4) the searcher informs the system of these documents judged and of the judgement, 5) the system constructs a new query based on the descriptors used in the original query and the descriptors used in the documents judged, 6) the system prepares a second ranked list of suggested documents.The presumption is that the second list is better than the first. By all performance measures (e.g. “fluid ranking” and “frozen ranking”), the second list is better than the first. However, if one reranks documents in the original list so as to reflect the searcher's efforts (step 3), the corresponding performance measures are comparable to those for the second list. The marginal difference between the performance measures for the ”reranked original” list (searcher's efforts alone) and the second list (which includes computer efforts) makes it unclear if the cost of steps 4 through 6 above can be justified. It is hoped that advocates of relevance feedback will present “reranked original” performance measures as a basis for any performance improvement claims.This paper also presents three reasonable, easily understood retrieval procedures for which the frozen ranking, the fluid ranking, and the reranked original evaluations are “obviously” the pertinent way to evaluate. Relevance feedback techniques as implemented in Salton's SMART DRS appear to show that it is worthwhile for user's to read abstracts prior to evaluation of full texts. The last indication presented in this paper is that the relevance feedback performance improvements noted using SMART are due mostly to the user making assessments; subsequent computer efforts appear to be most likely to result in no further change. For a query for which there is a subsequent change, the change is as likely to be harmful as helpful.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {151–170},
numpages = {20},
series = {SIGIR '78}
}

@article{10.1145/1013234.803141,
author = {Williamson, Robert E.},
title = {Does Relevance Feedback Improve Document Retrieval Performance?},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803141},
doi = {10.1145/1013234.803141},
abstract = {Many authors (1, 2, 3, 5, 6, 7) have suggested that overall performance of a document retrieval system is improved by relevance feedback. Relevance feedback denotes the last three steps in the following process: 1) the searcher enters a query, 2) the system prepares a ranked list of suggested documents, 3) the searcher judges some of the documents for relevancy, 4) the searcher informs the system of these documents judged and of the judgement, 5) the system constructs a new query based on the descriptors used in the original query and the descriptors used in the documents judged, 6) the system prepares a second ranked list of suggested documents.The presumption is that the second list is better than the first. By all performance measures (e.g. “fluid ranking” and “frozen ranking”), the second list is better than the first. However, if one reranks documents in the original list so as to reflect the searcher's efforts (step 3), the corresponding performance measures are comparable to those for the second list. The marginal difference between the performance measures for the ”reranked original” list (searcher's efforts alone) and the second list (which includes computer efforts) makes it unclear if the cost of steps 4 through 6 above can be justified. It is hoped that advocates of relevance feedback will present “reranked original” performance measures as a basis for any performance improvement claims.This paper also presents three reasonable, easily understood retrieval procedures for which the frozen ranking, the fluid ranking, and the reranked original evaluations are “obviously” the pertinent way to evaluate. Relevance feedback techniques as implemented in Salton's SMART DRS appear to show that it is worthwhile for user's to read abstracts prior to evaluation of full texts. The last indication presented in this paper is that the relevance feedback performance improvements noted using SMART are due mostly to the user making assessments; subsequent computer efforts appear to be most likely to result in no further change. For a query for which there is a subsequent change, the change is as likely to be harmful as helpful.},
journal = {SIGIR Forum},
month = may,
pages = {151–170},
numpages = {20}
}

@inproceedings{10.1145/800096.803142,
title = {INQUIRE System Overview},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803142},
doi = {10.1145/800096.803142},
abstract = {INQUIRE is a versatile database management system with integrated information retrieval and full-text processing capabilities. Designed primarily for the end-user of information, INQUIRE features rapid start-up of applications and has a broad range of facilities for both technical and non-technical users.INQUIRE is operational on IBM System 360 or 370, Amdahl 470, or equivalent, under OS, VS, MVS, or CMS.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {171–174},
numpages = {4},
series = {SIGIR '78}
}

@article{10.1145/1013234.803142,
title = {INQUIRE System Overview},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803142},
doi = {10.1145/1013234.803142},
abstract = {INQUIRE is a versatile database management system with integrated information retrieval and full-text processing capabilities. Designed primarily for the end-user of information, INQUIRE features rapid start-up of applications and has a broad range of facilities for both technical and non-technical users.INQUIRE is operational on IBM System 360 or 370, Amdahl 470, or equivalent, under OS, VS, MVS, or CMS.},
journal = {SIGIR Forum},
month = may,
pages = {171–174},
numpages = {4}
}

@inproceedings{10.1145/800096.803143,
title = {INSPECTOR},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803143},
doi = {10.1145/800096.803143},
abstract = {INSPECTOR is a proprietary software system that is designed to be used in an information retrieval environment. Specifically, it is oriented toward the on-line retrieval of microfilmed documents through the indexing of certain key terms relating to the document itself. Items such as date, account number, name, customer name or number, purchase order number, etc. might be considered as key descriptive terms. Thus by indexing these elements on a randomly accessible disk drive, the location of the filmed image of all original documents pertaining to a particular descriptive term may be quickly located by the computer and the location displayed to the operator. Alternatively, if used in conjunction with the Eastman Kodak IC-5/PR-1 microfilm retrieval unit, the computer system will cause the film display unit to automatically advance to the correct frame(s), keeping operator intervention to an absolute minimum.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {175–176},
numpages = {2},
series = {SIGIR '78}
}

@article{10.1145/1013234.803143,
title = {INSPECTOR},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803143},
doi = {10.1145/1013234.803143},
abstract = {INSPECTOR is a proprietary software system that is designed to be used in an information retrieval environment. Specifically, it is oriented toward the on-line retrieval of microfilmed documents through the indexing of certain key terms relating to the document itself. Items such as date, account number, name, customer name or number, purchase order number, etc. might be considered as key descriptive terms. Thus by indexing these elements on a randomly accessible disk drive, the location of the filmed image of all original documents pertaining to a particular descriptive term may be quickly located by the computer and the location displayed to the operator. Alternatively, if used in conjunction with the Eastman Kodak IC-5/PR-1 microfilm retrieval unit, the computer system will cause the film display unit to automatically advance to the correct frame(s), keeping operator intervention to an absolute minimum.},
journal = {SIGIR Forum},
month = may,
pages = {175–176},
numpages = {2}
}

@inproceedings{10.1145/800096.803144,
title = {MAGIC},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803144},
doi = {10.1145/800096.803144},
abstract = {MAGIC is a simple, elegant, and time-saving system for retrieving, manipulating, and displaying time series data. The user of MAGIC is not required to know anything about file structures or computer programming. Finished reports and graphs suitable for reproduction are attainable after minimal experience with the MAGIC system.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {177},
numpages = {1},
series = {SIGIR '78}
}

@article{10.1145/1013234.803144,
title = {MAGIC},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803144},
doi = {10.1145/1013234.803144},
abstract = {MAGIC is a simple, elegant, and time-saving system for retrieving, manipulating, and displaying time series data. The user of MAGIC is not required to know anything about file structures or computer programming. Finished reports and graphs suitable for reproduction are attainable after minimal experience with the MAGIC system.},
journal = {SIGIR Forum},
month = may,
pages = {177},
numpages = {1}
}

@inproceedings{10.1145/800096.803145,
author = {Noreault, Terry and Mcgill, Michael},
title = {SIRE},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803145},
doi = {10.1145/800096.803145},
abstract = {SIRE (Syracuse Information Retrieval Experiment) is an interactive bibliographic retrieval system. It was developed at the School of Information Studies at Syracuse University. It is implemented in SAIL (Stanford Artificial Intelligence Language), an ALGOL like language, on a DEC KL-10. SIRE presently has two data bases; 1) one issue of Physics Abstracts with 7146 documents; and 2) a sign language linguistics data base from Gallaudet College with 490 documents.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {178–179},
numpages = {2},
series = {SIGIR '78}
}

@article{10.1145/1013234.803145,
author = {Noreault, Terry and Mcgill, Michael},
title = {SIRE},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803145},
doi = {10.1145/1013234.803145},
abstract = {SIRE (Syracuse Information Retrieval Experiment) is an interactive bibliographic retrieval system. It was developed at the School of Information Studies at Syracuse University. It is implemented in SAIL (Stanford Artificial Intelligence Language), an ALGOL like language, on a DEC KL-10. SIRE presently has two data bases; 1) one issue of Physics Abstracts with 7146 documents; and 2) a sign language linguistics data base from Gallaudet College with 490 documents.},
journal = {SIGIR Forum},
month = may,
pages = {178–179},
numpages = {2}
}

@inproceedings{10.1145/800096.803146,
author = {Koll, Matthew B.},
title = {WEIRD: An Approach to Concept-Based Information Retrieval},
year = {1978},
isbn = {9781450374026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800096.803146},
doi = {10.1145/800096.803146},
abstract = {WEIRD is an automatic document retrieval system designed and implemented at Syracuse University, which attempts to advance the art of computerized retrieval from word-matching to judging conceptual similarity. WEIRD uses a vector space model to represent the relations among terms and documents. Items in the space are located according to their “meaning”, which is their proximity to all other items in the data base as measured by co-occurrence frequencies. This is done without manipulating large matrices. The dimensions of the space are not used to define relations; items are defined solely by their position relative to the other items. Retrieval is determined by Euclidean distance from the plotted query. In the first section of the paper the basic characteristics of WEIRD are described. Second, the results of a preliminary evaluation are reported. Alternatives for further development of WEIRD are then considered.},
booktitle = {Proceedings of the 1st Annual International ACM SIGIR Conference on Information Storage and Retrieval},
pages = {180},
numpages = {1},
series = {SIGIR '78}
}

@article{10.1145/1013234.803146,
author = {Koll, Matthew B.},
title = {WEIRD: An Approach to Concept-Based Information Retrieval},
year = {1978},
issue_date = {May 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {0163-5840},
url = {https://doi.org/10.1145/1013234.803146},
doi = {10.1145/1013234.803146},
abstract = {WEIRD is an automatic document retrieval system designed and implemented at Syracuse University, which attempts to advance the art of computerized retrieval from word-matching to judging conceptual similarity. WEIRD uses a vector space model to represent the relations among terms and documents. Items in the space are located according to their “meaning”, which is their proximity to all other items in the data base as measured by co-occurrence frequencies. This is done without manipulating large matrices. The dimensions of the space are not used to define relations; items are defined solely by their position relative to the other items. Retrieval is determined by Euclidean distance from the plotted query. In the first section of the paper the basic characteristics of WEIRD are described. Second, the results of a preliminary evaluation are reported. Alternatives for further development of WEIRD are then considered.},
journal = {SIGIR Forum},
month = may,
pages = {180},
numpages = {1}
}

